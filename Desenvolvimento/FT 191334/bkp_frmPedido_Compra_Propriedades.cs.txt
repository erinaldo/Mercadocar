using Mercadocar.Componentes;
using Mercadocar.Herancas;
using Mercadocar.InfraEstrutura;
using Mercadocar.InfraEstrutura.Utilidades;
using Mercadocar.ObjetosNegocio.DataObject;
using Mercadocar.RegrasNegocio;
using Microsoft.VisualBasic;
using System;
using System.Data;
using System.Drawing;
using System.Windows.Forms;

namespace Mercadocar.Formularios
{
    public partial class frmPedido_Compra_Propriedades : frmPropriedades, Mercadocar.Interfaces.IfrmPropriedades
    {
        #region "   Declarações        "

        private DataSet dtsPropriedades;
        private DataSet dtsPropriedadesOriginal;
        private DataSet dtsCondicaoPagamento;
        private DataSet dtsResumoPecaPedidoCompra;
        private string strFornCD = string.Empty;
        private int intPedidoCompraCTID = 0;
        private int intPedidoCompraITID = 0;
        private Boolean blnFornecedorFabricante = false;

        private bool blnIncluirItem = false;
        private bool blnAlterarItem = false;

        private bool blnPermissaoAlterar = false;

        private bool blnPermissaoAnaliseCusto = false;
        private bool blnPermissaoAnaliseEstoque = false;
        private bool blnPermissaoHistoricoMovimentacao = false;
        private bool blnPermissaoHistoricoPedidoCompra = false;
        private bool blnPermissaoBotaoListagemGarantia = false;

        private bool blnPermissaoPropriedadeADE = false;
        private bool blnPermissaoPropriedadeMapa = false;

        private bool blnPermissaoGerarMapaCotacao = false;
        private bool blnPermissaoPropriedadesFornecedor = false;
        private bool blnPermissaoAlterarPedidosComOrigem = false;
        private bool blnPermissaoDistribuirTotalmenteLojas = false;

        private bool blnPermissaoDistribuicao = false;
        private bool blnPermissaoRedistribuicao = false;
        private bool blnPermissaoVisualizarAuditoria = false;

        private bool blnReajustar = false;

        private bool blnPedidoEmInclusao = false;
        private bool blnPedidoEmEdicao = false;

        private bool blnExibirMenssagemMultiploCompra = false;

        private int intColunaLojaNome = 0;

        private bool blnPedidoEncomendaVenda = false;

        private bool blnFornecedorTipoFabricante = false;
        private bool blnRecebidoDataSet = false;

        private bool blnLojaVendaDestino = true;

        private decimal qtdeTotalPeca = 0;

        private const int TAMANHO_GRID_PEDIDOS_ABA_GERAL = 685;
        private const int TAMANHO_GRID_PEDIDOS_ABA_ITENS = 430;
        #endregion

        #region "   Propriedades       "

        public int Pedido_Compra_CT_ID
        {
            get { return this.intPedidoCompraCTID; }
        }

        public int Pedido_Compra_IT_ID
        {
            get { return this.intPedidoCompraITID; }
        }

        public bool Alterar_Item
        {
            get { return this.blnAlterarItem; }
        }

        #endregion

        #region "   Construtor         "

        public frmPedido_Compra_Propriedades()
            : base()
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                this.InitializeComponent();
                this.Load += this.Form_Load;
                this.Shown += this.Form_Shown;

                this.objGridBotaoItens.Botao_Propriedade_Incluir.Click += this.Clicar_Botao_Incluir;
                this.objGridBotaoItens.Botao_Propriedade_Excluir.Click += this.Tratar_Botao_Aplicar_Excluir_Item;
                this.objGridBotaoItens.Botao_Propriedade_Desfazer.Click += this.Clicar_Botao_Propriedade_Desfazer;
                this.objGridBotaoItens.Botao_Propriedade_Alterar.Click += this.Clicar_Botao_Propriedade_Alterar;
                this.objGridBotaoItens.Botao_Propriedade_Confirmar.Click += this.Clicar_Botao_Propriedade_Confirmar;
                this.objGridBotaoItens.Atualizar_DataGridViewRow += this.Clicar_Botao_Grid_Salvar_Alterar;
                this.objGridBotaoItens.Cadastrar_DataGridViewRow += this.Clicar_Botao_Grid_Salvar_Inserir;
                this.objGridBotaoItens.Limpar_Formulario += this.Limpar_Formulario_objGridButtons;
                this.objGridBotaoItens.Preencher_Formulario += this.Preencher_Propriedade;
                this.objGridBotaoItens.Setar_Campo_Focus_Na_Edicao_Formulario = this.objCodigoMercadocar.Text_Fabricante;
                this.objGridBotaoItens.Verificar_Atualizar_Valido += this.Verificar_Cadastro_Valido;
                this.objGridBotaoItens.Verificar_Cadastro_Valido += this.Verificar_Cadastro_Valido;
                this.objGridBotaoItens.Efetuar_Exclusao += this.Verificar_Excluir_Alterar;
                this.objGridBotaoItens.DgvPadrao.ColumnHeaderMouseClick += this.Alterar_Ordenacao_Grid;

                this.tbpControlePedido.Enter += this.Entrar_Tab_Page_Controle_Pedido;
                this.tbpItensDoPedido.Enter += this.Entrar_Tab_Page_Itens_Do_Pedido;
                this.tbcHerdado.SelectedIndexChanged += this.Mudar_Selecao_Tab_Control;

                this.btnPesquisarFornecedor.Click += this.Clicar_Botao_Pesquisar_Fornecedor;
                this.btnPesquisarCondicaoPagamento.Click += this.Clicar_Botao_Pesquisar_Condicao_Pagamento;
                this.btnPropriedadesFornecedor.Click += this.Clicar_Botao_Propriedades_Fornecedor;
                this.btnConfirmarSaldo.Click += this.Clicar_Botao_Confirmar_Saldo;
                this.btnOrigemPedidoADE.Click += this.Clicar_Botao_Origem_Pedido_ADE;
                this.btnAuditoria.Click += this.Clicar_Botao_Auditoria;
                this.btnAnaliseMercadologica.Click += this.Clicar_Botao_Split;
                this.btnHistoricoCompras.Click += this.Clicar_Botao_Split;
                this.btnAuditoriaItemPedido.Click += this.Clicar_Botao_Split;
                this.btnMapaCotacao.Click += this.Clicar_Botao_Split;
                this.btnListagemGarantia.Click += this.Clicar_Botao_Listagem_Garantia;

                this.txtCodigoFornecedor.LostFocus += this.Sair_TextBox_Codigo_Fornecedor;

                this.txtCodigoFornecedor.KeyPress += this.Pressionar_Tecla_Campos_Inteiros;
                this.txtCodigoCondicaoPagamento.KeyPress += this.Pressionar_Tecla_Campos_Inteiros;
                this.txtCodigoCondicaoPagamento.LostFocus += this.Perder_Foco_Campo_Codigo_Condicao_Pagamento;

                this.cboLojaDestino.SelectedValueChanged += this.Alterar_cboLojaDestino;
                this.cboLojaFaturamento.SelectedValueChanged += this.Alterar_cboLojaFaturamento;
                this.cboComprador.SelectedValueChanged += this.Alterar_cboComprador;
                this.txtVendedor.TextChanged += this.Alterar_txtVendedor;
                this.nudDescontoPedido.ValueChanged += this.Alterar_nudDescontoPedido;
                this.nudSubstituicaoPedido.ValueChanged += this.Alterar_nudSubstituicaoPedido;
                this.nudIPIPedido.ValueChanged += this.Alterar_nudIPIPedido;
                this.chkRemoverImpostos.CheckedChanged += this.Alterar_chkRemoverImpostos;
                this.dtpDataPrevista.ValueChanged += this.Alterar_dtpDataPrevista;
                this.txtObservacoes.TextChanged += this.Alterar_txtObservacoes;
                this.txtCobrancaFornecedor.TextChanged += this.Alterar_txtCobrancaFornecedor;
                this.txtCodigoCondicaoPagamento.TextChanged += this.Alterar_txtCodigoCondicaoPagamento;

                this.objCodigoMercadocar.Carregar_Peca_ID += this.Carregar_Peca_ID_Cod_Mercadocar;
                this.objCodigoMercadocar.cboTipoPesquisa.SelectedValueChanged += this.Mudar_Selecao_Tipo_Pesquisa_Objeto_Codigo_Mercado_Car;

                this.nudQtdeItem.LostFocus += this.Perder_Foco_nudQtdeItem;

                this.tsmAnaliseCusto.Click += this.Clicar_Botao_Analise_Mercadologica_Custo;
                this.tsmAnaliseEstoque.Click += this.Clicar_Botao_Analise_Mercadologica_Estoque;
                this.tsmHistoricoMovimentacao.Click += this.Clicar_Menu_Historico_Movimentacao;
                this.tsmHistoricoPedidoCompra.Click += this.Clicar_Menu_Historico_Pedido_Compra;
                this.tsmAuditoriaItemPedidoSelecionado.Click += this.Clicar_Botao_Auditoria_Item_Selecionado;
                this.tsmAuditoriaItemPedidoExcluidos.Click += this.Clicar_Botao_Auditoria_Itens_Excluidos;
                this.tsmGerar_Mapa_Saldo.Click += this.Clicar_Botao_Gerar_Mapa_De_Saldo;
                this.tsmOrigem.Click += this.Clicar_Botao_Origem_Pedido_Mapa;

                this.chkDistribuirTotalmenteParaLojas.CheckedChanged += this.Clicar_Checkbox_Distribuir_Para_Lojas;

                this.dgvPreDistribuicao.CellDoubleClick += this.Clicar_Celula_dgvPreDistribuicao;

                this.txtEncomenda.LostFocus += this.Sair_TextBox_Codigo_Encomenda;
                this.txtEncomenda.KeyPress += this.Pressionar_Tecla_Campos_Inteiros;
                this.btnPesquisaEncomenda.Click += this.Clicar_Botao_Pesquisar_Encomenda;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        public frmPedido_Compra_Propriedades(int intPedidoCompraCTID)
            : this()
        {
            try
            {
                this.intPedidoCompraCTID = intPedidoCompraCTID;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public frmPedido_Compra_Propriedades(DataSet dtsPedidoCompra)
            : this()
        {
            try
            {
                this.dtsPropriedades = dtsPedidoCompra;
                this.blnRecebidoDataSet = true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public frmPedido_Compra_Propriedades(int intPedidoCompraCTID, int intPedidoCompraITID)
            : this()
        {
            try
            {
                this.intPedidoCompraCTID = intPedidoCompraCTID;
                this.intPedidoCompraITID = intPedidoCompraITID;
                this.tbcHerdado.SelectedTab = this.tbpItensDoPedido;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public frmPedido_Compra_Propriedades(string strLojaID, string strFornCD)
            : this()
        {
            try
            {
                this.cboLojaFaturamento.SelectedValue = strLojaID.DefaultInteger();
                this.strFornCD = strFornCD;
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region "   Inicialização      "

        private void Form_Load(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                if (this.intPedidoCompraCTID == 0)
                {
                    this.blnPedidoEmInclusao = true;
                }
                else
                {
                    this.blnPedidoEmEdicao = true;
                }

                this.Tratar_Permissoes();

                this.Definir_Formulario_Estilo();

                this.lblDescricaoFabricante.DataBindings.Add("Text", this.objCodigoMercadocar, "Fabricante_NmFantasia");
                this.lblDescricaoProduto.DataBindings.Add("Text", this.objCodigoMercadocar, "Produto_Ds");
                this.lblDescricaoPeca.DataBindings.Add("Text", this.objCodigoMercadocar, "Peca_DsTecnica");

                this.dgvPreDistribuicao.ReadOnly = true;
                this.objGridBotaoItens.DgvPadrao.AllowUserToResizeColumns = false;
                this.Configurar_Grid_Pre_Distribuicao();
                this.Adicionar_Colunas_MC_Grid_Buttons_Item();
                this.Preencher_Combos();
                this.Preencher_Combo_Loja_De_Faturamento();
                this.Preencher_Combo_Loja_De_Destino();
                this.Carregar_Dados();
                this.lblTipo_Descricao.Text = this.Concatenar_Tipos_Fornecedor(this.dtsPropriedades.Tables["Fornecedor_Tipo"]);
                this.Validar_Tipo_Fornecedor();
                this.Atualizar_Valores_Itens_E_Totais();
                this.Habilitar_Desabilitar_Capa();
                this.Verificar_Mudancas();
                this.Habilitar_Edicao_Item_Pedido(false);
                this.Validar_Exibicao_Botao_Listagem_Garantia();

                this.Carregar_Item_Alteracao_Por_Paramentro();

                this.Carregar_Fornecedor_Por_Paramentro();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Form_Shown(object sender, EventArgs e)
        {
            try
            {
                this.txtCodigoFornecedor.Focus();
                if (this.txtCodigoFornecedor.Text.Trim() == string.Empty)
                {
                    this.btnPropriedadesFornecedor.Enabled = false;
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        #endregion

        #region "   Eventos            "

        private void Perder_Foco_nudQtdeItem(object sender, EventArgs e)
        {
            try
            {
                this.Adicionar_Remover_Handler_Tab_Itens(false);
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                if (this.Validar_Pre_Distribuicao(0, 0, false) == false)
                {
                    MessageBox.Show("É necessário alterar a Pré-Dstribuição antes da Quantidade do Item.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    this.nudQtdeItem.Value = this.Quantidade_Total_Distribuida();
                    this.nudQtdeItem.Focus();
                    return;
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                this.Adicionar_Remover_Handler_Tab_Itens(true);
                this.Adicionar_Remover_Handler_Grid_Distribuicao(true);
            }
        }

        private void Entrar_Tab_Page_Controle_Pedido(object sender, EventArgs e)
        {
            try
            {
                this.btnHistoricoCompras.Visible = false;
                this.btnAnaliseMercadologica.Visible = false;
                if (this.objGridBotaoItens.Botao_Propriedade_Confirmar.Enabled)
                {
                    this.objGridBotaoItens.Botao_Propriedade_Desfazer.PerformClick();
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_txtCodigoCondicaoPagamento(object sender, EventArgs e)
        {
            try
            {
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Condicao_Pagamento_CT_CD"] = this.txtCodigoCondicaoPagamento.Text;
                this.Alterar_Usuario_Ultima_Alteracao();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_cboComprador(object sender, EventArgs e)
        {
            try
            {
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Usuario_Comprador_ID"] = this.cboComprador.SelectedValue;
                this.Alterar_Usuario_Ultima_Alteracao();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_cboLojaFaturamento(object sender, EventArgs e)
        {
            try
            {
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Loja_Faturamento_ID"] = this.cboLojaFaturamento.SelectedValue;
                this.Alterar_Usuario_Ultima_Alteracao();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_cboLojaDestino(object sender, EventArgs e)
        {
            try
            {
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Loja_Destino_ID"] = this.cboLojaDestino.SelectedValue;
                this.Alterar_Usuario_Ultima_Alteracao();
                this.Atualizar_Pre_Distribuicao_Para_Todos_Itens();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_txtCobrancaFornecedor(object sender, EventArgs e)
        {
            try
            {
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Pedido_Compra_CT_Cobranca_Fornecedor"] = this.txtCobrancaFornecedor.Text;
                this.Alterar_Usuario_Ultima_Alteracao();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_txtObservacoes(object sender, EventArgs e)
        {
            try
            {
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Pedido_Compra_CT_Obs"] = this.txtObservacoes.Text;
                this.Alterar_Usuario_Ultima_Alteracao();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_dtpDataPrevista(object sender, EventArgs e)
        {
            try
            {
                this.dtpDataPrevista.Format = DateTimePickerFormat.Short;
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Pedido_Compra_CT_Data_Prevista"] = this.dtpDataPrevista.Value;
                this.Alterar_Usuario_Ultima_Alteracao();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_chkRemoverImpostos(object sender, EventArgs e)
        {
            try
            {
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Pedido_Compra_CT_Remover_Impostos"] = this.chkRemoverImpostos.Checked;
                this.Aplicar_Alteracoes_Capa_Para_Itens(sender);
                this.Alterar_Usuario_Ultima_Alteracao();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_nudIPIPedido(object sender, EventArgs e)
        {
            try
            {
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Pedido_Compra_CT_IPI"] = this.nudIPIPedido.Value;
                this.Aplicar_Alteracoes_Capa_Para_Itens(sender);
                this.Alterar_Usuario_Ultima_Alteracao();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_nudSubstituicaoPedido(object sender, EventArgs e)
        {
            try
            {
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Pedido_Compra_CT_Substituicao"] = this.nudSubstituicaoPedido.Value;
                this.Aplicar_Alteracoes_Capa_Para_Itens(sender);
                this.Alterar_Usuario_Ultima_Alteracao();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_nudDescontoPedido(object sender, EventArgs e)
        {
            try
            {
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Pedido_Compra_CT_Desconto"] = this.nudDescontoPedido.Value;
                this.Aplicar_Alteracoes_Capa_Para_Itens(sender);
                this.Alterar_Usuario_Ultima_Alteracao();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_txtVendedor(object sender, EventArgs e)
        {
            try
            {
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Pedido_Compra_CT_Vendedor"] = this.txtVendedor.Text;
                this.Alterar_Usuario_Ultima_Alteracao();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_Codigo_Fornecedor(object sender, EventArgs e)
        {
            try
            {
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Forn_CD"] = this.txtCodigoFornecedor.Text;
                this.Alterar_Usuario_Ultima_Alteracao();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_Detalhes_Item(object sender, EventArgs e)
        {
            try
            {
                if (this.cboEmbalagemCompra.SelectedValue == null && this.lblMargemLucro.Text.IsNullOrEmpty())
                {
                    return;
                }

                this.Calcular_Valores_Detalhe_Peca(this.cboEmbalagemCompra.SelectedValue.ToInteger(), this.objCodigoMercadocar.Peca_ID, this.chkRemoverImpostosItens.Checked, false);
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_Ordenacao_Grid(object sender, EventArgs e)
        {
            try
            {
                this.Setar_Imagens_Grid();

            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Confirmar_Saldo(object sender, EventArgs e)
        {
            try
            {
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Tipo_ID"] = Convert.ToInt32(Mercadocar.Enumerados.Tipo_Pedido.Pedido);
                this.Efetuar_Alteracao();
                this.Close();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Propriedade_Desfazer(object sender, EventArgs e)
        {
            try
            {
                this.Finalizar_Edicao_Grid_Distribuicao();
                this.Adicionar_Remover_Handler_Tab_Itens(false);
                this.blnIncluirItem = false;
                this.blnAlterarItem = false;
                this.blnExibirMenssagemMultiploCompra = false;
                this.Habilitar_Edicao_Item_Pedido(false);

                if (this.objGridBotaoItens.DgvPadrao.RowCount == 0)
                {
                    this.Limpar_Campos_Itens();
                }
                this.dgvPreDistribuicao.ReadOnly = true;


                foreach (DataGridViewRow dgvItem in this.dgvPreDistribuicao.Rows)
                {
                    DataRow[] dtrItem = this.dtsPropriedades.Tables["Pre_Distribuicao"].Select(
                        "Loja_ID = " + dgvItem.Cells["Loja_ID"].Value +
                        " AND Peca_ID = " + dgvItem.Cells["Peca_ID"].Value +
                        " AND Enum_Tipo_ID = " + Enumerados.Origem_Pre_Distribuicao.Pedido_Compra.ToInteger());
                    DataRow[] dtrItemOriginal = this.dtsPropriedadesOriginal.Tables["Pre_Distribuicao"].Select(
                        "Loja_ID = " + dgvItem.Cells["Loja_ID"].Value +
                        " AND Peca_ID = " + dgvItem.Cells["Peca_ID"].Value +
                        " AND Enum_Tipo_ID = " + Enumerados.Origem_Pre_Distribuicao.Pedido_Compra.ToInteger());
                    if (dtrItem.Length > 0 && dtrItemOriginal.Length > 0)
                    {
                        this.Preencher_Pre_Distribuicao_Peca(dtrItem[0]["Loja_ID"].ToInteger(), dtrItem[0]["Lojas_NM"].ToString(),
                            this.objCodigoMercadocar.Peca_ID, dtrItem[0]["Pre_Distribuicao_Qtde"].ToInteger(), dtrItem[0]);
                        dgvItem.Cells["Pre_Distribuicao_Qtde"].Value = dtrItemOriginal[0]["Pre_Distribuicao_Qtde"];
                        dtrItem[0]["Pre_Distribuicao_Qtde"] = dtrItemOriginal[0]["Pre_Distribuicao_Qtde"];
                    }
                }

                this.dgvPreDistribuicao.Refresh();

                if (this.Validar_Pre_Distribuicao(0, 0, true) == false)
                {
                    this.objGridBotaoItens.Botao_Propriedade_Alterar.PerformClick();
                    this.nudQtdeItem.Focus();
                }
                else if (this.Verificar_Necessidade_Definir_Distribuicao(this.objCodigoMercadocar.Peca_ID, true))
                {
                    this.objGridBotaoItens.Botao_Propriedade_Alterar.PerformClick();
                    this.dgvPreDistribuicao.Focus();
                }

            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Propriedade_Confirmar(object sender, EventArgs e)
        {
            try
            {
                this.Atualizar_Data_Table_Pre_Distribuicao(this.objCodigoMercadocar.Peca_ID, this.nudQtdeItem.Value.ToInteger());

                if (this.dtsPropriedades.Tables["Pedido_Compra_IT"].Select("Peca_ID = " + this.objCodigoMercadocar.Peca_ID.ToString()).Length == 1 && this.blnIncluirItem)
                {
                    this.blnExibirMenssagemMultiploCompra = false;
                    this.Preencher_Campos_Itens();
                    this.blnIncluirItem = false;
                    this.blnAlterarItem = false;
                    this.Habilitar_Edicao_Item_Pedido(false);
                    if (MessageBox.Show("Item incluído com sucesso! Deseja continuar incluindo?", this.Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == DialogResult.Yes)
                    {
                        this.objGridBotaoItens.Botao_Propriedade_Incluir.PerformClick();
                        this.Limpar_Campos_Itens();
                    }
                }
                else
                {
                    if (this.blnIncluirItem == false)
                    {
                        this.Habilitar_Edicao_Item_Pedido(false);
                    }
                }
                this.dgvPreDistribuicao.ReadOnly = true;
                this.Setar_Imagens_Grid();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Propriedade_Alterar(object sender, EventArgs e)
        {
            try
            {
                this.objGridBotaoItens.Preencher_Formulario -= this.Preencher_Propriedade;
                if (this.objGridBotaoItens.DgvPadrao.SelectedRows.Count > 0)
                {
                    this.Habilitar_Edicao_Item_Pedido(true);
                    this.Adicionar_Remover_Handler_Tab_Itens(true);

                    this.Verificar_Existencia_Pre_Definicao();
                }

                this.blnExibirMenssagemMultiploCompra = false;
                this.blnIncluirItem = false;
                this.blnAlterarItem = true;
                this.Habilitar_Edicao_Item_Pedido(true);
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                this.objGridBotaoItens.Preencher_Formulario += this.Preencher_Propriedade;
            }
        }

        private void Clicar_Botao_Incluir(object sender, EventArgs e)
        {
            try
            {
                this.blnIncluirItem = true;
                this.blnAlterarItem = false;
                this.Adicionar_Remover_Handler_Tab_Itens(false);
                this.Habilitar_Edicao_Item_Pedido(true);
                this.Limpar_Campos_Itens();
                this.objCodigoMercadocar.Text_Fabricante.Focus();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Gerar_Mapa_De_Saldo(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                // Gerar Mapa de Cotação do saldo do pedido gerado por um mapa
                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Tipo_Origem_ID"].ToInteger() == Enumerados.Origem_Pedido_Compras.Mapa_de_Cotacao_Novo.ToInteger() &&
                    this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() == Enumerados.Status_Pedido_Compra.Parcial.ToInteger())
                {
                    Analise_CotacaoBUS busAnaliseCotacao = new Analise_CotacaoBUS();

                    DataTable dttFornecedores = busAnaliseCotacao.Criar_DataTable_Fornecedor_Para_Procedure();

                    Int32 intIDCotacaoPeca = busAnaliseCotacao.Gerar_Mapa_Cotacao_A_Partir_Do_Pedido_Compra(((UsuarioDO)Root.Funcionalidades.Usuario_Ativo).ID, this.intPedidoCompraCTID, dttFornecedores, new DateTime());

                    this.Carregar_Dados();
                    this.btnAplicar.Enabled = false;
                    this.Registro_Alterado = true;
                    this.Exibir_Caption_Origem_Pedido();

                    MessageBox.Show("Mapa de Cotação " + intIDCotacaoPeca.ToString() + " gerado com sucesso!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);

                    frmMapa_Cotacao_Propriedades frmMapaCotacaoPropriedadesNovo = new frmMapa_Cotacao_Propriedades(intIDCotacaoPeca);
                    frmMapaCotacaoPropriedadesNovo.Show(this);
                }
                // Abrir tela de wizard do mapa para gerar cotação de um pedido gerado de uma analise de duração de estoque
                else if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Tipo_Origem_ID"].ToInteger() == Enumerados.Origem_Pedido_Compras.Duracao_de_Estoque_Novo.ToInteger() &&
                        this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() == Enumerados.Status_Pedido_Compra.Parcial.ToInteger())
                {
                    frmMapa_Cotacao_Criacao_Wizard frmMapaCotacaoCriacaoWizard = new frmMapa_Cotacao_Criacao_Wizard(this.intPedidoCompraCTID,
                                                                                                                       this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Objeto_Origem_ID"].ToInteger(),
                                                                                                                       this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Fornecedor_ID"].ToInteger());
                    if (frmMapaCotacaoCriacaoWizard.ShowDialog(this) == DialogResult.OK)
                    {
                        this.Carregar_Dados();
                        this.btnAplicar.Enabled = false;
                        this.Registro_Alterado = true;
                        this.Exibir_Caption_Origem_Pedido();

                        int intIDCotacaoPeca = frmMapaCotacaoCriacaoWizard.Mapa_Cotacao_DataRow["Analise_Cotacao_ID"].ToInteger();
                        frmMapa_Cotacao_Propriedades frmMapaCotacaoPropriedadesNovo = new frmMapa_Cotacao_Propriedades(intIDCotacaoPeca);
                        frmMapaCotacaoPropriedadesNovo.Show(this);

                    }

                }
                else if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() == Enumerados.Status_Pedido_Compra.Pendente_de_2_Preco.ToInteger() &&
                         this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Analise_Cotacao_ID"].ToInteger() != 0)
                {
                    frmMapa_Cotacao_Propriedades frmMapaCotacaoPropriedadesNovo = new frmMapa_Cotacao_Propriedades(this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Analise_Cotacao_ID"].ToInteger());
                    frmMapaCotacaoPropriedadesNovo.Show(this);
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Botao_Propriedades_Fornecedor(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);

                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Fornecedor_ID"].ToInteger() == 0)
                {
                    return;
                }
                frmFornecedorPropriedades frmPropriedades = new frmFornecedorPropriedades(this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Fornecedor_ID"].ToInteger());
                frmPropriedades.Show(this);
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);
                this.Adicionar_Remover_Handler_Grid_Distribuicao(true);
                this.Adicionar_Remover_Handler_Tab_Itens(true);

                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Botao_Novo_Fornecedor(object sender, System.EventArgs e)
        {
            try
            {
                frmFornecedorWizard frmWizard = new frmFornecedorWizard();

                if (!(frmWizard.ShowDialog(this) == DialogResult.OK))
                {
                    return;
                }

                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Condicao_Pagamento_CT_ID"] = Convert.ToInt32(((FornecedorDO)frmWizard.DataObject).ID);
                this.txtCodigoFornecedor.Text = ((FornecedorDO)frmWizard.DataObject).Codigo;
                this.lblNomeFantasia.Text = ((FornecedorDO)frmWizard.DataObject).PessoaJuridica.Nome_Fantasia;

                frmWizard.Dispose();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Pesquisar_Encomenda(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                this.Carregar_Encomenda(0);
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Botao_Pesquisar_Fornecedor(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);

                frmPesquisaGrid frmPesquisa = new frmPesquisaGrid("Fornecedores", "Pesquisa de Fornecedor");
                frmPesquisa.Grid.Adicionar_Coluna("Forn_ID");
                frmPesquisa.Grid.Adicionar_Coluna("Forn_CD", "Código", 50, false);
                frmPesquisa.Grid.Adicionar_Coluna("CNPJ", "CNPJ", 110, false);
                frmPesquisa.Grid.Adicionar_Coluna("Nome_Fantasia", "Fornecedor", 110, true);

                FornecedorBUS busFornecedor = new FornecedorBUS();
                frmPesquisa.Carregar_Grid(busFornecedor.Consultar_DataSet_Fornecedor_CNPJ().Tables[0]);
                if (frmPesquisa.ShowDialog() == DialogResult.OK)
                {
                    this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Fornecedor_ID"] = frmPesquisa.Registro.Cells["Forn_ID"].Value.ToInteger();
                    this.txtCodigoFornecedor.Text = Convert.ToString(frmPesquisa.Registro.Cells["Forn_CD"].Value);
                    this.Sair_TextBox_Codigo_Fornecedor(this.txtCodigoFornecedor, e);
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);
                this.Adicionar_Remover_Handler_Grid_Distribuicao(true);
                this.Adicionar_Remover_Handler_Tab_Itens(true);

                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Botao_Pesquisar_Condicao_Pagamento(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);

                Condicao_Pagamento_CTBUS busCondPagamento = new Condicao_Pagamento_CTBUS();
                frmPesquisaGrid frmPesquisa = new frmPesquisaGrid("Descrição", "Pesquisa por Código");

                frmPesquisa.Grid.Adicionar_Coluna("Condicao_Pagamento_CT_ID");
                frmPesquisa.Grid.Adicionar_Coluna("Condicao_Pagamento_CT_DS", "Descrição", 40, true);
                frmPesquisa.Grid.Adicionar_Coluna("Condicao_Pagamento_CT_CD", "Código", 60, false);

                frmPesquisa.Carregar_Grid(busCondPagamento.Consultar_DataSet().Tables[0]);

                if (frmPesquisa.ShowDialog(this) == DialogResult.OK)
                {
                    this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Condicao_Pagamento_CT_ID"] = frmPesquisa.Registro.Cells["Condicao_Pagamento_CT_ID"].Value.ToInteger();
                    this.txtCodigoCondicaoPagamento.Text = Convert.ToString(frmPesquisa.Registro.Cells["Condicao_Pagamento_CT_CD"].Value);
                    this.lblDescricaoCondicaoPagamento.Text = Convert.ToString(frmPesquisa.Registro.Cells["Condicao_Pagamento_CT_DS"].Value);
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);
                this.Adicionar_Remover_Handler_Grid_Distribuicao(true);
                this.Adicionar_Remover_Handler_Tab_Itens(true);

                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Botao_Origem_Pedido_Mapa(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Tipo_Origem_ID"].ToInteger() == Enumerados.Origem_Pedido_Compras.Mapa_de_Cotacao_Novo.ToInteger())
                {
                    Analise_CotacaoBUS busAnaliseCotacao = new Analise_CotacaoBUS();
                    DataTable dttConsulta = null;

                    dttConsulta = busAnaliseCotacao.Consultar_DataSet_Mapa_Cotacao(this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Objeto_Origem_ID"].ToInteger()).Tables[0];

                    if (dttConsulta.Rows.Count > 0)
                    {
                        frmMapa_Cotacao_Propriedades frmMapaCotacaoPropriedades = new frmMapa_Cotacao_Propriedades(this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Objeto_Origem_ID"].ToInteger());
                        frmMapaCotacaoPropriedades.ShowDialog(this);
                    }
                    else
                    {
                        MessageBox.Show("Mapa de Cotação não encontrado.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Botao_Origem_Pedido_ADE(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Tipo_Origem_ID"].ToInteger() == Enumerados.Origem_Pedido_Compras.Duracao_de_Estoque_Novo.ToInteger())
                {
                    Analise_CotacaoBUS busAnaliseCotacao = new Analise_CotacaoBUS();
                    DataTable dttConsulta = null;

                    dttConsulta = busAnaliseCotacao.Consultar_DataSet_Analise(this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Objeto_Origem_ID"].ToInteger()).Tables[0];

                    if (dttConsulta.Rows.Count > 0)
                    {
                        frmAnalise_Duracao_Estoque_Propriedades frmAnaliseDuracaoEstoquePropriedades = new frmAnalise_Duracao_Estoque_Propriedades(this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Objeto_Origem_ID"].ToInteger());
                        frmAnaliseDuracaoEstoquePropriedades.Show(this);
                    }
                    else
                    {
                        MessageBox.Show("Lote de Analise de Duração do Estoque não encontrado.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Botao_Listagem_Garantia(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                frmGarantia_Pedido_Grid frmGarantiaPedidoGrid = new frmGarantia_Pedido_Grid(this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Forn_CD"].ToString(),
                                                                                            this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Fornecedor_ID"].ToInteger());

                frmGarantiaPedidoGrid.ShowDialog(this);

            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Carregar_Peca_ID_Cod_Mercadocar(object sender, EventArgs e)
        {
            try
            {
                this.objCodigoMercadocar.Carregar_Peca_ID -= this.Carregar_Peca_ID_Cod_Mercadocar;
                if (this.objCodigoMercadocar.Peca_ID != 0)
                {
                    Pedido_CompraBUS busPedidoCompra = new Pedido_CompraBUS();
                    bool blnSolitarPermissao = false;
                    this.lblDescricaoFabricante.Text = this.objCodigoMercadocar.Fabricante_NmFantasia;
                    this.lblDescricaoProduto.Text = this.objCodigoMercadocar.Produto_Ds;
                    this.lblDescricaoPeca.Text = this.objCodigoMercadocar.Peca_DsTecnica;
                    if (this.dtsPropriedades.Tables["Pedido_Compra_IT"].Select("Peca_ID = " + this.objCodigoMercadocar.Peca_ID.ToString()).Length == 0)
                    {
                        // Carregar Detalhes da Peça
                        this.dtsResumoPecaPedidoCompra = busPedidoCompra.Consultar_Resumo_Peca_Pedido_Compra_Propriedade(this.objCodigoMercadocar.Peca_ID,
                                                                                                                         this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Fornecedor_ID"].ToInteger());
                        this.Cria_Colunas_Combo_Embalagem();
                        this.Cria_Colunas_Combo_Peca_Codigo_Fornecedor();

                        DataTable dttEmbalagemPeca = this.dtsResumoPecaPedidoCompra.Tables["Peca_Embalagem"];
                        this.cboEmbalagemCompra.DataSource = dttEmbalagemPeca;
                        this.cboEmbalagemCompra.Text = this.objCodigoMercadocar.Descricao_Embalagem;
                        this.txtCodigoItemFabricante.Text = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_CDFabricante"].ToString();
                        this.nudDescontoItem.Value = this.nudDescontoPedido.Value != 0 ? this.nudDescontoPedido.Value : 0;
                        this.nudICMSItem.Value = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_ICMS_Compra"].ToDecimal();
                        this.nudSubstituicaoItem.Value = this.nudSubstituicaoPedido.Value != 0 ? this.nudSubstituicaoPedido.Value : this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_ICMS_Substituicao_Tributaria"].ToDecimal();
                        this.lblMargemLucro.Text = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_Margem_Lucro"].ToString();
                        this.lblPrecoFabrica.Text = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Preco_Fabrica"].ToDecimal().ToString("R$ #,##0.00");
                        this.lblCustoReposicao.Text = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Custo_Reposicao"].ToDecimal().ToString("R$ #,##0.00");
                        this.lblUltimoCusto.Text = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Ultimo_Custo"].ToDecimal().ToString("R$ #,##0.00");
                        this.lblPrecoVenda.Text = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Preco_Venda"].ToDecimal().ToString("R$ #,##0.00");
                        this.lblQtdeMultiploCompra.Text = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_Qtde_Multipla_Compra"].ToString();
                        this.dgvPreDistribuicao.DataSource = this.dtsResumoPecaPedidoCompra.Tables["Pre_Distribuicao"];

                        this.chkDistribuirTotalmenteParaLojas.Checked = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_Estoque_Totalmente_Lojas"].DefaultBool();

                        this.Colorir_Checkbox();

                        this.Redimencionar_Data_Grid_Distribuicao();

                        blnSolitarPermissao = this.Verificar_Necessidade_De_Distribuicao_Peca_Inclusao();
                        DataTable dttPecaCodigoFornecedor = this.dtsResumoPecaPedidoCompra.Tables["Peca_Codigo_Fornecedor"];
                        this.Insere_Item_No_Data_Table_Peca_Codigo_Fornecedor(this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0], ref dttPecaCodigoFornecedor);
                        if (dttPecaCodigoFornecedor.Rows.Count > 0)
                        {
                            this.cboCodigoItemFornecedor.DataSource = dttPecaCodigoFornecedor;
                        }
                        this.cboCodigoItemFornecedor.SelectedValue = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_Codigo_Fornecedor_ID"];
                        this.Atualizar_Data_Table_Peca_Embalagem(this.objCodigoMercadocar.Peca_ID);
                        this.Atualizar_Data_Table_Peca_Codigo_Fornecedor(this.objCodigoMercadocar.Peca_ID);

                        this.Calcular_Valores_Detalhe_Peca(this.cboEmbalagemCompra.SelectedValue.ToInteger(), this.objCodigoMercadocar.Peca_ID, this.chkRemoverImpostosItens.Checked, false);

                        // Só puxar IPI se o fornecedor for Fabricante

                        if (this.blnFornecedorFabricante)
                        {
                            this.nudIPIItem.Value = this.nudIPIPedido.Value != 0 ? this.nudIPIPedido.Value : this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_Perc_IPI"].ToInteger();
                        }

                        // Se for SIMPLES, zerar todos os impostos
                        if (this.chkOptanteSimples.Checked)
                        {
                            this.nudIPIItem.Value = 0;
                            this.nudICMSItem.Value = 0;
                        }

                        if (!this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_Comprar"].ToBool())
                        {
                            MessageBox.Show("A Peça selecionada está marcada para não ser comprada!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        this.Habilitar_Desabilitar_Edicao_Distribuicao(blnSolitarPermissao);
                        this.Adicionar_Remover_Handler_Tab_Itens(true);
                    }
                    else if (!this.objGridBotaoItens.Botao_Propriedade_Incluir.Enabled &&
                          this.cboEmbalagemCompra.DataSource == null &&
                          this.objCodigoMercadocar.Codigo_Mercadocar != string.Empty &&
                          !this.blnAlterarItem)
                    {
                        MessageBox.Show("A Peça " + this.objCodigoMercadocar.Codigo_Mercadocar + " já está cadastrada para este Pedido.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        this.objGridBotaoItens.Botao_Propriedade_Desfazer.PerformClick();
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                this.objCodigoMercadocar.Carregar_Peca_ID += this.Carregar_Peca_ID_Cod_Mercadocar;
            }
        }

        private void Entrar_Tab_Page_Itens_Do_Pedido(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                if (!this.Valida_Pedido_De_Compra())
                {
                    return;
                }
                if (this.objGridBotaoItens.Botao_Propriedade_Confirmar.Enabled == false)
                {
                    this.Habilitar_Edicao_Item_Pedido(false);
                }
                this.Preencher_Propriedade();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Mudar_Selecao_Tab_Control(object sender, EventArgs e)
        {
            try
            {
                if (this.tbcHerdado.SelectedTab == this.tbpItensDoPedido)
                {
                    this.Setar_Imagens_Grid();
                    this.Preencher_Valor_Total_Pedido();
                    this.gpbPedido.Width = TAMANHO_GRID_PEDIDOS_ABA_ITENS;
                }
                else if (this.tbcHerdado.SelectedTab == this.tbpControlePedido)
                {
                    this.Habilitar_Desabilitar_Capa();
                    this.gpbPedido.Width = TAMANHO_GRID_PEDIDOS_ABA_GERAL;
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Pressionar_Tecla_Campos_Inteiros(Object sender, KeyPressEventArgs e)
        {
            try
            {
                Mercadocar.InfraEstrutura.Utilidades.DivUtil objUtil = new Mercadocar.InfraEstrutura.Utilidades.DivUtil();

                if ((Int16)objUtil.Permitir_Digitacao_Somente_Numeros(Convert.ToInt16(e.KeyChar)) == 0)
                {
                    e.Handled = true;
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            try
            {
                if (this.tbcHerdado.SelectedTab == this.tbpItensDoPedido & (!object.ReferenceEquals(Cursor.Current, Cursors.WaitCursor)))
                {
                    if (this.objGridBotaoItens.Tratar_Pressionar_Tecla(ref msg, keyData))
                    {
                        return true;
                    }
                }

                if (msg.WParam.ToInt32() == Convert.ToInt32(Keys.F4) & object.ReferenceEquals(this.ActiveControl, this.txtCodigoFornecedor))
                {
                    this.btnPesquisarFornecedor.PerformClick();
                    return true;
                }
                if (msg.WParam.ToInt32() == Convert.ToInt32(Keys.F4) & object.ReferenceEquals(this.ActiveControl, this.txtCodigoCondicaoPagamento))
                {
                    this.btnPesquisarCondicaoPagamento.PerformClick();
                    return true;
                }
                if (this.objGridBotaoItens.Tratar_Pressionar_Tecla(ref msg, keyData) & object.ReferenceEquals(this.ActiveControl, this.dgvPreDistribuicao))
                {
                    return true;
                }
                if (msg.WParam.ToInt32() == Convert.ToInt32(Keys.F10))
                {
                    this.btnPropriedadesFornecedor.PerformClick();
                    return true;
                }
                if (msg.WParam.ToInt32() == Convert.ToInt32(Keys.F2) & (!object.ReferenceEquals(Cursor.Current, Cursors.WaitCursor)))
                {
                    if (this.dgvPreDistribuicao.Rows.Count > 0)
                    {
                        this.Editar_Celula_dgvPreDistribuicao(this.dgvPreDistribuicao.CurrentCell.ColumnIndex);
                        return true;
                    }
                }

                return base.ProcessCmdKey(ref msg, keyData);
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
                return true;
            }
        }

        private void Clicar_Botao_Analise_Mercadologica_Custo(object sender, System.EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                if (this.objGridBotaoItens.DgvPadrao.SelectedRows.Count == 1)
                {
                    DataGridViewRow dgrItem = this.objGridBotaoItens.DgvPadrao.SelectedRows[0];

                    frmAnalise_Mercadologica_Propriedades frmAnaliseMercadologicaPropriedades = new frmAnalise_Mercadologica_Propriedades(
                                                                                                                                            0,
                                                                                                                                            dgrItem.Cells["Fabricante_CD"].Value.ToString(),
                                                                                                                                            dgrItem.Cells["Produto_CD"].Value.ToString(),
                                                                                                                                            dgrItem.Cells["Peca_CD"].Value.ToString(),
                                                                                                                                            dgrItem.Cells["Fabricante_NmFantasia"].Value.ToString(),
                                                                                                                                            dgrItem.Cells["Produto_DS"].Value.ToString(),
                                                                                                                                            dgrItem.Cells["Peca_DSTecnica"].Value.ToString(),
                                                                                                                                            dgrItem.Cells["Peca_CDFabricante"].Value.ToString());
                    frmAnaliseMercadologicaPropriedades.ShowDialog(this);
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Botao_Analise_Mercadologica_Estoque(object sender, System.EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                if (this.objGridBotaoItens.DgvPadrao.SelectedRows.Count == 1)
                {
                    DataGridViewRow dgrItem = this.objGridBotaoItens.DgvPadrao.SelectedRows[0];
                    frmAnalise_Mercadologica_Estoque_New frmAnaliseMercadologicaEstoqueNew = new frmAnalise_Mercadologica_Estoque_New(dgrItem.Cells["Fabricante_CD"].Value.ToString(),
                                                                                                                                         dgrItem.Cells["Produto_CD"].Value.ToString(),
                                                                                                                                         dgrItem.Cells["Peca_CD"].Value.ToString());
                    frmAnaliseMercadologicaEstoqueNew.ShowDialog(this);
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Botao_Split(object sender, System.EventArgs e)
        {
            try
            {
                ((SplitButton)sender).ShowContextMenuStrip();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Menu_Historico_Movimentacao(object sender, EventArgs e)
        {
            try
            {
                if (this.objGridBotaoItens.DgvPadrao.SelectedRows.Count == 1)
                {
                    DataGridViewRow dgrItem = this.objGridBotaoItens.DgvPadrao.SelectedRows[0];
                    frmAnalise_Mercadologica_Movimentacao_Diaria frmHistorico = new frmAnalise_Mercadologica_Movimentacao_Diaria(dgrItem.Cells["Peca_ID"].Value.ToInteger(), ((LojasDO)Root.Loja_Ativa_NEW).ID);
                    frmHistorico.ShowDialog(this);
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Menu_Historico_Pedido_Compra(object sender, System.EventArgs e)
        {
            try
            {
                if (this.objGridBotaoItens.DgvPadrao.SelectedRows.Count == 1)
                {
                    DataGridViewRow dgrItem = this.objGridBotaoItens.DgvPadrao.SelectedRows[0];
                    frmPedido_Compra_Historico frmHistorico = new frmPedido_Compra_Historico(dgrItem.Cells["Peca_ID"].Value.ToInteger());
                    frmHistorico.ShowDialog(this);
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Perder_Foco_Campo_Codigo_Condicao_Pagamento(object sender, EventArgs e)
        {
            try
            {
                if (this.txtCodigoCondicaoPagamento.Text.IsNullOrEmpty())
                {
                    return;
                }

                ((TextBox)sender).Text = ((TextBox)sender).Text.Trim().PadLeft(4, Convert.ToChar("0"));

                this.Consultar_Condicao_Pagamento_Por_Codigo();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Sair_TextBox_Codigo_Fornecedor(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                if (
                    ((TextBox)sender).ReadOnly
                    || this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Forn_CD"].ToString().Equals(((TextBox)sender).Text))
                {
                    return;
                }

                if (((TextBox)sender).Text.Trim() != string.Empty)
                {
                    ((TextBox)sender).Text = ((TextBox)sender).Text.Trim().PadLeft(4, '0');
                    this.btnPropriedadesFornecedor.Enabled = this.blnPermissaoPropriedadesFornecedor;
                }
                else
                {
                    this.txtCodigoFornecedor.Text = string.Empty;
                    this.lblNomeFantasia.Text = string.Empty;
                    this.btnPropriedadesFornecedor.Enabled = false;
                    return;
                }

                this.Alterar_Codigo_Fornecedor(sender, e);
                this.Preencher_Data_Table_Fornecedor(sender);
                this.Aplicar_Alteracoes_Capa_Para_Itens(sender);
                this.Validar_Exibicao_Botao_Listagem_Garantia();

                this.objGridBotaoItens.DgvPadrao.Refresh();

                this.Atualizar_Valores_Itens_E_Totais();
                this.Preencher_Campos_Itens();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Sair_TextBox_Codigo_Encomenda(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                if (
                    ((TextBox)sender).ReadOnly
                    || this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Encomenda_Venda_CT_ID"].ToString().Equals(((TextBox)sender).Text))
                {
                    return;
                }

                if (((TextBox)sender).Text.Trim() != string.Empty)
                {
                    int intEncomenda = this.txtEncomenda.Text.DefaultInteger();
                    this.txtEncomenda.Text = string.Empty;
                    this.Carregar_Encomenda(intEncomenda);
                }
                else
                {
                    this.Limpar_Dados_Encomenda();
                    return;
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Tratar_Botao_Aplicar(object sender, EventArgs e)
        {
            try
            {
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Tratar_Botao_Aplicar_Excluir_Item(object sender, EventArgs e)
        {
            try
            {
                if (this.objGridBotaoItens.DgvPadrao.RowCount == 0)
                {
                    return;
                }

                if (this.Verificar_Excluir_Alterar())
                {
                    MessageBox.Show("Não é possível excluir um item já lançado no pré-recebimento.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else if (!this.Verificar_Excluir_Quantidade_Recebida())
                {
                    MessageBox.Show("Não é possível excluir a peça, pois a mesma já teve a quantidade recebida. Desfaça o processamento da nota fiscal para poder excluir esta peça.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    if (MessageBox.Show("Confirma a exclusão do registro?", this.Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        DataRow dtrDeletar = ((DataRowView)this.objGridBotaoItens.DgvPadrao.CurrentRow.DataBoundItem).Row;
                        dtrDeletar.Delete();
                    }
                    // Quando no último registro, mover para o penultimo
                    if (this.objGridBotaoItens.DgvPadrao.Rows.Count > 0)
                    {
                        if (this.objGridBotaoItens.DgvPadrao.Rows.Count == (this.objGridBotaoItens.DgvPadrao.CurrentRow.Index + 1) && this.objGridBotaoItens.DgvPadrao.Rows.Count > 0)
                        {
                            DivUtil.Mudar_Focus_DataGridView(this.objGridBotaoItens.DgvPadrao, this.objGridBotaoItens.DgvPadrao.CurrentRow.Index);
                        }
                    }
                    else
                    {
                        this.Limpar_Campos_Itens();
                        this.Preencher_Valor_Total_Pedido();
                    }
                }
                this.blnIncluirItem = false;
                this.blnAlterarItem = false;
                this.Habilitar_Edicao_Item_Pedido(false);
                this.Setar_Imagens_Grid();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Celula_Iniciar_Edicao_dgvPreDistribuicao(object sender, EventArgs e)
        {
            try
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);

                if (this.blnIncluirItem == false && this.blnAlterarItem == false)
                {
                    this.dgvPreDistribuicao.ReadOnly = true;
                    this.Habilitar_Desabilitar_Edicao_Distribuicao(true);
                    return;
                }

                DataRow dtrPeca = ((DataRowView)this.dgvPreDistribuicao.CurrentRow.DataBoundItem).Row;
                int intValorCelula = 0;

                if (dtrPeca != null &&
                   int.TryParse(dtrPeca[this.dgvPreDistribuicao.Columns[this.dgvPreDistribuicao.CurrentCell.ColumnIndex].Name].ToString(), out intValorCelula))
                {
                    this.dgvPreDistribuicao.CurrentCell.Value = intValorCelula.ToString();
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);
                this.Adicionar_Remover_Handler_Grid_Distribuicao(true);
                this.Adicionar_Remover_Handler_Tab_Itens(true);
            }
        }

        private void Celula_Validar_Edicao_dgvPreDistribuicao(object sender, DataGridViewCellValidatingEventArgs e)
        {
            try
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);

                if ((this.dgvPreDistribuicao.Columns[e.ColumnIndex].Name != "Pre_Distribuicao_Qtde") || e.FormattedValue.ToString() == string.Empty)
                {
                    if (e.FormattedValue.ToString() == string.Empty)
                    {
                        if (this.dgvPreDistribuicao.CurrentCell.Value == System.DBNull.Value)
                        {
                            this.dgvPreDistribuicao.CurrentCell.Value = 0;
                        }
                        this.dgvPreDistribuicao.Rows[e.RowIndex].Cells["Pre_Distribuicao_Qtde"].Value = 0;
                        this.dgvPreDistribuicao.Refresh();
                    }
                    this.dgvPreDistribuicao.Invalidate();
                    return;
                }
                else if (this.dgvPreDistribuicao.Columns[e.ColumnIndex].ReadOnly)
                {
                    this.dgvPreDistribuicao.Invalidate();
                    return;
                }

                int intValorAnterior = this.dgvPreDistribuicao.Rows[e.RowIndex].Cells["Pre_Distribuicao_Qtde"].Value.ToString() == string.Empty ? 0 : Convert.ToInt32(this.dgvPreDistribuicao.Rows[e.RowIndex].Cells["Pre_Distribuicao_Qtde"].Value);

                int intValorAtual = 0;
                string strDadoFormatado = e.FormattedValue.ToString().Replace(".", string.Empty);
                if (!int.TryParse(strDadoFormatado, out intValorAtual) && this.dgvPreDistribuicao.EditingControl != null)
                {
                    MessageBox.Show("Valor digitado não permitido. Favor ajustar.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    e.Cancel = true;
                    return;
                }

                if (intValorAnterior != 0 || intValorAtual != 0)
                {
                    if (this.Validar_Pre_Distribuicao(intValorAnterior, intValorAtual, true) == false)
                    {
                        e.Cancel = true;
                    }
                    else
                    {
                        this.dgvPreDistribuicao.Invalidate();
                    }
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);
                this.Adicionar_Remover_Handler_Grid_Distribuicao(true);
                this.Adicionar_Remover_Handler_Tab_Itens(true);
            }
        }

        private void Celula_Finalizar_Edicao_dgvPreDistribuicao(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);

                this.dgvPreDistribuicao.CurrentCell.ReadOnly = true;
                if (this.dgvPreDistribuicao.CurrentCell.Value == System.DBNull.Value)
                {
                    this.dgvPreDistribuicao.CurrentCell.Value = 0;
                }

                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);

                this.Adicionar_Remover_Handler_Grid_Distribuicao(true);
                this.Adicionar_Remover_Handler_Tab_Itens(true);

            }
        }

        private void Clicar_Celula_dgvPreDistribuicao(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);

                if (this.blnAlterarItem == false && this.blnIncluirItem == false)
                {
                    this.dgvPreDistribuicao.Columns[e.ColumnIndex].ReadOnly = true;
                    return;
                }

                if (this.dgvPreDistribuicao.Columns[e.ColumnIndex].Name != "Pre_Distribuicao_Qtde")
                {
                    this.dgvPreDistribuicao.Columns[e.ColumnIndex].ReadOnly = true;
                    return;
                }

                if (this.dgvPreDistribuicao.Columns[e.ColumnIndex].Name == "Pre_Distribuicao_Qtde")
                {
                    this.Editar_Celula_dgvPreDistribuicao(e.ColumnIndex);
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);

                this.Adicionar_Remover_Handler_Grid_Distribuicao(true);
                this.Adicionar_Remover_Handler_Tab_Itens(true);
            }
        }

        private void Mudar_Selecao_Tipo_Pesquisa_Objeto_Codigo_Mercado_Car(object sender, EventArgs e)
        {
            try
            {
                if (this.objCodigoMercadocar.cboTipoPesquisa.Text == "Nº Original")
                {
                    this.objCodigoMercadocar.Text_CodigoBarrasEOriginal.Enabled = false;
                }
                else
                {
                    this.objCodigoMercadocar.Text_CodigoBarrasEOriginal.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Pressionar_Tecla_Grid(object sender, KeyEventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);

                switch (e.KeyCode)
                {
                    case Keys.Enter:
                        e.Handled = true;
                        break;
                }
                return;
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);

                this.Adicionar_Remover_Handler_Grid_Distribuicao(true);
                this.Adicionar_Remover_Handler_Tab_Itens(true);
            }
        }

        private void Pressionar_Tecla_Permitindo_Apenas_Decimais(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (sender == this.dgvPreDistribuicao && this.dgvPreDistribuicao.ReadOnly)
                {
                    return;
                }
                else
                {
                    DivUtil objUtil = new DivUtil();

                    if ((Int16)objUtil.Permitir_Digitacao_Somente_Valores(Convert.ToInt16(e.KeyChar)) == 0)
                    {
                        e.Handled = true;
                    }
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Auditoria(System.Object sender, System.EventArgs obje)
        {
            try
            {
                frmAuditoria_Propriedades frmAuditoria = new frmAuditoria_Propriedades("Histórico de Alterações da Capa do Pedido");

                frmAuditoria.Grid.Adicionar_Coluna("Acao", "Ação", 80, false, Enumerados.Tipo_Coluna.Texto);
                frmAuditoria.Grid.Adicionar_Coluna("Data_Ultima_Alteracao", "Ultima Alteração", 100, false, Enumerados.Tipo_Coluna.Data_Tempo);
                frmAuditoria.Grid.Adicionar_Coluna("Usuario_Ultima_Alteracao", "Usuário Alteração", 200, false, Enumerados.Tipo_Coluna.Texto);
                frmAuditoria.Grid.Adicionar_Coluna("Status", "Status", 130, false, Enumerados.Tipo_Coluna.Texto);
                frmAuditoria.Grid.Adicionar_Coluna("PessoaJuridica_NmFantasia", "Fornecedor", 200, false, Enumerados.Tipo_Coluna.Texto);
                frmAuditoria.Grid.Adicionar_Coluna("Loja_NM_Faturamento", "Loja Faturamento", 173, false, Enumerados.Tipo_Coluna.Texto);
                frmAuditoria.Grid.Adicionar_Coluna("Lojas_NM_Destino", "Loja Destino", 173, false, Enumerados.Tipo_Coluna.Texto, false);
                frmAuditoria.Grid.Adicionar_Coluna("Usuario_Nome_Completo", "Comprador", 200, false, Enumerados.Tipo_Coluna.Texto, false);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_CT_Vendedor", "Vendedor", 120, false, Enumerados.Tipo_Coluna.Texto, false);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_CT_Desconto", "Desconto", 60, false, Enumerados.Tipo_Coluna.Decimal, false);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_CT_Substituicao", "Substituição", 70, false, Enumerados.Tipo_Coluna.Decimal, false);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_CT_IPI", "IPI", 60, false, Enumerados.Tipo_Coluna.Decimal);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_CT_Remover_Impostos", "Remover Imposto", 100, false, Enumerados.Tipo_Coluna.CheckBox, false);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_CT_Data_Prevista", "Data Prevista", 100, false, Enumerados.Tipo_Coluna.Data, false);
                frmAuditoria.Grid.Adicionar_Coluna("Condicao_Pagamento_CT_DS", "Condição de Pagamento", 150, false, Enumerados.Tipo_Coluna.Texto, false);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_CT_Obs", "Observação", 300, false, Enumerados.Tipo_Coluna.Texto, false);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_CT_Cobranca_Fornecedor", "Cobrança Fornecedor", 300, false, Enumerados.Tipo_Coluna.Texto, false);

                Pedido_CompraBUS busPedidoCompra = new Pedido_CompraBUS();

                DataTable dttAuditoria = busPedidoCompra.Consultar_DataTable_Auditoria_Capa_Pedido_Compra(this.intPedidoCompraCTID);

                frmAuditoria.Carregar_Grid(dttAuditoria);
                frmAuditoria.Show(this);
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Auditoria_Item_Selecionado(System.Object sender, System.EventArgs e)
        {
            try
            {
                frmAuditoria_Propriedades frmAuditoria = new frmAuditoria_Propriedades("Histórico de Itens do Pedido");

                frmAuditoria.Grid.Adicionar_Coluna("Acao", "Ação", 80, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleLeft);
                frmAuditoria.Grid.Adicionar_Coluna("Data_Ultima_Alteracao", "Ultima Alteração", 100, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleLeft);
                frmAuditoria.Grid.Adicionar_Coluna("Usuario_Ultima_Alteracao", "Usuário Alteração", 200, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleLeft);
                frmAuditoria.Grid.Adicionar_Coluna("Codigo_Mercadocar", "Item", 100, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleLeft);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_IT_Quantidade", "Qtde.", 60, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmAuditoria.Grid.Adicionar_Coluna("Peca_Embalagem_Descricao", "Embalagem", 125, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleLeft);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_IT_Custo_Compra", "Preço", 80, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_IT_Desconto", "Desconto", 60, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_IT_ICMS", "ICMS", 60, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_IT_Substituicao", "Substituição", 70, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_IT_Imposto", "IPI", 60, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_IT_Remover_Impostos", "Remover Impostos", 120, false, Enumerados.Tipo_Coluna.CheckBox, false);

                Pedido_CompraBUS busPedidoCompra = new Pedido_CompraBUS();
                DataGridViewRow dgrItem = this.objGridBotaoItens.DgvPadrao.SelectedRows[0];
                DataTable dttAuditoria = busPedidoCompra.Consultar_DataTable_Auditoria_Pedido_Compra_Item(this.intPedidoCompraCTID, dgrItem.Cells["Peca_ID"].Value.ToInteger(), false);

                frmAuditoria.Carregar_Grid(dttAuditoria);
                frmAuditoria.Show(this);
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Auditoria_Itens_Excluidos(System.Object sender, System.EventArgs e)
        {
            try
            {
                frmAuditoria_Propriedades frmAuditoria = new frmAuditoria_Propriedades("Histórico de Itens Excluídos do Pedido");

                frmAuditoria.Grid.Adicionar_Coluna("Acao", "Ação", 80, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleLeft);
                frmAuditoria.Grid.Adicionar_Coluna("Data_Ultima_Alteracao", "Ultima Alteração", 100, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleLeft);
                frmAuditoria.Grid.Adicionar_Coluna("Usuario_Ultima_Alteracao", "Usuário Alteração", 200, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleLeft);
                frmAuditoria.Grid.Adicionar_Coluna("Codigo_Mercadocar", "Item", 100, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleLeft);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_IT_Quantidade", "Qtde.", 60, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmAuditoria.Grid.Adicionar_Coluna("Peca_Embalagem_Descricao", "Embalagem", 125, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleLeft);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_IT_Custo_Compra", "Preço", 80, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_IT_Desconto", "Desconto", 60, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_IT_ICMS", "ICMS", 60, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_IT_Substituicao", "Substituição", 70, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_IT_Imposto", "IPI", 60, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmAuditoria.Grid.Adicionar_Coluna("Pedido_Compra_IT_Remover_Impostos", "Remover Impostos", 120, false, Enumerados.Tipo_Coluna.CheckBox, false);

                Pedido_CompraBUS busPedidoCompra = new Pedido_CompraBUS();
                DataTable dttAuditoria = busPedidoCompra.Consultar_DataTable_Auditoria_Pedido_Compra_Item(this.intPedidoCompraCTID, 0, true);

                frmAuditoria.Carregar_Grid(dttAuditoria);
                frmAuditoria.Show(this);
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Checkbox_Distribuir_Para_Lojas(System.Object sender, System.EventArgs e)
        {
            try
            {
                this.Colorir_Checkbox();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        #endregion

        #region "   Métodos Privados   "

        private void Carregar_Encomenda(int intEncomendaID)
        {
            try
            {
                frmPesquisaGrid frmPesquisa = new frmPesquisaGrid("Encomendas", "Pesquisa de Encomendas");
                frmPesquisa.Grid.Adicionar_Coluna("Encomenda_Venda_CT_ID", "Encomenda", 100, false, Enumerados.Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmPesquisa.Grid.Adicionar_Coluna("Fornecedor_Nome", "Fornecedor", 50, true);
                frmPesquisa.Grid.Adicionar_Coluna_Data_Tempo("Data_Geracao", "Data", 100, false);
                frmPesquisa.Grid.Adicionar_Coluna_Data_Tempo("Status_Compra_Nm", "Status", 80, false);

                Encomenda_VendaBUS busEncomenda = new Encomenda_VendaBUS();
                frmPesquisa.Carregar_Grid(busEncomenda.Consultar_DataTable_Encomenda_Venda_Grid(this.cboLojaDestino.SelectedValue.DefaultInteger(),
                                                                                                Enumerados.Filtro_Tipo_Exibicao.Por_Romaneio,
                                                                                                intEncomendaID,
                                                                                                0,
                                                                                                this.Retornar_DataTable_Status_Compra_Encomenda_Pendente_Recebimento(),
                                                                                                this.Retornar_DataTable_Status_Venda_Encomenda(),
                                                                                                0,
                                                                                                string.Empty,
                                                                                                this.txtCodigoFornecedor.Text,
                                                                                                new DateTime(1900, 1, 1),
                                                                                                new DateTime(1900, 1, 1),
                                                                                                0,
                                                                                                0,
                                                                                                0));

                if (frmPesquisa.ShowDialog() == DialogResult.OK)
                {
                    this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Encomenda_Venda_CT_ID"] = frmPesquisa.Registro.Cells["Encomenda_Venda_CT_ID"].Value.DefaultInteger();
                    this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Encomenda_Venda_CT_Lojas_ID"] = this.cboLojaDestino.SelectedValue.DefaultInteger();
                    this.txtEncomenda.Text = Convert.ToString(frmPesquisa.Registro.Cells["Encomenda_Venda_CT_ID"].Value);
                }
                else
                {
                    this.Limpar_Dados_Encomenda();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private DataTable Retornar_DataTable_Status_Compra_Encomenda_Pendente_Recebimento()
        {
            try
            {
                DataTable dttRetorno = new DataTable();
                dttRetorno.Columns.Add("Valor", typeof(int));
                dttRetorno.Rows.Add(Enumerados.Status_Compra_Encomenda.Pendente_Recebimento);
                dttRetorno.Rows.Add(Enumerados.Status_Compra_Encomenda.Recebimento_Parcial);

                return dttRetorno;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private DataTable Retornar_DataTable_Status_Venda_Encomenda()
        {
            try
            {
                DataTable dttRetorno = new DataTable();
                dttRetorno.Columns.Add("Valor", typeof(int));
                dttRetorno.Rows.Add(Enumerados.Status_Venda_Encomenda.Cancelado);
                dttRetorno.Rows.Add(Enumerados.Status_Venda_Encomenda.Pago);
                dttRetorno.Rows.Add(Enumerados.Status_Venda_Encomenda.Pendente_Pagamento);
                dttRetorno.Rows.Add(Enumerados.Status_Venda_Encomenda.Pendente_Romaneio);
                dttRetorno.Rows.Add(Enumerados.Status_Venda_Encomenda.Retirado);

                return dttRetorno;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Limpar_Dados_Encomenda()
        {
            try
            {
                this.txtEncomenda.Text = string.Empty;
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Encomenda_Venda_CT_ID"] = 0;
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Encomenda_Venda_CT_Lojas_ID"] = 0;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Preencher_Data_Table_Fornecedor(object sender)
        {
            try
            {
                if (this.dtsPropriedadesOriginal != null)
                {
                    if (this.intPedidoCompraCTID != 0 && this.txtCodigoFornecedor.Text == this.dtsPropriedadesOriginal.Tables["Pedido_Compra_CT"].Rows[0]["Forn_CD"].ToString())
                    {
                        this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Fornecedor_ID"] = this.dtsPropriedadesOriginal.Tables["Pedido_Compra_CT"].Rows[0]["Fornecedor_ID"];
                        this.txtCodigoFornecedor.Text = this.dtsPropriedadesOriginal.Tables["Pedido_Compra_CT"].Rows[0]["Forn_CD"].ToString();
                        this.lblNomeFantasia.Text = this.dtsPropriedadesOriginal.Tables["Pedido_Compra_CT"].Rows[0]["PessoaJuridica_NmFantasia"].ToString();
                        this.txtCodigoCondicaoPagamento.Text = this.dtsPropriedadesOriginal.Tables["Pedido_Compra_CT"].Rows[0]["Condicao_Pagamento_CT_CD"].ToString();
                        this.chkOptanteSimples.Checked = this.dtsPropriedadesOriginal.Tables["Pedido_Compra_CT"].Rows[0]["Forn_IsOptanteSimples"].ToBool();
                        this.Consultar_Condicao_Pagamento_Por_Codigo();
                        this.lblTipo_Descricao.Text = this.Concatenar_Tipos_Fornecedor(this.dtsPropriedadesOriginal.Tables["Fornecedor_Tipo"]);
                        this.Validar_Tipo_Fornecedor();
                        return;
                    }
                }
                FornecedorBUS busFornecedor = new FornecedorBUS();
                DataSet dtsFornecedor = busFornecedor.Consultar_Fornecedor_Para_Pedido_Compra(this.txtCodigoFornecedor.Text);

                if (dtsFornecedor.Tables["Fornecedor"].Rows.Count == 0)
                {
                    this.Tratar_Campo_Invalido((TextBox)sender, "Código inválido.", "Código do Fornecedor");
                    this.txtCodigoFornecedor.Text = string.Empty;
                    this.lblNomeFantasia.Text = string.Empty;
                    this.lblQtdePecasPendenteFornecedor.Text = string.Empty;
                    this.lblValorTotalPendenteFornecedor.Text = string.Empty;
                    this.lblQtdePecasRecusadasFornecedor.Text = string.Empty;
                    this.lblValorTotalRecusadasFornecedor.Text = string.Empty;
                    this.blnFornecedorTipoFabricante = false;
                    return;
                }
                else
                {
                    this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Fornecedor_ID"] = dtsFornecedor.Tables["Fornecedor"].Rows[0]["Forn_ID"].ToInteger();
                    this.txtCodigoFornecedor.Text = dtsFornecedor.Tables["Fornecedor"].Rows[0]["Forn_CD"].ToString();
                    this.lblNomeFantasia.Text = dtsFornecedor.Tables["Fornecedor"].Rows[0]["PessoaJuridica_NmFantasia"].ToString();

                    if (this.blnRecebidoDataSet == false || (this.blnRecebidoDataSet == true && this.txtCodigoCondicaoPagamento.Text == string.Empty))
                    {
                        this.txtCodigoCondicaoPagamento.Text = dtsFornecedor.Tables["Fornecedor"].Rows[0]["Condicao_Pagamento_CT_CD"].ToString();
                    }

                    this.chkOptanteSimples.Checked = dtsFornecedor.Tables["Fornecedor"].Rows[0]["Forn_IsOptanteSimples"].ToBool();
                    this.Consultar_Condicao_Pagamento_Por_Codigo();
                    this.lblTipo_Descricao.Text = this.Concatenar_Tipos_Fornecedor(dtsFornecedor.Tables["Fornecedor_Tipo"]);

                    if (this.lblTipo_Descricao.Text.Contains("Fabricante"))
                    {
                        this.blnFornecedorTipoFabricante = true;
                    }
                    else
                    {
                        this.blnFornecedorTipoFabricante = false;
                    }

                    this.Validar_Tipo_Fornecedor();
                    if (dtsFornecedor.Tables["Garantias_Fornecedor"].Rows.Count > 0)
                    {
                        this.lblQtdePecasPendenteFornecedor.Text = dtsFornecedor.Tables["Garantias_Fornecedor"].Rows[0]["Qtde_Pecas_Pendente_Fornecedor"].ToInteger().ToString("#,##0");
                        this.lblValorTotalPendenteFornecedor.Text = dtsFornecedor.Tables["Garantias_Fornecedor"].Rows[0]["Valor_Total_Pendente_Fornecedor"].ToDecimal().ToString("R$ #,##0.00");
                        this.lblQtdePecasRecusadasFornecedor.Text = dtsFornecedor.Tables["Garantias_Fornecedor"].Rows[0]["Qtde_Pecas_Recusadas_Fornecedor"].ToInteger().ToString("#,##0");
                        this.lblValorTotalRecusadasFornecedor.Text = dtsFornecedor.Tables["Garantias_Fornecedor"].Rows[0]["Valor_Total_Recusadas_Fornecedor"].ToDecimal().ToString("R$ #,##0.00");
                    }
                    else
                    {
                        this.lblQtdePecasPendenteFornecedor.Text = "0";
                        this.lblValorTotalPendenteFornecedor.Text = "R$ 0.00";
                        this.lblQtdePecasRecusadasFornecedor.Text = "0";
                        this.lblValorTotalRecusadasFornecedor.Text = "R$ 0.00";
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Verificar_Necessidade_De_Distribuicao_Peca_Inclusao()
        {
            try
            {
                if (this.blnAlterarItem == true)
                {
                    return this.objGridBotaoItens.DgvPadrao.SelectedRows[0].Cells["Solicitar_Distribuicao"].Value.ToInteger() == 0;
                }

                if (this.dtsResumoPecaPedidoCompra != null && this.blnIncluirItem == true)
                {
                    return this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Solicitar_Distribuicao"].ToInteger() == 0;
                }

                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Habilitar_Desabilitar_Edicao_Distribuicao(bool blnStatus)
        {
            try
            {
                if (this.blnPedidoEmInclusao || this.blnIncluirItem)
                {
                    if (!this.blnPermissaoDistribuicao)
                    {
                        blnStatus = true;
                    }
                }
                else if (this.blnPedidoEmEdicao)
                {
                    if (!this.blnPermissaoRedistribuicao)
                    {
                        blnStatus = true;
                    }
                }
                this.dgvPreDistribuicao.ReadOnly = blnStatus;
                this.dgvPreDistribuicao.Columns["Lojas_NM"].ReadOnly = true;
                this.dgvPreDistribuicao.Columns["Pre_Distribuicao_Qtde"].ReadOnly = blnStatus;
                this.dgvPreDistribuicao.Columns["Pre_Distribuicao_Qtde"].Frozen = blnStatus;

            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Verificar_Excluir_Alterar()
        {
            try
            {
                if (this.objGridBotaoItens.DgvPadrao.SelectedRows[0].Cells["QTDE_Itens_No_Pre_Recebimento"].Value.ToInteger() == 0)
                {
                    return false;
                }
                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Verificar_Excluir_Quantidade_Recebida()
        {
            try
            {
                if (this.objGridBotaoItens.DgvPadrao.SelectedRows[0].Cells["Quantidade_Recebida"].Value.ToInteger() > 0)
                {
                    return false;
                }
                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Carregar_Fornecedor_Por_Paramentro()
        {
            try
            {
                if (this.strFornCD != string.Empty)
                {
                    this.txtCodigoFornecedor.Text = this.strFornCD;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Carregar_Item_Alteracao_Por_Paramentro()
        {
            try
            {
                if (this.intPedidoCompraITID != 0)
                {
                    foreach (DataGridViewRow objItem in this.objGridBotaoItens.DgvPadrao.Rows)
                    {
                        if (Convert.ToInt32(objItem.Cells["Pedido_Compra_IT_ID"].Value) == this.intPedidoCompraITID)
                        {
                            objItem.Selected = true;
                            objItem.Cells[0].Selected = true;
                            break;
                        }
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Atualiza_DataSet()
        {
            try
            {
                this.objGridBotaoItens.Carregar_Grid(this.dtsPropriedades.Tables["Pedido_Compra_IT"]);
                this.objGridBotaoItens.Refresh();
                this.dtsPropriedadesOriginal = this.dtsPropriedades.Copy();
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Editar_Celula_dgvPreDistribuicao(int intCurrentColumnIndex)
        {
            try
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);

                if (this.blnPedidoEmInclusao || this.blnIncluirItem)
                {
                    if (!this.blnPermissaoDistribuicao)
                    {
                        return;
                    }
                }
                else if (this.blnPedidoEmEdicao)
                {
                    if (!this.blnPermissaoRedistribuicao)
                    {
                        return;
                    }
                }
                if (this.intPedidoCompraCTID != 0 && !this.blnIncluirItem && !this.blnAlterarItem)
                {
                    this.dgvPreDistribuicao.EndEdit();
                    return;
                }

                this.dgvPreDistribuicao.ReadOnly = false;

                if (this.dgvPreDistribuicao.Columns[intCurrentColumnIndex].Name == "Lojas_NM")
                {
                    this.dgvPreDistribuicao.CurrentRow.Cells["Pre_Distribuicao_Qtde"].Selected = true;
                    intCurrentColumnIndex += 1;
                }

                if (this.dgvPreDistribuicao.Rows.Count > 0 && this.Validar_Quantidade_Informada() && (this.dgvPreDistribuicao.Columns[intCurrentColumnIndex].Name == "Pre_Distribuicao_Qtde"))
                {
                    this.dgvPreDistribuicao.CurrentRow.Cells[intCurrentColumnIndex].Selected = true;
                    this.dgvPreDistribuicao.ReadOnly = false;
                    this.dgvPreDistribuicao.CurrentCell.ReadOnly = false;
                    this.dgvPreDistribuicao.BeginEdit(true);
                    this.dgvPreDistribuicao.EditingControl.KeyPress += this.Pressionar_Tecla_Permitindo_Apenas_Decimais;
                    this.dgvPreDistribuicao.Invalidate();
                    return;
                }
                else if (this.dgvPreDistribuicao.CurrentCell != null)
                {
                    this.dgvPreDistribuicao.CurrentCell.ReadOnly = true;
                    this.dgvPreDistribuicao.BeginEdit(false);
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);
                this.Adicionar_Remover_Handler_Grid_Distribuicao(true);
                this.Adicionar_Remover_Handler_Tab_Itens(true);
            }
        }

        private void Adicionar_Remover_Handler_Tab_Geral(bool blnAdicionar)
        {
            try
            {
                if (blnAdicionar)
                {
                    this.cboLojaFaturamento.SelectedValueChanged += this.Alterar_cboLojaFaturamento;
                    this.cboLojaDestino.SelectedValueChanged += this.Alterar_cboLojaDestino;
                    this.cboComprador.SelectedValueChanged += this.Alterar_cboComprador;
                    this.txtVendedor.TextChanged += this.Alterar_txtVendedor;
                    this.nudDescontoPedido.ValueChanged += this.Alterar_nudDescontoPedido;
                    this.nudSubstituicaoPedido.ValueChanged += this.Alterar_nudSubstituicaoPedido;
                    this.nudIPIPedido.ValueChanged += this.Alterar_nudIPIPedido;
                    this.chkRemoverImpostos.CheckedChanged += this.Alterar_chkRemoverImpostos;
                    this.dtpDataPrevista.ValueChanged += this.Alterar_dtpDataPrevista;
                    this.txtObservacoes.TextChanged += this.Alterar_txtObservacoes;
                    this.txtCobrancaFornecedor.TextChanged += this.Alterar_txtCobrancaFornecedor;
                    this.txtCodigoCondicaoPagamento.TextChanged += this.Alterar_txtCodigoCondicaoPagamento;
                }
                else
                {
                    this.cboLojaFaturamento.SelectedValueChanged -= this.Alterar_cboLojaFaturamento;
                    this.cboLojaDestino.SelectedValueChanged -= this.Alterar_cboLojaDestino;
                    this.cboComprador.SelectedValueChanged -= this.Alterar_cboComprador;
                    this.txtVendedor.TextChanged -= this.Alterar_txtVendedor;
                    this.nudDescontoPedido.ValueChanged -= this.Alterar_nudDescontoPedido;
                    this.nudSubstituicaoPedido.ValueChanged -= this.Alterar_nudSubstituicaoPedido;
                    this.nudIPIPedido.ValueChanged -= this.Alterar_nudIPIPedido;
                    this.chkRemoverImpostos.CheckedChanged -= this.Alterar_chkRemoverImpostos;
                    this.dtpDataPrevista.ValueChanged -= this.Alterar_dtpDataPrevista;
                    this.txtObservacoes.TextChanged -= this.Alterar_txtObservacoes;
                    this.txtCobrancaFornecedor.TextChanged -= this.Alterar_txtCobrancaFornecedor;
                    this.txtCodigoCondicaoPagamento.TextChanged -= this.Alterar_txtCodigoCondicaoPagamento;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Adicionar_Remover_Handler_Tab_Itens(bool blnAdicionar)
        {
            try
            {
                if (blnAdicionar)
                {
                    this.nudQtdeItem.LostFocus += this.Perder_Foco_nudQtdeItem;
                    this.nudQtdeItem.ValueChanged += this.Alterar_Detalhes_Item;
                    this.cboEmbalagemCompra.SelectedValueChanged += this.Alterar_Detalhes_Item;
                    this.nudPrecoEmbalagem.ValueChanged += this.Alterar_Detalhes_Item;
                    this.nudDescontoItem.ValueChanged += this.Alterar_Detalhes_Item;
                    this.nudICMSItem.ValueChanged += this.Alterar_Detalhes_Item;
                    this.nudSubstituicaoItem.ValueChanged += this.Alterar_Detalhes_Item;
                    this.nudIPIItem.ValueChanged += this.Alterar_Detalhes_Item;
                    this.chkRemoverImpostosItens.CheckedChanged += this.Alterar_Detalhes_Item;
                }
                else
                {
                    this.nudQtdeItem.LostFocus -= this.Perder_Foco_nudQtdeItem;
                    this.nudQtdeItem.ValueChanged -= this.Alterar_Detalhes_Item;
                    this.cboEmbalagemCompra.SelectedValueChanged -= this.Alterar_Detalhes_Item;
                    this.nudPrecoEmbalagem.ValueChanged -= this.Alterar_Detalhes_Item;
                    this.nudDescontoItem.ValueChanged -= this.Alterar_Detalhes_Item;
                    this.nudICMSItem.ValueChanged -= this.Alterar_Detalhes_Item;
                    this.nudSubstituicaoItem.ValueChanged -= this.Alterar_Detalhes_Item;
                    this.nudIPIItem.ValueChanged -= this.Alterar_Detalhes_Item;
                    this.chkRemoverImpostosItens.CheckedChanged -= this.Alterar_Detalhes_Item;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Adicionar_Colunas_MC_Grid_Buttons_Item()
        {
            try
            {
                this.objGridBotaoItens.DgvPadrao.AutoGenerateColumns = false;
                this.objGridBotaoItens.DgvPadrao.AllowUserToResizeColumns = true;

                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_Sequencia", "Seq.", 30, false, Enumerados.Tipo_Coluna.Inteiro, false);
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Cod_Mercadocar", "Item", 87, false, Enumerados.Tipo_Coluna.Texto, false);
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Peca_CdFabricante", "Cód. Item Fab.", 107, false, Enumerados.Tipo_Coluna.Texto, false);
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_Quantidade", "Qtde. Ped.", 83, false, Enumerados.Tipo_Coluna.Inteiro, false);
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Peca_Embalagem_Descricao", "Embalagem", 60, false, Enumerados.Tipo_Coluna.Texto, false);
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Quantidade_Recebida", "Qtde. Rec.", 84, false, Enumerados.Tipo_Coluna.Inteiro, false);
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Estoque_Total", "Estoque", 60, false, Enumerados.Tipo_Coluna.Inteiro, false);
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Venda_Media_Total", "V.M. Total", 92, false, Enumerados.Tipo_Coluna.Decimal, false);
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_Desconto", "Desc. (%)", 77, false, Enumerados.Tipo_Coluna.Percentual, false, DataGridViewContentAlignment.MiddleRight);
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_Valor_Desconto", "Desc. (R$)", 85, false, Enumerados.Tipo_Coluna.Decimal);
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_Custo_Compra", "Preço Emb. (R$)", 110, false, Enumerados.Tipo_Coluna.Decimal, false, DataGridViewContentAlignment.MiddleRight);

                DataGridViewImageColumn dcoColumnDivergencia = new DataGridViewImageColumn();
                dcoColumnDivergencia.HeaderText = "D";
                dcoColumnDivergencia.Name = "Divergencia_Quantidade_Embalagem_Compra";
                dcoColumnDivergencia.Width = 20;
                dcoColumnDivergencia.ToolTipText = "Divergência do Múltiplo de Compra";
                this.objGridBotaoItens.DgvPadrao.Columns.Add(dcoColumnDivergencia);

                DataGridViewImageColumn dcoColumnRP = new DataGridViewImageColumn();
                dcoColumnRP.HeaderText = "R";
                dcoColumnRP.Name = "Reajustar_Peca";
                dcoColumnRP.Width = 20;
                dcoColumnRP.ToolTipText = "Reajuste de Preço";
                this.objGridBotaoItens.DgvPadrao.Columns.Add(dcoColumnRP);

                DataGridViewImageColumn dcoColumnPR = new DataGridViewImageColumn();
                dcoColumnPR.HeaderText = "S";
                dcoColumnPR.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
                dcoColumnPR.Name = "Parcialmente_Recebido";
                dcoColumnPR.Width = 20;
                dcoColumnPR.ToolTipText = "Peça Recebida Total/Parcial";
                this.objGridBotaoItens.DgvPadrao.Columns.Add(dcoColumnPR);

                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Valor_Total_Unitario", "Total Produto (R$)", 130, false, Enumerados.Tipo_Coluna.Decimal);
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Valor_Total_Compra", "Total Compra (R$)", 120, false, Enumerados.Tipo_Coluna.Decimal);

                this.objGridBotaoItens.DgvPadrao.Columns["Valor_Total_Unitario"].ToolTipText = "Custo Compra Multiplicado pela Quantidade";
                this.objGridBotaoItens.DgvPadrao.Columns["Valor_Total_Compra"].ToolTipText = "Preço Multiplicado pela Quantidade Menos o Desconto";

                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_ICMS");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_Substituicao");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_Imposto");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Peca_Margem_Lucro");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_CT_ID");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_ID");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Peca_ID");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Fabricante_CD");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Produto_CD");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Peca_CD");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Peca_Conv_ID");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Peca_Codigo_Fornecedor_ID");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_Qtde_Recebida");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Peca_Embalagem_Quantidade");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Peca_Embalagem_Compra_ID");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Enum_Tipo_Embalagem");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Peca_QtMinimaVenda");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Quantidade_Total");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_Custo_Unitario");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_Custo_Efetivo");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Fabricante_NmFantasia");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Produto_DS");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Peca_DsTecnica");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Fabricante_ID");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Produto_ID");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Usuario_Ultima_Alteracao_ID");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Preco_Venda");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Custo_Reposicao");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Solicitar_Distribuicao");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Ultimo_Custo");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Comissao_ID");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Peca_TVA");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_Remover_Impostos");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_Considerar_IPI");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("QTDE_Itens_No_Pre_Recebimento");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Peca_Qtde_Multipla_Compra");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Peca_Codigo_Fornecedor_ID");
                this.objGridBotaoItens.DgvPadrao.Adicionar_Coluna("Pedido_Compra_IT_Enviar_Totalmente_Lojas");
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Configurar_Grid_Pre_Distribuicao()
        {
            try
            {
                this.dgvPreDistribuicao.AutoGenerateColumns = false;
                this.dgvPreDistribuicao.MultiSelect = false;
                this.dgvPreDistribuicao.StandardTab = false;

                this.dgvPreDistribuicao.Adicionar_Coluna("Lojas_NM", "Loja", 120, true, Enumerados.Tipo_Coluna.Texto, false);
                this.dgvPreDistribuicao.Adicionar_Coluna("Pre_Distribuicao_Qtde", "Qtde.", 50, false, Enumerados.Tipo_Coluna.Inteiro, false);
                this.dgvPreDistribuicao.Adicionar_Coluna("Loja_ID");
                this.dgvPreDistribuicao.Adicionar_Coluna("Peca_ID");
                this.dgvPreDistribuicao.Adicionar_Coluna("Objeto_Origem_ID");
                this.dgvPreDistribuicao.Adicionar_Coluna("Enum_Tipo_ID");
                this.dgvPreDistribuicao.Adicionar_Coluna("Abastecimento_Reserva_ID");
                this.dgvPreDistribuicao.Adicionar_Coluna("Pre_Distribuicao_Considerar");
                this.dgvPreDistribuicao.Adicionar_Coluna("Pre_Distribuicao_Qtde_Chegou");
                this.dgvPreDistribuicao.Adicionar_Coluna("Pre_Distribuicao_Qtde_Ja_Abastecida");
                this.dgvPreDistribuicao.Adicionar_Coluna("Loja_Origem_ID");
                this.dgvPreDistribuicao.Adicionar_Coluna("Lojas_Ordenacao");

                this.intColunaLojaNome = this.dgvPreDistribuicao.Columns["Lojas_NM"].Width;

                DataGridViewTextBoxColumn clnPre_Distribuicao_Qtde = (DataGridViewTextBoxColumn)this.dgvPreDistribuicao.Columns["Pre_Distribuicao_Qtde"];
                clnPre_Distribuicao_Qtde.MaxInputLength = 8;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Aplicar_Alteracoes_Capa_Para_Itens(object objSender)
        {
            try
            {
                Pedido_CompraBUS busPedidoCompra = new Pedido_CompraBUS();
                DataTable dttImpostoCompra = new DataTable();

                if (object.ReferenceEquals(objSender, this.chkRemoverImpostos))
                {
                    this.chkRemoverImpostosItens.Checked = this.chkRemoverImpostos.Checked;
                }

                foreach (DataRow dtrItem in this.dtsPropriedades.Tables["Pedido_Compra_IT"].Rows)
                {
                    if (dtrItem.RowState != DataRowState.Deleted)
                    {
                        if (object.ReferenceEquals(objSender, this.txtCodigoFornecedor))
                        {
                            // Alterar os Impostos ao escolher ou mudar o fornecedor
                            dttImpostoCompra = busPedidoCompra.Consultar_Imposto_Compra_Peca_Por_Fornecedor(dtrItem["Peca_ID"].ToInteger(),
                                                                    this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Fornecedor_ID"].ToInteger());

                            dtrItem["Pedido_Compra_IT_ICMS"] = dttImpostoCompra.Rows[0]["Peca_ICMS_Compra"].ToDecimal();
                            dtrItem["Pedido_Compra_IT_Substituicao"] = dttImpostoCompra.Rows[0]["Peca_ICMS_Substituicao_Tributaria"].ToDecimal();
                            dtrItem["Pedido_Compra_IT_Imposto"] = dttImpostoCompra.Rows[0]["Peca_Perc_IPI"].ToDecimal();

                            // Verificar se existe codigo item fornecedor para peça e fornecedor. 
                            DataRow[] dtrPecaCodigoFornecedor = null;
                            dtrPecaCodigoFornecedor = this.dtsPropriedades.Tables["Peca_Codigo_Fornecedor"].Select("Peca_ID = " + dtrItem["Peca_ID"].ToInteger() + "AND Forn_ID = " + this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Fornecedor_ID"].ToInteger());
                            if (dtrPecaCodigoFornecedor.Length > 0)
                            {
                                dtrItem["Peca_Codigo_Fornecedor_ID"] = dtrPecaCodigoFornecedor[0]["Peca_Codigo_Fornecedor_ID"];
                            }
                            else
                            {
                                dtrItem["Peca_Codigo_Fornecedor_ID"] = 0;
                            }
                        }

                        dtrItem["Pedido_Compra_IT_Desconto"] = object.ReferenceEquals(objSender, this.nudDescontoPedido) ? this.nudDescontoPedido.Value : dtrItem["Pedido_Compra_IT_Desconto"];
                        dtrItem["Pedido_Compra_IT_Substituicao"] = object.ReferenceEquals(objSender, this.nudSubstituicaoPedido) ? this.nudSubstituicaoPedido.Value : dtrItem["Pedido_Compra_IT_Substituicao"];
                        dtrItem["Pedido_Compra_IT_Imposto"] = object.ReferenceEquals(objSender, this.nudIPIPedido) ? this.nudIPIPedido.Value : dtrItem["Pedido_Compra_IT_Imposto"];
                        dtrItem["Pedido_Compra_IT_Remover_Impostos"] = object.ReferenceEquals(objSender, this.chkRemoverImpostos) ? this.chkRemoverImpostos.Checked : dtrItem["Pedido_Compra_IT_Remover_Impostos"];

                        decimal dcmCustoUnitario = 0;
                        decimal dcmIPI = 0;
                        decimal dcmICMS = 0;

                        dcmICMS = dtrItem["Pedido_Compra_IT_ICMS"].ToDecimal();

                        dcmIPI = dtrItem["Pedido_Compra_IT_Imposto"].ToDecimal();

                        // Se for SIMPLES, zerar todos os impostos
                        if (this.chkOptanteSimples.Checked)
                        {
                            dcmIPI = 0;
                            dcmICMS = 0;
                        }

                        if (!dtrItem["Pedido_Compra_IT_Remover_Impostos"].ToBool())
                        {
                            dcmCustoUnitario = busPedidoCompra.Calcula_Custo_Unitario(
                                                                                      dtrItem["Pedido_Compra_IT_Custo_Compra"].ToDecimal(),
                                                                                      dtrItem["Peca_Embalagem_Quantidade"].ToDecimal(),
                                                                                      dtrItem["Pedido_Compra_IT_Desconto"].ToDecimal(),
                                                                                      dcmIPI,
                                                                                      dtrItem["Pedido_Compra_IT_Substituicao"].ToDecimal(),
                                                                                      false);
                        }
                        else
                        {
                            dcmCustoUnitario = busPedidoCompra.Remover_Impostos_Custo_Unitario(
                                                                                               dtrItem["Pedido_Compra_IT_Custo_Compra"].ToDecimal(),
                                                                                               dtrItem["Peca_Embalagem_Quantidade"].ToDecimal(),
                                                                                               dtrItem["Pedido_Compra_IT_Desconto"].ToDecimal(),
                                                                                               dcmIPI,
                                                                                               dtrItem["Pedido_Compra_IT_Substituicao"].ToDecimal(),
                                                                                               dcmICMS);
                        }

                        dtrItem["Pedido_Compra_IT_Custo_Unitario"] = dcmCustoUnitario;

                        dtrItem["Pedido_Compra_IT_Valor_Desconto"] = object.ReferenceEquals(objSender, this.nudDescontoPedido) ? busPedidoCompra.Calcular_Valor_Desconto_Item(dtrItem["Pedido_Compra_IT_Custo_Compra"].ToDecimal(), this.nudDescontoPedido.Value) : dtrItem["Pedido_Compra_IT_Valor_Desconto"];
                        dtrItem["Valor_Total_Unitario"] = dtrItem["Quantidade_Total"].ToInteger() * dtrItem["Pedido_Compra_IT_Custo_Unitario"].ToDecimal();
                        dtrItem["Valor_Total_Compra"] = busPedidoCompra.Calcular_Valor_Total_Compra(dtrItem);
                    }
                }
                if (this.objGridBotaoItens.DgvPadrao.Rows.Count > 0)
                {
                    this.objGridBotaoItens.DgvPadrao.CurrentRow.Selected = false;
                    this.objGridBotaoItens.DgvPadrao.Rows[0].Selected = true;
                }
                this.objGridBotaoItens.DgvPadrao.Update();
                this.objGridBotaoItens.DgvPadrao.Refresh();
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Atualizar o datatable de pre distribuição do dataset de propriedades
        /// </summary>
        private void Atualizar_Data_Table_Pre_Distribuicao(int intPecaID, int intQtdeItem)
        {
            try
            {
                if (intPecaID.Equals(0) || intQtdeItem.Equals(0))
                {
                    return;
                }

                if (DivUtil.Valida_Loja_Tipo_CD(this.cboLojaDestino.SelectedValue.DefaultString()))
                {
                    this.Tratar_Distribuicao_Necessidade_Peca(intPecaID);
                }
                else
                {
                    this.Tratar_Distribuicao_Para_Loja_Destino_Peca(intPecaID, intQtdeItem);
                }
                this.dtsPropriedades.Tables["Pre_Distribuicao"].AcceptChanges();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Tratar_Distribuicao_Para_Loja_Destino_Peca(int intPecaID, int intQtdeItem)
        {
            try
            {
                DataRow dtrItemPreDistribuicao = null;
                if (this.dtsPropriedades.Tables["Pre_Distribuicao"].Select("Peca_ID = 0 AND Loja_ID = " + this.cboLojaDestino.SelectedValue.ToInteger()).Length > 0)
                {
                    dtrItemPreDistribuicao = this.dtsPropriedades.Tables["Pre_Distribuicao"].Select("Peca_ID = 0 AND Loja_ID = " + this.cboLojaDestino.SelectedValue.ToInteger())[0];
                }

                if (dtrItemPreDistribuicao != null)
                {
                    this.Preencher_Pre_Distribuicao_Peca(this.cboLojaDestino.SelectedValue.ToInteger(), this.cboLojaDestino.Text, intPecaID, intQtdeItem, dtrItemPreDistribuicao);
                    dtrItemPreDistribuicao["Lojas_Ordenacao"] = dtrItemPreDistribuicao["Lojas_Ordenacao"];
                }

                DataRow[] dtrPecasLoja = this.dtsPropriedades.Tables["Pre_Distribuicao"].Select("Peca_ID = " + intPecaID + " AND Loja_ID = " + this.cboLojaDestino.SelectedValue.ToInteger());

                if (dtrPecasLoja.Length == 0)
                {
                    DataRow dtrPreDistribuicao = this.dtsPropriedades.Tables["Pre_Distribuicao"].NewRow();

                    if (DivUtil.Valida_Loja_Tipo_CD(this.cboLojaDestino.SelectedValue.DefaultString()))
                    {
                        this.Preencher_Pre_Distribuicao_Peca(this.cboLojaDestino.SelectedValue.ToInteger(), this.cboLojaDestino.Text, intPecaID, 0, dtrPreDistribuicao);
                    }
                    else
                    {
                        this.Preencher_Pre_Distribuicao_Peca(this.cboLojaDestino.SelectedValue.ToInteger(), this.cboLojaDestino.Text, intPecaID, intQtdeItem, dtrPreDistribuicao);
                    }

                    this.dtsPropriedades.Tables["Pre_Distribuicao"].Rows.Add(dtrPreDistribuicao);
                }
                else if (dtrPecasLoja[0]["Pre_Distribuicao_Qtde"].ToInteger() != intQtdeItem && DivUtil.Valida_Loja_Tipo_CD(this.cboLojaDestino.SelectedValue.DefaultString()) == false)
                {
                    dtrPecasLoja[0]["Pre_Distribuicao_Qtde"] = intQtdeItem;
                }

                if (this.dtsResumoPecaPedidoCompra != null && this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_ID"].ToInteger() == intPecaID)
                {
                    DataRow[] dtrPecasLojaAtualizar = this.dtsPropriedades.Tables["Pre_Distribuicao"].Select(
                    "Peca_ID = " + intPecaID + " AND Loja_ID <> " + this.cboLojaDestino.SelectedValue.ToInteger());

                    foreach (DataRow dtrAlterar in dtrPecasLojaAtualizar)
                    {
                        this.Preencher_Pre_Distribuicao_Peca(dtrAlterar["Loja_ID"].ToInteger(), dtrAlterar["Lojas_NM"].ToString(), intPecaID, 0, dtrAlterar);
                    }
                }
                else
                {
                    this.dgvPreDistribuicao.Refresh();
                    foreach (DataGridViewRow dgvItem in this.dgvPreDistribuicao.Rows)
                    {
                        DataRow[] dtrItem = this.dtsPropriedades.Tables["Pre_Distribuicao"].Select("Loja_ID = " + dgvItem.Cells["Loja_ID"].Value +
                            " AND Peca_ID = " + dgvItem.Cells["Peca_ID"].Value + " AND Enum_Tipo_ID = " + Enumerados.Origem_Pre_Distribuicao.Pedido_Compra.ToInteger());
                        if (dtrItem.Length > 0)
                        {
                            foreach (DataRow dtrAlterar in dtrItem)
                            {
                                this.Preencher_Pre_Distribuicao_Peca(
                                    dtrAlterar["Loja_ID"].ToInteger(),
                                    dtrAlterar["Lojas_NM"].ToString(),
                                    intPecaID,
                                    dtrAlterar["Pre_Distribuicao_Qtde"].ToInteger(),
                                    dtrAlterar);
                            }
                            dtrItem[0]["Pre_Distribuicao_Qtde"] = dgvItem.Cells["Pre_Distribuicao_Qtde"].Value;
                        }
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Tratar_Distribuicao_Necessidade_Peca(int intPecaID)
        {
            try
            {
                if (this.Verificar_Origem_Analise_Duracao_Estoque())
                {
                    this.Zerar_Quantidade_Distribuida_Da_Peca(intPecaID);
                }
                // Na inclusão de itens no grid e lojas iguais
                if (this.dtsResumoPecaPedidoCompra != null && this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_ID"].ToInteger() == intPecaID)
                {
                    foreach (DataRow dtrItemPreDistribuicao in this.dtsResumoPecaPedidoCompra.Tables["Pre_Distribuicao"].Rows)
                    {
                        DataRow dtrPecasLoja = null;
                        if (this.dtsPropriedades.Tables["Pre_Distribuicao"].Select("Peca_ID = " + intPecaID + " AND Loja_ID = " + dtrItemPreDistribuicao["Loja_ID"].ToInteger()).Length > 0)
                        {
                            dtrPecasLoja = this.dtsPropriedades.Tables["Pre_Distribuicao"].Select("Peca_ID = " + intPecaID + " AND Loja_ID = " + dtrItemPreDistribuicao["Loja_ID"].ToInteger())[0];
                        }

                        if (dtrPecasLoja == null)
                        {
                            if (dtrItemPreDistribuicao["Pre_Distribuicao_Qtde"].ToInteger() > 0)
                            {
                                DataRow dtrPreDistribuicao = this.dtsPropriedades.Tables["Pre_Distribuicao"].NewRow();

                                this.Atribuir_Pre_Distribuicao(intPecaID, dtrItemPreDistribuicao, dtrPreDistribuicao);

                                this.dtsPropriedades.Tables["Pre_Distribuicao"].Rows.Add(dtrPreDistribuicao);
                            }
                            else
                            {
                                // Insere qtde zerada
                                DataRow dtrPreDistribuicao = this.dtsPropriedades.Tables["Pre_Distribuicao"].NewRow();

                                this.Atribuir_Pre_Distribuicao(intPecaID, dtrItemPreDistribuicao, dtrPreDistribuicao, true);

                                this.dtsPropriedades.Tables["Pre_Distribuicao"].Rows.Add(dtrPreDistribuicao);
                            }
                        }
                        else
                        {
                            if (this.Verificar_Linha_Selecionada_Possui_Diferenca_De_Quantidades_Na_Pre_Distribuicao(dtrItemPreDistribuicao, dtrPecasLoja))
                            {
                                dtrPecasLoja["Pre_Distribuicao_Qtde"] = dtrItemPreDistribuicao["Pre_Distribuicao_Qtde"];
                            }
                        }
                    }
                }
                else
                {
                    // Na alteração de item pre distribuido
                    this.dgvPreDistribuicao.Refresh();
                    foreach (DataGridViewRow dgvItem in this.dgvPreDistribuicao.Rows)
                    {
                        DataRow[] dtrItem = this.dtsPropriedades.Tables["Pre_Distribuicao"].Select("Loja_ID = " + dgvItem.Cells["Loja_ID"].Value + "AND Peca_ID = " + dgvItem.Cells["Peca_ID"].Value + "AND Enum_Tipo_ID = " + Enumerados.Origem_Pre_Distribuicao.Pedido_Compra.ToInteger());
                        if (dtrItem.Length > 0)
                        {
                            dtrItem[0]["Pre_Distribuicao_Qtde"] = dgvItem.Cells["Pre_Distribuicao_Qtde"].Value;
                        }
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Verificar se a quantidade de pre distribuição é diferente da que esta no data table e se a loja e peça são iguais
        /// </summary>
        private bool Verificar_Linha_Selecionada_Possui_Diferenca_De_Quantidades_Na_Pre_Distribuicao(DataRow dtrItemPreDistribuicao, DataRow dtrPecasLoja)
        {
            try
            {
                return dtrPecasLoja["Pre_Distribuicao_Qtde"].ToInteger() != dtrItemPreDistribuicao["Pre_Distribuicao_Qtde"].ToInteger() &&
                       dtrPecasLoja["Loja_ID"].ToInteger() == dtrItemPreDistribuicao["Loja_ID"].ToInteger() &&
                       dtrPecasLoja["Peca_ID"].ToInteger() == dtrItemPreDistribuicao["Peca_ID"].ToInteger();
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Alterar a quantidade distribuida para 0
        /// </summary>
        private void Zerar_Quantidade_Distribuida_Da_Peca(int intPecaID)
        {
            try
            {
                if (this.blnAlterarItem == false)
                {
                    return;
                }

                DataRow[] dtrZerarQuantidade = this.dtsPropriedades.Tables["Pre_Distribuicao"].Select("Peca_ID = " + intPecaID + " AND Pre_Distribuicao_Qtde <> 0");

                if (dtrZerarQuantidade.Length > 0)
                {
                    foreach (DataRow dtrItem in dtrZerarQuantidade)
                    {
                        dtrItem["Pre_Distribuicao_Qtde"] = 0;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        private bool Verificar_Origem_Analise_Duracao_Estoque()
        {
            try
            {
                return this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Tipo_Origem_ID"].ToInteger() != Enumerados.Origem_Pedido_Compras.Duracao_de_Estoque.ToInteger() &&
                       this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Tipo_Origem_ID"].ToInteger() != Enumerados.Origem_Pedido_Compras.Duracao_de_Estoque_Novo.ToInteger();
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Atribuir_Pre_Distribuicao(int intPecaID, DataRow dtrItemPreDistribuicao, DataRow dtrPreDistribuicao, bool blnVerificarZerarPreDistribuicao = false)
        {
            try
            {
                dtrPreDistribuicao["Loja_ID"] = dtrItemPreDistribuicao["Loja_ID"].ToInteger();
                dtrPreDistribuicao["Lojas_NM"] = dtrItemPreDistribuicao["Lojas_NM"].ToString();
                dtrPreDistribuicao["Pre_Distribuicao_Qtde"] = dtrItemPreDistribuicao["Pre_Distribuicao_Qtde"].ToInteger();
                dtrPreDistribuicao["Peca_ID"] = intPecaID;
                dtrPreDistribuicao["Objeto_Origem_ID"] = dtrItemPreDistribuicao["Objeto_Origem_ID"].ToInteger();
                dtrPreDistribuicao["Enum_Tipo_ID"] = Mercadocar.Enumerados.Origem_Pre_Distribuicao.Pedido_Compra.ToInteger();
                dtrPreDistribuicao["Abastecimento_Reserva_ID"] = dtrItemPreDistribuicao["Abastecimento_Reserva_ID"].ToInteger();
                dtrPreDistribuicao["Pre_Distribuicao_Considerar"] = dtrItemPreDistribuicao["Pre_Distribuicao_Considerar"].ToInteger();
                dtrPreDistribuicao["Pre_Distribuicao_Qtde_Chegou"] = dtrItemPreDistribuicao["Pre_Distribuicao_Qtde_Chegou"].ToInteger();
                dtrPreDistribuicao["Pre_Distribuicao_Qtde_Ja_Abastecida"] = dtrItemPreDistribuicao["Pre_Distribuicao_Qtde_Ja_Abastecida"].ToInteger();
                dtrPreDistribuicao["Loja_Origem_ID"] = this.cboLojaDestino.SelectedValue;
                dtrPreDistribuicao["Lojas_Ordenacao"] = dtrItemPreDistribuicao["Lojas_Ordenacao"].ToInteger();

                if (blnVerificarZerarPreDistribuicao)
                {
                    dtrPreDistribuicao["Pre_Distribuicao_Qtde"] = 0;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Preencher_Pre_Distribuicao_Peca(int intLojaID, string strLojaNome, int intPecaID, int intQtdeItem, DataRow dtrPreDistribuicao)
        {
            try
            {
                dtrPreDistribuicao["Loja_ID"] = intLojaID;
                dtrPreDistribuicao["Lojas_NM"] = strLojaNome;
                dtrPreDistribuicao["Pre_Distribuicao_Qtde"] = intQtdeItem;
                dtrPreDistribuicao["Peca_ID"] = intPecaID;
                dtrPreDistribuicao["Objeto_Origem_ID"] = 0;
                dtrPreDistribuicao["Enum_Tipo_ID"] = Mercadocar.Enumerados.Origem_Pre_Distribuicao.Pedido_Compra.ToInteger();
                dtrPreDistribuicao["Abastecimento_Reserva_ID"] = 0;
                dtrPreDistribuicao["Pre_Distribuicao_Considerar"] = 0;
                dtrPreDistribuicao["Pre_Distribuicao_Qtde_Chegou"] = 0;
                dtrPreDistribuicao["Pre_Distribuicao_Qtde_Ja_Abastecida"] = 0;
                dtrPreDistribuicao["Loja_Origem_ID"] = 0;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Atualizar_Data_Table_Peca_Embalagem(int intPecaID)
        {
            try
            {
                if (this.dtsResumoPecaPedidoCompra == null)
                {
                    return;
                }

                bool blnInserePecaEmbalagem = false;
                if (this.dtsPropriedades.Tables["Peca_Embalagem"].Select("Peca_ID = " + intPecaID).Length == 0)
                {
                    blnInserePecaEmbalagem = true;
                }
                if (blnInserePecaEmbalagem)
                {
                    this.Insere_Item_Peca_Embalagem(intPecaID);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Insere_Item_Peca_Embalagem(int intPecaID)
        {
            try
            {
                DataRow dtrPecaEmbalagem = null;

                foreach (DataRow dtrItemPecaEmbalagem in this.dtsResumoPecaPedidoCompra.Tables["Peca_Embalagem"].Rows)
                {
                    dtrPecaEmbalagem = this.dtsPropriedades.Tables["Peca_Embalagem"].NewRow();

                    dtrPecaEmbalagem["Peca_Embalagem_ID"] = dtrItemPecaEmbalagem["Peca_Embalagem_ID"].ToInteger();
                    dtrPecaEmbalagem["Peca_ID"] = intPecaID;
                    dtrPecaEmbalagem["Peca_Embalagem_Descricao"] = dtrItemPecaEmbalagem["Peca_Embalagem_Descricao"];
                    dtrPecaEmbalagem["Peca_Embalagem_Peso"] = dtrItemPecaEmbalagem["Peca_Embalagem_Peso"].ToDecimal();
                    dtrPecaEmbalagem["Peca_Embalagem_Peso"] = dtrItemPecaEmbalagem["Peca_Embalagem_Peso"].ToDecimal();
                    dtrPecaEmbalagem["Peca_Embalagem_Altura"] = dtrItemPecaEmbalagem["Peca_Embalagem_Altura"].ToDecimal();
                    dtrPecaEmbalagem["Peca_Embalagem_Largura"] = dtrItemPecaEmbalagem["Peca_Embalagem_Largura"].ToDecimal();
                    dtrPecaEmbalagem["Peca_Embalagem_Profundidade"] = dtrItemPecaEmbalagem["Peca_Embalagem_Profundidade"].ToDecimal();
                    dtrPecaEmbalagem["Peca_Embalagem_Diametro"] = dtrItemPecaEmbalagem["Peca_Embalagem_Diametro"].ToDecimal();
                    dtrPecaEmbalagem["Peca_Embalagem_Quantidade"] = dtrItemPecaEmbalagem["Peca_Embalagem_Quantidade"].ToInteger();
                    dtrPecaEmbalagem["Peca_Embalagem_Ativo"] = dtrItemPecaEmbalagem["Peca_Embalagem_Ativo"].ToBool();
                    dtrPecaEmbalagem["Peca_Embalagem_Compra"] = dtrItemPecaEmbalagem["Peca_Embalagem_Compra"].ToBool();
                    dtrPecaEmbalagem["Peca_Embalagem_Venda"] = dtrItemPecaEmbalagem["Peca_Embalagem_Venda"].ToBool();
                    dtrPecaEmbalagem["Peca_Embalagem_Empilhamento_Maximo"] = dtrItemPecaEmbalagem["Peca_Embalagem_Empilhamento_Maximo"].ToInteger();

                    this.dtsPropriedades.Tables["Peca_Embalagem"].Rows.Add(dtrPecaEmbalagem);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Atualizar_Data_Table_Peca_Codigo_Fornecedor(int intPecaID)
        {
            try
            {
                if (this.dtsResumoPecaPedidoCompra == null)
                {
                    return;
                }

                DataRow dtrPecaCodigoFornecedor = null;

                bool blnInserePecaCodigoFornecedor = false;
                if (this.dtsPropriedades.Tables["Peca_Codigo_Fornecedor"].Select("Peca_ID = " + intPecaID).Length == 0)
                {
                    blnInserePecaCodigoFornecedor = true;
                }
                foreach (DataRow dtrItemPecaCodigoFornecedor in this.dtsResumoPecaPedidoCompra.Tables["Peca_Codigo_Fornecedor"].Rows)
                {
                    if (blnInserePecaCodigoFornecedor)
                    {
                        dtrPecaCodigoFornecedor = this.dtsPropriedades.Tables["Peca_Codigo_Fornecedor"].NewRow();

                        dtrPecaCodigoFornecedor["Peca_Codigo_Fornecedor_ID"] = dtrItemPecaCodigoFornecedor["Peca_Codigo_Fornecedor_ID"].ToInteger();
                        dtrPecaCodigoFornecedor["Peca_ID"] = intPecaID;
                        dtrPecaCodigoFornecedor["Forn_ID"] = dtrItemPecaCodigoFornecedor["Forn_ID"];
                        dtrPecaCodigoFornecedor["Usuario_ID"] = dtrItemPecaCodigoFornecedor["Usuario_ID"];
                        dtrPecaCodigoFornecedor["Peca_Codigo_Fornecedor_Codigo"] = dtrItemPecaCodigoFornecedor["Peca_Codigo_Fornecedor_Codigo"];
                        dtrPecaCodigoFornecedor["Peca_Codigo_Fornecedor_Data"] = dtrItemPecaCodigoFornecedor["Peca_Codigo_Fornecedor_Data"];

                        this.dtsPropriedades.Tables["Peca_Codigo_Fornecedor"].Rows.Add(dtrPecaCodigoFornecedor);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Cria_Colunas_Combo_Embalagem()
        {
            try
            {
                this.cboEmbalagemCompra.DisplayMember = "Peca_Embalagem_Descricao";
                this.cboEmbalagemCompra.ValueMember = "Peca_Embalagem_ID";
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Cria_Colunas_Combo_Peca_Codigo_Fornecedor()
        {
            try
            {
                this.cboCodigoItemFornecedor.DisplayMember = "Peca_Codigo_Fornecedor_Codigo";
                this.cboCodigoItemFornecedor.ValueMember = "Peca_Codigo_Fornecedor_ID";
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Carregar_Dados()
        {
            try
            {
                this.Adicionar_Remover_Handler_Tab_Geral(false);
                Pedido_CompraBUS busPedidoCompra = new Pedido_CompraBUS();
                if (this.intPedidoCompraCTID == 0 && this.dtsPropriedades == null)
                {
                    this.dtsPropriedades = busPedidoCompra.Consultar_Data_Set_Pedido_Compra(this.intPedidoCompraCTID);
                }
                else if (this.intPedidoCompraCTID != 0)
                {
                    this.dtsPropriedades = busPedidoCompra.Consultar_Data_Set_Pedido_Compra(this.intPedidoCompraCTID);
                    if (this.dtsPropriedades.Tables["Pedido_Compra_IT"].Rows.Count == 0)
                    {
                        this.Limpar_Campos_Itens();
                        this.Habilitar_Edicao_Item_Pedido(false);
                    }
                }
                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows.Count == 0)
                {
                    this.dtpDataPrevista.Format = DateTimePickerFormat.Custom;
                    this.dtpDataPrevista.CustomFormat = " ";
                    this.Incluir_Capa_Pedido();
                }
                this.Exibir_Caption_Origem_Pedido();
                this.dtsPropriedadesOriginal = this.dtsPropriedades.Copy();
                this.Carregar_Dados_Capa();
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                this.Adicionar_Remover_Handler_Tab_Geral(true);
            }
        }

        private void Carregar_Dados_Capa()
        {
            try
            {
                this.Adicionar_Remover_Handler_Tab_Geral(false);

                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows.Count > 0)
                {
                    DataRow dtrPedidoCompraCT = this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0];
                    this.lblNumeroPedido.Text = dtrPedidoCompraCT["Pedido_Compra_CT_ID"].ToString().IsNullOrEmpty() ? string.Empty : dtrPedidoCompraCT["Pedido_Compra_CT_ID"].ToString().PadLeft(6, '0');
                    this.lblSituacao.Text = dtrPedidoCompraCT["Enum_Status_Extenso"].ToString();
                    this.lblDataPedido.Text = dtrPedidoCompraCT["Pedido_Compra_CT_Data_Geracao"].ToDateTime() == new DateTime(1900, 1, 1) ? string.Empty : string.Format("{0:dd/MM/yyyy HH:mm}", dtrPedidoCompraCT["Pedido_Compra_CT_Data_Geracao"]);
                    this.lblNomeFantasia.Text = dtrPedidoCompraCT["PessoaJuridica_NmFantasia"].ToString();

                    this.txtCodigoFornecedor.Text = dtrPedidoCompraCT["Forn_CD"].ToString();
                    this.chkOptanteSimples.Checked = dtrPedidoCompraCT["Forn_IsOptanteSimples"].ToBool();
                    this.chkRemoverImpostos.Checked = dtrPedidoCompraCT["Pedido_Compra_CT_Remover_Impostos"].ToBool();

                    string strObjetoOrigem = string.Empty;
                    if (dtrPedidoCompraCT["Enum_Tipo_Origem_ID"].ToInteger() != Enumerados.Origem_Pedido_Compras.Pendencia_de_Compra.ToInteger() &&
                        dtrPedidoCompraCT["Enum_Tipo_Origem_ID"].ToInteger() != Enumerados.Origem_Pedido_Compras.Pedido_de_Compras.ToInteger())
                    {
                        strObjetoOrigem = dtrPedidoCompraCT["Objeto_Origem_ID"].ToString();
                    }
                    this.lblOrigemPedido.Text = dtrPedidoCompraCT["Enum_Tipo_Origem_Extenso"].ToString() + " : " + strObjetoOrigem;

                    this.blnPedidoEncomendaVenda = (dtrPedidoCompraCT["Enum_Tipo_Origem_ID"].ToInteger() == Enumerados.Origem_Pedido_Compras.Encomenda.ToInteger());

                    if (this.blnPedidoEncomendaVenda)
                    {
                        DataRow[] dtrLojaEncomenda = Root.Lista_Lojas.Select("Lojas_ID = " + dtrPedidoCompraCT["Loja_Origem_ID"].DefaultString());
                        if (dtrLojaEncomenda.Length > 0)
                        {
                            this.lblOrigemPedido.Text += " (" + dtrLojaEncomenda[0]["Lojas_NM"].DefaultString() + ")";
                        }
                    }

                    this.lblDataEntrega.Text = string.Format("{0:dd/MM/yyyy HH:mm}", dtrPedidoCompraCT["Pedido_Compra_CT_Data_Entrega"]);

                    if (this.dtpDataPrevista.Format == DateTimePickerFormat.Custom)
                    {
                        this.dtpDataPrevista.Value = System.DateTime.Today.AddDays(-1);
                    }
                    else
                    {
                        this.dtpDataPrevista.Value = Convert.ToDateTime(dtrPedidoCompraCT["Pedido_Compra_CT_Data_Prevista"].ToDateTime() != new DateTime(1900, 1, 1) ? dtrPedidoCompraCT["Pedido_Compra_CT_Data_Prevista"].ToDateTime() : System.DateTime.Today);
                    }

                    if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Pedido_Compra_CT_Data_Prevista"].DefaultDateTime() == new DateTime(1900, 1, 1))
                    {
                        this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Pedido_Compra_CT_Data_Prevista"] = this.dtpDataPrevista.Value;
                    }

                    if (this.blnPedidoEncomendaVenda)
                    {
                        DataTable dttUsuarios = ((DataTable)this.cboComprador.DataSource).Copy();

                        DataRow dtrTodos = dttUsuarios.NewRow();
                        dtrTodos["Usuario_ID"] = dtrPedidoCompraCT["Usuario_Comprador_ID"].DefaultInteger();
                        dtrTodos["Usuario_Nome_Completo"] = dtrPedidoCompraCT["Usuario_Geracao_Nm"].ToString();

                        dttUsuarios.Rows.InsertAt(dtrTodos, 1);
                        this.cboComprador.DataSource = dttUsuarios;
                    }

                    this.cboComprador.SelectedValue = dtrPedidoCompraCT["Usuario_Comprador_ID"];
                    this.lblUsuarioGeracao.Text = dtrPedidoCompraCT["Usuario_Geracao_Nm"].ToString();
                    this.cboLojaFaturamento.SelectedValue = dtrPedidoCompraCT["Loja_Faturamento_ID"];
                    this.cboLojaDestino.SelectedValue = dtrPedidoCompraCT["Loja_Destino_ID"];
                    this.txtVendedor.Text = dtrPedidoCompraCT["Pedido_Compra_CT_Vendedor"].ToString();
                    this.nudDescontoPedido.Text = dtrPedidoCompraCT["Pedido_Compra_CT_Desconto"].ToString();
                    this.nudIPIPedido.Text = dtrPedidoCompraCT["Pedido_Compra_CT_IPI"].ToString();
                    this.nudSubstituicaoPedido.Text = dtrPedidoCompraCT["Pedido_Compra_CT_Substituicao"].ToString();
                    this.txtObservacoes.Text = dtrPedidoCompraCT["Pedido_Compra_CT_Obs"].ToString();
                    this.txtCobrancaFornecedor.Text = dtrPedidoCompraCT["Pedido_Compra_CT_Cobranca_Fornecedor"].ToString();
                    this.txtCodigoCondicaoPagamento.Text = dtrPedidoCompraCT["Condicao_Pagamento_CT_CD"].ToString();
                    this.lblDescricaoCondicaoPagamento.Text = dtrPedidoCompraCT["Condicao_Pagamento_CT_DS"].ToString();

                    if (!this.txtCodigoFornecedor.Text.IsNullOrEmpty())
                    {
                        this.Preencher_Data_Table_Fornecedor(this.txtCodigoFornecedor.Text);
                    }

                    if (this.dtsPropriedades.Tables["Garantias_Fornecedor"].Rows.Count > 0)
                    {
                        this.lblQtdePecasPendenteFornecedor.Text = this.dtsPropriedades.Tables["Garantias_Fornecedor"].Rows[0]["Qtde_Pecas_Pendente_Fornecedor"].ToInteger().ToString("#,##0");
                        this.lblValorTotalPendenteFornecedor.Text = this.dtsPropriedades.Tables["Garantias_Fornecedor"].Rows[0]["Valor_Total_Pendente_Fornecedor"].ToDecimal().ToString("R$ #,##0.00");
                        this.lblQtdePecasRecusadasFornecedor.Text = this.dtsPropriedades.Tables["Garantias_Fornecedor"].Rows[0]["Qtde_Pecas_Recusadas_Fornecedor"].ToInteger().ToString("#,##0");
                        this.lblValorTotalRecusadasFornecedor.Text = this.dtsPropriedades.Tables["Garantias_Fornecedor"].Rows[0]["Valor_Total_Recusadas_Fornecedor"].ToDecimal().ToString("R$ #,##0.00");
                    }
                    if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Tipo_ID"].ToInteger() == Enumerados.Tipo_Pedido.Saldo.ToInteger() &&
                        this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() != Enumerados.Status_Pedido_Compra.Finalizado.ToInteger())
                    {
                        this.btnConfirmarSaldo.Enabled = true;
                    }
                    else
                    {
                        this.btnConfirmarSaldo.Enabled = false;
                    }

                    if (dtrPedidoCompraCT["Encomenda_Venda_CT_ID"].DefaultInteger() != 0)
                    {
                        this.txtEncomenda.Text = dtrPedidoCompraCT["Encomenda_Venda_CT_ID"].DefaultString();
                    }

                }
                else
                {
                    this.Limpar_Campos_Formulario_Novo_Pedido();
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                this.Adicionar_Remover_Handler_Tab_Geral(true);
            }
        }

        private void Clicar_Botao_Grid_Salvar_Alterar()
        {
            try
            {
                DataRow dtrItemGrid = ((DataRowView)this.objGridBotaoItens.DgvPadrao.CurrentRow.DataBoundItem).Row;

                dtrItemGrid["Pedido_Compra_IT_Sequencia"] = this.Sequencia_Peca(this.objCodigoMercadocar.Peca_ID);
                dtrItemGrid["Cod_Mercadocar"] = this.objCodigoMercadocar.Codigo_Mercadocar;
                dtrItemGrid["Pedido_Compra_IT_Quantidade"] = this.nudQtdeItem.Value;
                dtrItemGrid["Peca_Embalagem_Descricao"] = this.cboEmbalagemCompra.Text;
                dtrItemGrid["Pedido_Compra_IT_Custo_Compra"] = this.nudPrecoEmbalagem.Value;
                dtrItemGrid["Pedido_Compra_IT_Desconto"] = this.nudDescontoItem.Value;
                Pedido_CompraBUS busPedidoCompra = new Pedido_CompraBUS();
                dtrItemGrid["Pedido_Compra_IT_Valor_Desconto"] = busPedidoCompra.Calcular_Valor_Desconto_Item(this.nudPrecoEmbalagem.Value, this.nudDescontoItem.Value);
                dtrItemGrid["Pedido_Compra_IT_ICMS"] = this.nudICMSItem.Value;
                dtrItemGrid["Pedido_Compra_IT_Substituicao"] = this.nudSubstituicaoItem.Value;
                dtrItemGrid["Pedido_Compra_IT_Imposto"] = this.nudIPIItem.Value;
                dtrItemGrid["Peca_Margem_Lucro"] = this.lblMargemLucro.Text;
                dtrItemGrid["Custo_Reposicao"] = decimal.Parse(this.lblCustoReposicao.Text.Replace("R$ ", string.Empty));
                dtrItemGrid["Preco_Fabrica"] = decimal.Parse(this.lblPrecoFabrica.Text.Replace("R$ ", string.Empty));
                dtrItemGrid["Ultimo_Custo"] = decimal.Parse(this.lblUltimoCusto.Text.Replace("R$ ", string.Empty));
                dtrItemGrid["Preco_Venda"] = decimal.Parse(this.lblPrecoVenda.Text.Replace("R$ ", string.Empty));
                dtrItemGrid["Peca_ID"] = this.objCodigoMercadocar.Peca_ID;
                dtrItemGrid["Fabricante_CD"] = this.objCodigoMercadocar.Fabricante_CD;
                dtrItemGrid["Produto_CD"] = this.objCodigoMercadocar.Produto_CD;
                dtrItemGrid["Peca_CD"] = this.objCodigoMercadocar.Peca_CD;
                dtrItemGrid["Peca_CdFabricante"] = this.objCodigoMercadocar.Text_CodigoItemFabricante.Text;
                dtrItemGrid["Peca_Conv_ID"] = 0;
                dtrItemGrid["Peca_Codigo_Fornecedor_ID"] = this.cboCodigoItemFornecedor.SelectedValue == null ? 0 : this.cboCodigoItemFornecedor.SelectedValue;
                dtrItemGrid["Peca_Embalagem_Compra_ID"] = this.cboEmbalagemCompra.SelectedValue;
                dtrItemGrid["Peca_Embalagem_Quantidade"] = this.Retorna_Qtde_Item_Por_Embalagem();
                dtrItemGrid["Quantidade_Total"] = this.lblQuantidadeTotal.Text.Replace(".", string.Empty);
                dtrItemGrid["Pedido_Compra_IT_Custo_Unitario"] = this.lblCustoUnitario.Text.Replace("R$", string.Empty).ToDecimal();
                dtrItemGrid["Pedido_Compra_IT_Custo_Efetivo"] = 0;
                dtrItemGrid["Fabricante_NmFantasia"] = this.objCodigoMercadocar.Fabricante_NmFantasia;
                dtrItemGrid["Produto_DS"] = this.objCodigoMercadocar.Produto_Ds;
                dtrItemGrid["Peca_DsTecnica"] = this.objCodigoMercadocar.Peca_DsTecnica;
                dtrItemGrid["Quantidade_Recebida"] = dtrItemGrid["Quantidade_Recebida"];
                dtrItemGrid["Fabricante_ID"] = this.objCodigoMercadocar.Fabricante_ID;
                dtrItemGrid["Produto_ID"] = this.objCodigoMercadocar.Produto_ID;
                dtrItemGrid["Usuario_Ultima_Alteracao_ID"] = ((UsuarioDO)Root.Funcionalidades.Usuario_Ativo).ID;
                dtrItemGrid["Pedido_Compra_IT_Remover_Impostos"] = this.chkRemoverImpostosItens.Checked;
                dtrItemGrid["Pedido_Compra_IT_Considerar_IPI"] = 0;
                dtrItemGrid["Valor_Total_Unitario"] = dtrItemGrid["Quantidade_Total"].ToInteger() * dtrItemGrid["Pedido_Compra_IT_Custo_Unitario"].ToDecimal();
                dtrItemGrid["Valor_Total_Compra"] = busPedidoCompra.Calcular_Valor_Total_Compra(dtrItemGrid);

                dtrItemGrid["Pedido_Compra_IT_Enviar_Totalmente_Lojas"] = this.chkDistribuirTotalmenteParaLojas.Checked;

                this.blnAlterarItem = false;

                this.Verificar_Mudancas();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private int Retorna_Qtde_Item_Por_Embalagem()
        {
            try
            {
                Int32 intQntdEmbCompra = 1;

                DataRow[] dtrEmbalagem = this.dtsPropriedades.Tables["Peca_Embalagem"].Select("Peca_Embalagem_ID = " + this.cboEmbalagemCompra.SelectedValue.ToString());
                if (dtrEmbalagem.Length > 0)
                {
                    intQntdEmbCompra = dtrEmbalagem[0]["Peca_Embalagem_Quantidade"].ToInteger();
                }
                return intQntdEmbCompra;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Clicar_Botao_Grid_Salvar_Inserir()
        {
            Cursor.Current = Cursors.WaitCursor;
            this.Refresh();

            try
            {
                this.objGridBotaoItens.DgvPadrao.Enabled = true;
                this.objGridBotaoItens.DgvPadrao.ReadOnly = false;
                this.objGridBotaoItens.DgvPadrao.Refresh();

                this.Incluir_Item();
                this.objGridBotaoItens.DgvPadrao.Refresh();
                this.Habilitar_Edicao_Item_Pedido(false);
                this.Setar_Imagens_Grid();
                this.Verificar_Mudancas();
                this.Preencher_Valor_Total_Pedido();
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private string Concatenar_Tipos_Fornecedor(DataTable dttTiposFornecedor)
        {
            try
            {
                string strRetornoTiposFonecedor = string.Empty;
                int intContador = 0;
                if (dttTiposFornecedor.Rows.Count > 0)
                {
                    foreach (DataRow dtrItem in dttTiposFornecedor.Rows)
                    {
                        if (intContador == 0)
                        {
                            strRetornoTiposFonecedor += dtrItem["Fornecedor_Tipo_Descricao"].ToString();
                        }
                        else
                        {
                            strRetornoTiposFonecedor += " - " + dtrItem["Fornecedor_Tipo_Descricao"].ToString();
                        }
                        intContador += 1;
                    }
                }
                return strRetornoTiposFonecedor;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Limpar_Formulario_objGridButtons()
        {
            try
            {
                this.objCodigoMercadocar.Limpar_Controles();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Limpar_Campos_Formulario_Novo_Pedido()
        {
            try
            {
                this.lblUsuarioGeracao.Text = string.Empty;
                this.txtEncomenda.Text = string.Empty;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Limpar_Campos_Itens()
        {
            try
            {
                this.Adicionar_Remover_Handler_Tab_Itens(false);
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);

                this.objCodigoMercadocar.Limpar_Controles();
                this.blnAlterarItem = false;
                this.txtCodigoItemFabricante.Text = string.Empty;
                this.cboCodigoItemFornecedor.DataSource = null;
                this.lblDescricaoFabricante.Text = string.Empty;
                this.lblDescricaoProduto.Text = string.Empty;
                this.lblDescricaoPeca.Text = string.Empty;
                this.nudQtdeItem.Value = 0;
                this.cboEmbalagemCompra.DataSource = null;
                this.nudPrecoEmbalagem.Value = 0;
                this.lblQuantidadeTotal.Text = string.Empty;
                this.lblCustoTotalItem.Text = string.Empty;
                this.lblMargemLucro.Text = string.Empty;
                this.nudDescontoItem.Value = 0;
                this.nudICMSItem.Value = 0;
                this.nudSubstituicaoItem.Value = 0;
                this.nudIPIItem.Value = 0;
                this.lblQtdeMultiploCompra.Text = string.Empty;
                this.lblCustoUnitario.Text = "R$ 0,00";
                this.lblPrecoFabrica.Text = "R$ 0,00";
                this.lblCustoReposicao.Text = "R$ 0,00";
                this.lblUltimoCusto.Text = "R$ 0,00";
                this.lblPrecoVenda.Text = "R$ 0,00";
                this.dgvPreDistribuicao.DataSource = this.dtsPropriedades.Tables["Pre_Distribuicao"].Select("Peca_ID = " + this.objCodigoMercadocar.Peca_ID);
                this.chkDistribuirTotalmenteParaLojas.Checked = false;

                this.Colorir_Checkbox();
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                this.Adicionar_Remover_Handler_Tab_Itens(false);

                this.Adicionar_Remover_Handler_Tab_Itens(true);
                this.Adicionar_Remover_Handler_Grid_Distribuicao(true);
            }
        }

        private void Exibir_Caption_Origem_Pedido()
        {
            try
            {
                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Tipo_Origem_ID"].ToInteger() == Enumerados.Origem_Pedido_Compras.Mapa_de_Cotacao.ToInteger())
                {
                    if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() == Mercadocar.Enumerados.Status_Pedido_Compra.Parcial.ToInteger())
                    {
                        this.tsmGerar_Mapa_Saldo.Text = "Gerar Mapa de Saldo";
                        this.tsmGerar_Mapa_Saldo.Enabled = this.blnPermissaoGerarMapaCotacao;
                        this.tsmOrigem.Enabled = this.blnPermissaoPropriedadeMapa;
                    }
                    else if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() == Mercadocar.Enumerados.Status_Pedido_Compra.Pendente_de_2_Preco.ToInteger())
                    {
                        this.tsmGerar_Mapa_Saldo.Text = "Abrir Mapa de Saldo";
                        this.tsmGerar_Mapa_Saldo.Enabled = this.blnPermissaoPropriedadeMapa;
                        this.tsmOrigem.Enabled = this.blnPermissaoPropriedadeMapa;
                    }
                }

                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Tipo_Origem_ID"].ToInteger() == Enumerados.Origem_Pedido_Compras.Mapa_de_Cotacao_Novo.ToInteger())
                {
                    if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() == Mercadocar.Enumerados.Status_Pedido_Compra.Parcial.ToInteger())
                    {
                        this.tsmGerar_Mapa_Saldo.Text = "Gerar Mapa de Saldo";
                        this.tsmGerar_Mapa_Saldo.Enabled = this.blnPermissaoGerarMapaCotacao;
                        this.tsmOrigem.Enabled = this.blnPermissaoPropriedadeMapa;
                    }
                    else if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() == Mercadocar.Enumerados.Status_Pedido_Compra.Pendente_de_2_Preco.ToInteger())
                    {
                        this.tsmGerar_Mapa_Saldo.Text = "Abrir Mapa de Saldo";
                        this.tsmGerar_Mapa_Saldo.Enabled = this.blnPermissaoPropriedadeMapa;
                        this.tsmOrigem.Enabled = this.blnPermissaoPropriedadeMapa;
                    }
                    else
                    {
                        this.tsmOrigem.Enabled = this.blnPermissaoPropriedadeMapa;
                    }
                }

                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Tipo_Origem_ID"].ToInteger() == Enumerados.Origem_Pedido_Compras.Duracao_de_Estoque.ToInteger())
                {
                    if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() == Mercadocar.Enumerados.Status_Pedido_Compra.Parcial.ToInteger())
                    {
                        this.tsmGerar_Mapa_Saldo.Text = "Gerar Mapa de Saldo";
                        this.tsmGerar_Mapa_Saldo.Enabled = this.blnPermissaoGerarMapaCotacao;
                        this.tsmOrigem.Enabled = false;
                    }
                    else if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() == Mercadocar.Enumerados.Status_Pedido_Compra.Pendente_de_2_Preco.ToInteger())
                    {
                        this.tsmGerar_Mapa_Saldo.Text = "Abrir Mapa de Saldo";
                        this.tsmGerar_Mapa_Saldo.Enabled = this.blnPermissaoPropriedadeMapa;
                        this.tsmOrigem.Enabled = false;
                    }
                    this.btnOrigemPedidoADE.Visible = true;
                    this.btnOrigemPedidoADE.Enabled = this.blnPermissaoPropriedadeADE;
                }

                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Tipo_Origem_ID"].ToInteger() == Enumerados.Origem_Pedido_Compras.Duracao_de_Estoque_Novo.ToInteger())
                {
                    if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() == Mercadocar.Enumerados.Status_Pedido_Compra.Parcial.ToInteger())
                    {
                        this.tsmGerar_Mapa_Saldo.Text = "Gerar Mapa de Saldo";
                        this.tsmGerar_Mapa_Saldo.Enabled = this.blnPermissaoGerarMapaCotacao;
                        this.tsmOrigem.Enabled = false;
                    }
                    else if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() == Mercadocar.Enumerados.Status_Pedido_Compra.Pendente_de_2_Preco.ToInteger())
                    {
                        this.tsmGerar_Mapa_Saldo.Text = "Abrir Mapa de Saldo";
                        this.tsmGerar_Mapa_Saldo.Enabled = this.blnPermissaoPropriedadeMapa;
                        this.tsmOrigem.Enabled = false;
                    }
                    this.btnOrigemPedidoADE.Visible = true;
                    this.btnOrigemPedidoADE.Enabled = this.blnPermissaoPropriedadeADE;
                }
                this.btnMapaCotacao.Visible = this.tsmGerar_Mapa_Saldo.Enabled == true || this.tsmOrigem.Enabled == true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Validar_Pre_Distribuicao(int intValorAnterior, int intValorAtual, bool blnExibirMensagem)
        {
            try
            {
                int intValorMaximo = this.qtdeTotalPeca.ToInteger();

                Int32 intQuantidade = this.Quantidade_Total_Distribuida();

                intQuantidade -= intValorAnterior;
                intQuantidade += intValorAtual;

                if (intQuantidade > intValorMaximo)
                {
                    if (blnExibirMensagem)
                    {
                        MessageBox.Show("A quantidade total distribuida não pode ser maior que a quantidade comprada.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        DataGridViewRow dgrPreDistribuicao = this.dgvPreDistribuicao.CurrentRow;
                        dgrPreDistribuicao.Cells["Pre_Distribuicao_Qtde"].Value = 0;
                        this.nudQtdeItem.Focus();
                        this.dgvPreDistribuicao.CurrentCell.Value = 0;
                    }

                    return false;
                }

                if (intQuantidade != 0 && this.objCodigoMercadocar.Peca_Qtde_Multipla != 0)
                {
                    if (intQuantidade % Convert.ToDecimal(this.objCodigoMercadocar.Peca_Qtde_Multipla) != 0)
                    {
                        MessageBox.Show("A quantidade informada não é múltipla de: " + this.objCodigoMercadocar.Peca_Qtde_Multipla, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                }

                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private int Quantidade_Total_Distribuida()
        {
            try
            {
                Int32 intQuantidade = 0;

                foreach (DataGridViewRow dgvQuantidadeMaxima in this.dgvPreDistribuicao.Rows)
                {
                    intQuantidade += Convert.ToInt32(Information.IsNumeric(dgvQuantidadeMaxima.Cells["Pre_Distribuicao_Qtde"].Value) ? Convert.ToInt32(dgvQuantidadeMaxima.Cells["Pre_Distribuicao_Qtde"].Value) : 0);
                }
                return intQuantidade;

            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Adicionar_Remover_Handler_Grid_Distribuicao(bool blnAdicionar)
        {
            try
            {
                if (!blnAdicionar)
                {
                    this.dgvPreDistribuicao.CellBeginEdit -= this.Celula_Iniciar_Edicao_dgvPreDistribuicao;
                    this.dgvPreDistribuicao.CellValidating -= this.Celula_Validar_Edicao_dgvPreDistribuicao;
                    this.dgvPreDistribuicao.CellEndEdit -= this.Celula_Finalizar_Edicao_dgvPreDistribuicao;
                    this.dgvPreDistribuicao.KeyDown -= this.Pressionar_Tecla_Grid;
                }
                else
                {
                    this.dgvPreDistribuicao.CellBeginEdit += this.Celula_Iniciar_Edicao_dgvPreDistribuicao;
                    this.dgvPreDistribuicao.CellValidating += this.Celula_Validar_Edicao_dgvPreDistribuicao;
                    this.dgvPreDistribuicao.CellEndEdit += this.Celula_Finalizar_Edicao_dgvPreDistribuicao;
                    this.dgvPreDistribuicao.KeyDown += this.Pressionar_Tecla_Grid;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Validar_Exibicao_Botao_Listagem_Garantia()
        {
            try
            {
                if (this.txtCodigoFornecedor.Text != string.Empty)
                {
                    this.btnListagemGarantia.Visible = true;
                    this.btnListagemGarantia.Enabled = this.blnPermissaoBotaoListagemGarantia;
                }
                else
                {
                    this.btnListagemGarantia.Visible = false;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Validar_Quantidade_Informada()
        {
            try
            {
                DataRow dtrItem = ((DataRowView)this.dgvPreDistribuicao.CurrentRow.DataBoundItem).Row;
                int intQtdeMax = this.nudQtdeItem.Value.ToInteger();

                int intQtdeConferida = 0;
                int.TryParse(dtrItem["Pre_Distribuicao_Qtde"].ToString(), out intQtdeConferida);

                if (intQtdeConferida > intQtdeMax)
                {
                    return true;
                }
                else if (intQtdeConferida == intQtdeMax && this.dgvPreDistribuicao.CurrentCell.Value.ToString() == string.Empty)
                {
                    return false;
                }

                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Verificar_Necessidade_Definir_Distribuicao(Int32 intIDPeca, bool blnExibirMensagem)
        {
            try
            {
                if (DivUtil.Valida_Loja_Tipo_CD(this.cboLojaDestino.SelectedValue.DefaultString()))
                {
                    if (this.dtsResumoPecaPedidoCompra == null)
                    {
                        return false;
                    }
                    if (this.dtsResumoPecaPedidoCompra.Tables.Count > 0)
                    {
                        DataRow[] dtrDados = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Select("Peca_ID = " + intIDPeca);

                        if (dtrDados.Length > 0)
                        {
                            Int32 intResultado = this.Verificar_Existencia_Pre_Definicao();
                            String strMensagem = string.Empty;

                            if (Convert.ToInt32(dtrDados[0]["Solicitar_Distribuicao"]) == 1 && (Convert.ToInt32(this.qtdeTotalPeca) == 0 && intResultado == 0) &&
                                this.objGridBotaoItens.Botao_Propriedade_Alterar.Enabled == false)
                            {
                                return true;
                            }

                            if (Convert.ToInt32(dtrDados[0]["Solicitar_Distribuicao"]) == 1 && (Convert.ToInt32(this.qtdeTotalPeca) > 0 && intResultado == 0) &&
                                this.objGridBotaoItens.Botao_Propriedade_Alterar.Enabled == true)
                            {
                                return true;
                            }

                            if (intResultado > 0)
                            {
                                if (intResultado != Convert.ToInt32(this.qtdeTotalPeca))
                                {
                                    strMensagem = "Este produto deve ter sua distribuição prévia definida.";
                                }
                            }

                            if (Convert.ToInt32(dtrDados[0]["Solicitar_Distribuicao"]) == 1 && (intResultado != Convert.ToInt32(this.qtdeTotalPeca) && this.blnAlterarItem == false))
                            {
                                strMensagem = "Este produto deve ter sua distribuição prévia definida.";
                            }

                            if (Convert.ToInt32(dtrDados[0]["Solicitar_Distribuicao"]) == 1 && (Convert.ToInt32(this.qtdeTotalPeca) == 0 && intResultado == 0) &&
                                this.objGridBotaoItens.Botao_Propriedade_Alterar.Enabled == true)
                            {
                                strMensagem = "Este produto deve ter sua distribuição prévia definida.";
                            }

                            if (blnExibirMensagem == false && strMensagem.IsNotNullOrEmpty())
                            {
                                return true;
                            }
                            else if (blnExibirMensagem == true && strMensagem.IsNotNullOrEmpty())
                            {
                                MessageBox.Show(strMensagem, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return true;
                            }
                        }
                    }
                }
                return false;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private Int32 Verificar_Existencia_Pre_Definicao()
        {
            try
            {
                Int32 intQuantidadeDistribuida = 0;
                if (DivUtil.Valida_Loja_Tipo_CD(this.cboLojaDestino.SelectedValue.DefaultString()))
                {
                    foreach (DataGridViewRow dtrItem in this.dgvPreDistribuicao.Rows)
                    {
                        if (dtrItem.Cells["Pre_Distribuicao_Qtde"].Value == System.DBNull.Value)
                        {
                            dtrItem.Cells["Pre_Distribuicao_Qtde"].Value = 0;
                        }
                        if (Convert.ToInt32(dtrItem.Cells["Pre_Distribuicao_Qtde"].Value) > 0)
                        {
                            intQuantidadeDistribuida += Convert.ToInt32(dtrItem.Cells["Pre_Distribuicao_Qtde"].Value);
                            this.Habilitar_Desabilitar_Edicao_Distribuicao(this.Verificar_Necessidade_De_Distribuicao_Peca_Inclusao());
                        }
                    }
                }
                return intQuantidadeDistribuida;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Consultar_Condicao_Pagamento_Por_Codigo()
        {
            try
            {
                Condicao_Pagamento_CTBUS busCondicaoPagamentoCT = new Condicao_Pagamento_CTBUS();
                this.dtsCondicaoPagamento = busCondicaoPagamentoCT.Consultar_Data_Set_Condicao_Pagamento_Por_Codigo(this.txtCodigoCondicaoPagamento.Text);

                if (this.dtsCondicaoPagamento.Tables["Condicao_Pagamento_CT"].Rows.Count == 0)
                {
                    MessageBox.Show("Condição de pagamento não encontrada.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Condicao_Pagamento_CT_ID"] = 0;
                    this.txtCodigoCondicaoPagamento.Text = string.Empty;
                    this.lblDescricaoCondicaoPagamento.Text = string.Empty;
                    this.txtCodigoCondicaoPagamento.Focus();
                }
                else
                {
                    this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Condicao_Pagamento_CT_ID"] = this.dtsCondicaoPagamento.Tables["Condicao_Pagamento_CT"].Rows[0]["Condicao_Pagamento_CT_ID"].ToInteger();
                    this.txtCodigoCondicaoPagamento.Text = this.dtsCondicaoPagamento.Tables["Condicao_Pagamento_CT"].Rows[0]["Condicao_Pagamento_CT_CD"].ToString();
                    this.lblDescricaoCondicaoPagamento.Text = this.dtsCondicaoPagamento.Tables["Condicao_Pagamento_CT"].Rows[0]["Condicao_Pagamento_CT_DS"].ToString();
                }
                this.Verificar_Mudancas();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Incluir_Capa_Pedido()
        {
            try
            {
                DataRow dtrCapa = this.dtsPropriedades.Tables["Pedido_Compra_CT"].NewRow();
                dtrCapa["Loja_Origem_ID"] = ((LojasDO)Root.Loja_Ativa_NEW).ID;
                dtrCapa["Loja_Faturamento_ID"] = this.cboLojaFaturamento.SelectedValue;
                dtrCapa["Loja_Destino_ID"] = this.cboLojaDestino.SelectedValue;
                dtrCapa["Fornecedor_ID"] = dtrCapa["Fornecedor_ID"];
                dtrCapa["Enum_Status_ID"] = Enumerados.Status_Pedido_Compra.Pendente_de_Autorizacao.ToInteger();
                dtrCapa["Usuario_Geracao_ID"] = ((UsuarioDO)Root.Funcionalidades.Usuario_Ativo).ID;
                dtrCapa["Usuario_Comprador_ID"] = this.cboComprador.SelectedValue;
                dtrCapa["Enum_Tipo_ID"] = Mercadocar.Enumerados.Tipo_Pedido.Pedido.ToInteger();
                dtrCapa["Enum_Tipo_Origem_ID"] = Enumerados.Origem_Pedido_Compras.Pedido_de_Compras.ToInteger();
                dtrCapa["Objeto_Origem_ID"] = 0;
                dtrCapa["Pedido_Compra_CT_Saldo_Origem_ID"] = 0;
                dtrCapa["Pedido_Compra_CT_Vendedor"] = this.txtVendedor.Text;
                dtrCapa["Pedido_Compra_CT_Data_Geracao"] = new DateTime(1900, 1, 1);
                dtrCapa["Pedido_Compra_CT_Data_Prevista"] = new DateTime(1900, 1, 1);
                dtrCapa["Pedido_Compra_CT_Desconto"] = this.nudDescontoPedido.Value.ToFormatDecimal();
                dtrCapa["Pedido_Compra_CT_IPI"] = this.nudIPIPedido.Value.ToFormatDecimal();
                dtrCapa["Pedido_Compra_CT_Substituicao"] = this.nudSubstituicaoPedido.Value;
                dtrCapa["Pedido_Compra_CT_Obs"] = this.txtObservacoes.Text;
                dtrCapa["Pedido_Compra_CT_Cobranca_Fornecedor"] = this.txtCobrancaFornecedor.Text;
                dtrCapa["Pedido_Compra_CT_Considerar_IPI"] = 0;
                dtrCapa["Forn_IsOptanteSimples"] = false;
                dtrCapa["Pedido_Compra_CT_Remover_Impostos"] = 0;
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows.Add(dtrCapa);
                this.dtsPropriedadesOriginal = this.dtsPropriedades.Copy();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Incluir_Item()
        {
            try
            {
                DataRow dtrItem = null;

                dtrItem = this.dtsPropriedades.Tables["Pedido_Compra_IT"].NewRow();
                dtrItem["Pedido_Compra_IT_Sequencia"] = this.Sequencia_Peca(this.objCodigoMercadocar.Peca_ID);
                dtrItem["Cod_Mercadocar"] = this.objCodigoMercadocar.Codigo_Mercadocar;
                dtrItem["Pedido_Compra_IT_Quantidade"] = this.nudQtdeItem.Value;
                dtrItem["Peca_Embalagem_Descricao"] = this.cboEmbalagemCompra.Text;
                dtrItem["Pedido_Compra_IT_Custo_Compra"] = this.nudPrecoEmbalagem.Value;
                dtrItem["Pedido_Compra_IT_Desconto"] = this.nudDescontoItem.Value;
                Pedido_CompraBUS busPedidoCompra = new Pedido_CompraBUS();
                dtrItem["Pedido_Compra_IT_Valor_Desconto"] = busPedidoCompra.Calcular_Valor_Desconto_Item(this.nudPrecoEmbalagem.Value, this.nudDescontoItem.Value);
                dtrItem["Pedido_Compra_IT_ICMS"] = this.nudICMSItem.Value;
                dtrItem["Pedido_Compra_IT_Substituicao"] = this.nudSubstituicaoItem.Value;
                dtrItem["Pedido_Compra_IT_Imposto"] = this.nudIPIItem.Value;
                dtrItem["Peca_Margem_Lucro"] = this.lblMargemLucro.Text.ToDecimal();
                dtrItem["Custo_Reposicao"] = decimal.Parse(this.lblCustoReposicao.Text.Replace("R$ ", string.Empty));
                dtrItem["Preco_Fabrica"] = decimal.Parse(this.lblPrecoFabrica.Text.Replace("R$ ", string.Empty));
                dtrItem["Ultimo_Custo"] = decimal.Parse(this.lblUltimoCusto.Text.Replace("R$ ", string.Empty));
                dtrItem["Preco_Venda"] = decimal.Parse(this.lblPrecoVenda.Text.Replace("R$ ", string.Empty));
                dtrItem["Parcialmente_Recebido"] = string.Empty;
                dtrItem["Pedido_Compra_IT_ID"] = 0;
                dtrItem["Pedido_Compra_CT_ID"] = 0;
                dtrItem["Peca_ID"] = this.objCodigoMercadocar.Peca_ID;
                dtrItem["Fabricante_CD"] = this.objCodigoMercadocar.Fabricante_CD;
                dtrItem["Produto_CD"] = this.objCodigoMercadocar.Produto_CD;
                dtrItem["Peca_CD"] = this.objCodigoMercadocar.Peca_CD;
                dtrItem["Peca_CdFabricante"] = this.objCodigoMercadocar.Cod_Item_Fabricante;
                dtrItem["Peca_Conv_ID"] = 0;
                dtrItem["Peca_Codigo_Fornecedor_ID"] = this.cboCodigoItemFornecedor.SelectedValue == null ? 0 : this.cboCodigoItemFornecedor.SelectedValue;
                dtrItem["Pedido_Compra_IT_Qtde_Recebida"] = 0;
                dtrItem["Peca_Embalagem_Compra_ID"] = this.cboEmbalagemCompra.SelectedValue;
                dtrItem["Peca_Embalagem_Quantidade"] = this.Retorna_Qtde_Item_Por_Embalagem();
                dtrItem["Enum_Tipo_Embalagem"] = 0;
                dtrItem["Quantidade_Total"] = this.lblQuantidadeTotal.Text.Replace(".", string.Empty);
                dtrItem["Pedido_Compra_IT_Custo_Unitario"] = this.lblCustoUnitario.Text.Replace("R$", string.Empty).ToDecimal();
                dtrItem["Pedido_Compra_IT_Custo_Efetivo"] = 0;
                dtrItem["Fabricante_NmFantasia"] = this.objCodigoMercadocar.Fabricante_NmFantasia;
                dtrItem["Produto_DS"] = this.objCodigoMercadocar.Produto_Ds;
                dtrItem["Peca_DsTecnica"] = this.objCodigoMercadocar.Peca_DsTecnica;
                dtrItem["Quantidade_Recebida"] = 0;
                dtrItem["Fabricante_ID"] = this.objCodigoMercadocar.Fabricante_ID;
                dtrItem["Produto_ID"] = this.objCodigoMercadocar.Produto_ID;
                dtrItem["Usuario_Ultima_Alteracao_ID"] = ((UsuarioDO)Root.Funcionalidades.Usuario_Ativo).ID;
                dtrItem["Custo_Reposicao"] = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Custo_Reposicao"].ToDecimal();
                dtrItem["Solicitar_Distribuicao"] = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Solicitar_Distribuicao"];
                dtrItem["Ultimo_Custo"] = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Ultimo_Custo"].ToDecimal();
                dtrItem["Comissao_ID"] = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Comissao_ID"].ToInteger();
                dtrItem["Peca_TVA"] = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_TVA"].ToDecimal();
                dtrItem["Pedido_Compra_IT_Remover_Impostos"] = this.chkRemoverImpostosItens.Checked;
                dtrItem["Pedido_Compra_IT_Considerar_IPI"] = 0;
                dtrItem["QTDE_Itens_No_Pre_Recebimento"] = 0;
                dtrItem["Peca_Qtde_Multipla_Compra"] = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_Qtde_Multipla_Compra"].ToInteger();
                dtrItem["Venda_Media_Total"] = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Venda_Media_Total"].ToDecimal();
                dtrItem["Estoque_Total"] = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Estoque_Total"].ToInteger();
                dtrItem["Valor_Total_Unitario"] = dtrItem["Quantidade_Total"].ToInteger() * dtrItem["Pedido_Compra_IT_Custo_Unitario"].ToDecimal();
                dtrItem["Valor_Total_Compra"] = busPedidoCompra.Calcular_Valor_Total_Compra(dtrItem);
                dtrItem["Pedido_Compra_IT_Enviar_Totalmente_Lojas"] = this.chkDistribuirTotalmenteParaLojas.Checked;

                this.dtsPropriedades.Tables["Pedido_Compra_IT"].Rows.Add(dtrItem);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Definir_Formulario_Estilo()
        {
            try
            {
                Form_Designer.Configurar_Designer_Padrao_MercadoCar(this);

                this.lblTotalPedido.Font = new Font("Microsoft Sans Serif", 14F, FontStyle.Bold, GraphicsUnit.Point, (byte)0);

                Form_Designer.Definir_Imagem_Logo_Pedido_Compras(this.picLogo);
                Form_Designer.Definir_DataGridView_Estilo_Padrao(this.dgvPreDistribuicao);

                Form_Designer.Definir_Botao_Estilo_OK(this.btnOk);
                Form_Designer.Definir_Botao_Estilo_Aplicar(this.btnAplicar);
                Form_Designer.Definir_Botao_Estilo_Cancelar(this.btnCancelar);
                Form_Designer.Definir_Botao_Estilo_Ajuda(this.btnAjuda);
                Form_Designer.Definir_Botao_Estilo_Auditoria(this.btnAuditoria);
                Form_Designer.Definir_Botao_Estilo_Propriedades(this.btnPropriedadesFornecedor);
                Form_Designer.Definir_Botao_Estilo_Pesquisar(this.btnPesquisarFornecedor);
                Form_Designer.Definir_Botao_Estilo_Pesquisar(this.btnPesquisarCondicaoPagamento);
                Form_Designer.Definir_Botao_Estilo_Pesquisar(this.btnPesquisaEncomenda);

                this.btnOk.TextAlign = ContentAlignment.MiddleCenter;
                this.btnOk.ImageAlign = ContentAlignment.MiddleCenter;
                this.btnAplicar.TextAlign = ContentAlignment.MiddleCenter;
                this.btnAplicar.ImageAlign = ContentAlignment.MiddleCenter;
                this.btnCancelar.TextAlign = ContentAlignment.MiddleCenter;
                this.btnCancelar.ImageAlign = ContentAlignment.MiddleCenter;
                this.btnAjuda.TextAlign = ContentAlignment.MiddleCenter;
                this.btnAjuda.ImageAlign = ContentAlignment.MiddleCenter;
                this.gpbPedido.Width = TAMANHO_GRID_PEDIDOS_ABA_GERAL;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void Verificar_Mudancas()
        {
            try
            {
                this.btnAplicar.Enabled = this.dtsPropriedades.GetXml() != this.dtsPropriedadesOriginal.GetXml();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private Int32 Sequencia_Peca(Int32 intIDPeca)
        {
            try
            {
                Int32 intSequencia = 1;

                foreach (DataGridViewRow objItem in this.objGridBotaoItens.DgvPadrao.Rows)
                {
                    if (Convert.ToInt32(objItem.Cells["Peca_ID"].Value) == intIDPeca & Convert.ToInt32(objItem.Cells["Pedido_Compra_IT_Sequencia"].Value) != 0)
                    {
                        return Convert.ToInt32(objItem.Cells["Pedido_Compra_IT_Sequencia"].Value);
                    }
                    else if (Convert.ToInt32(objItem.Cells["Pedido_Compra_IT_Sequencia"].Value) >= intSequencia)
                    {
                        intSequencia = Convert.ToInt32(objItem.Cells["Pedido_Compra_IT_Sequencia"].Value) + 1;
                    }
                }

                return intSequencia;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Preencher_Combo_Loja_De_Faturamento()
        {
            try
            {
                this.Adicionar_Remover_Handler_Tab_Geral(false);

                Utilitario.Preencher_ComboBox_Lojas_Por_Parametro_Opcional(ref this.cboLojaFaturamento, "Compra", "Destino Compra", false, String.Empty, true, (int)Enumerados.Loja.CD_Pirituba);

            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                this.Adicionar_Remover_Handler_Tab_Geral(true);
            }
        }

        private void Preencher_Combo_Loja_De_Destino()
        {
            try
            {
                this.Adicionar_Remover_Handler_Tab_Geral(false);

                Utilitario.Preencher_ComboBox_Lojas_Por_Parametro_Opcional(ref this.cboLojaDestino, "Compra", "Destino Compra", false, String.Empty, true, (int)Enumerados.Loja.CD_Pirituba);

            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                this.Adicionar_Remover_Handler_Tab_Geral(true);
            }
        }

        private void Preencher_Combos()
        {
            try
            {
                this.Adicionar_Remover_Handler_Tab_Geral(false);

                UsuarioBUS busUsuario = new UsuarioBUS();

                this.cboComprador.Items.Clear();
                this.cboComprador.DisplayMember = "Usuario_Nome_Completo";
                this.cboComprador.ValueMember = "Usuario_ID";

                DataTable dttUsuarios = busUsuario.Consultar_DataSet_Usuarios_Por_Funcao("Comprador", 0, Root.AcessoDoServidor.ServidorLocal).Tables[0];

                DataRow dtrTodos = dttUsuarios.NewRow();
                dtrTodos["Usuario_ID"] = 0;
                dtrTodos["Usuario_Nome_Completo"] = "Todos";

                dttUsuarios.Rows.InsertAt(dtrTodos, 0);

                this.cboComprador.DataSource = dttUsuarios;

                if (dttUsuarios.Select("Usuario_ID = " + ((UsuarioDO)Root.Funcionalidades.Usuario_Ativo).ID).Length > 0)
                {
                    this.cboComprador.SelectedValue = ((UsuarioDO)Root.Funcionalidades.Usuario_Ativo).ID;
                }
                else
                {
                    this.cboComprador.SelectedValue = 0;
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                this.Adicionar_Remover_Handler_Tab_Geral(true);
            }
        }

        private void Preencher_Propriedade()
        {
            try
            {
                if (this.tbcHerdado.SelectedTab == this.tbpItensDoPedido)
                {
                    this.Adicionar_Remover_Handler_Grid_Distribuicao(false);
                    this.Adicionar_Remover_Handler_Tab_Itens(false);

                    this.objCodigoMercadocar.Carregar_Peca_ID -= this.Carregar_Peca_ID_Cod_Mercadocar;
                    this.Preencher_Campos_Itens();
                    this.Preencher_Valor_Total_Pedido();
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                this.Adicionar_Remover_Handler_Grid_Distribuicao(true);
                this.Adicionar_Remover_Handler_Tab_Itens(true);

                this.objCodigoMercadocar.Carregar_Peca_ID -= this.Carregar_Peca_ID_Cod_Mercadocar;
                this.objCodigoMercadocar.Carregar_Peca_ID += this.Carregar_Peca_ID_Cod_Mercadocar;
            }
        }

        private void Preencher_Valor_Total_Pedido()
        {
            try
            {
                this.lblTotalPedidoSemDesconto.Text = this.Calcular_Valor_Total_Pedido_Sem_Desconto().ToString("#,##0.00");
                this.lblTotalDesconto.Text = this.Calcular_Valor_Total_Desconto_Pedido().ToString("#,##0.00");
                this.lblTotalImposto.Text = this.Calcular_Valor_Total_Impostos().ToString("#,##0.00");
                this.lblTotalPedido.Text = this.Calcular_Valor_Total_Pedido_Com_Desconto().ToString("#,##0.00");
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Preencher_Campos_Itens()
        {
            try
            {
                if (this.objGridBotaoItens.DgvPadrao.RowCount == 0 || this.objGridBotaoItens.DgvPadrao.SelectedRows.Count == 0)
                {
                    return;
                }

                DataRow dtrItemGrid = ((DataRowView)this.objGridBotaoItens.DgvPadrao.CurrentRow.DataBoundItem).Row;

                this.objCodigoMercadocar.Text_Fabricante.Text = dtrItemGrid["Fabricante_Cd"].ToString();
                this.objCodigoMercadocar.Fabricante_NmFantasia = dtrItemGrid["Fabricante_NmFantasia"].ToString();
                this.objCodigoMercadocar.Text_CodigoItemFabricante.Text = dtrItemGrid["Peca_CDFabricante"].ToString();
                this.lblDescricaoFabricante.Text = dtrItemGrid["Fabricante_NmFantasia"].ToString();
                this.objCodigoMercadocar.Text_Produto.Text = dtrItemGrid["Produto_CD"].ToString();
                this.objCodigoMercadocar.Produto_Ds = dtrItemGrid["Produto_DS"].ToString();
                this.lblDescricaoProduto.Text = dtrItemGrid["Produto_DS"].ToString();
                this.objCodigoMercadocar.Text_Peca.Text = dtrItemGrid["Peca_CD"].ToString();
                this.objCodigoMercadocar.Peca_DsTecnica = dtrItemGrid["Peca_DsTecnica"].ToString();
                this.lblDescricaoPeca.Text = dtrItemGrid["Peca_DsTecnica"].ToString();
                this.objCodigoMercadocar.Peca_ID = dtrItemGrid["Peca_ID"].ToInteger();
                this.txtCodigoItemFabricante.Text = dtrItemGrid["Peca_CdFabricante"].ToString();
                this.nudQtdeItem.Value = dtrItemGrid["Pedido_Compra_IT_Quantidade"].ToInteger();
                this.Cria_Colunas_Combo_Embalagem();
                this.Cria_Colunas_Combo_Peca_Codigo_Fornecedor();
                DataTable dttTempEmbalagemCompra = this.dtsPropriedades.Tables["Peca_Embalagem"].Copy();
                dttTempEmbalagemCompra.DefaultView.RowFilter = "Peca_ID = " + dtrItemGrid["Peca_ID"].ToString();
                this.cboEmbalagemCompra.DataSource = dttTempEmbalagemCompra.DefaultView.ToTable();
                if (dtrItemGrid["Peca_Embalagem_Compra_ID"].ToInteger() != 0)
                {
                    this.cboEmbalagemCompra.SelectedValue = dtrItemGrid["Peca_Embalagem_Compra_ID"].ToInteger();
                }
                DataTable dttTempPecaCodigoFornecedor = this.dtsPropriedades.Tables["Peca_Codigo_Fornecedor"].Copy();
                this.Insere_Item_No_Data_Table_Peca_Codigo_Fornecedor(dtrItemGrid, ref dttTempPecaCodigoFornecedor);
                if (dttTempPecaCodigoFornecedor.Rows.Count > 0)
                {
                    dttTempPecaCodigoFornecedor.DefaultView.RowFilter = "Peca_ID = " + dtrItemGrid["Peca_ID"].ToString();
                    this.cboCodigoItemFornecedor.DataSource = dttTempPecaCodigoFornecedor.DefaultView.ToTable();
                }
                this.cboCodigoItemFornecedor.SelectedValue = dtrItemGrid["Peca_Codigo_Fornecedor_ID"].ToInteger();
                this.chkRemoverImpostosItens.Checked = dtrItemGrid["Pedido_Compra_IT_Remover_Impostos"].ToInteger() == 0 ? false : true;
                this.Atualizar_Data_Grid_View_Distribuicao(dtrItemGrid["Peca_ID"].ToInteger());
                this.cboEmbalagemCompra.SelectedValue = dtrItemGrid["Peca_Embalagem_Compra_ID"].ToInteger();
                this.nudPrecoEmbalagem.Value = dtrItemGrid["Pedido_Compra_IT_Custo_Compra"].ToDecimal();
                this.nudDescontoItem.Value = dtrItemGrid["Pedido_Compra_IT_Desconto"].ToDecimal();
                this.nudICMSItem.Value = dtrItemGrid["Pedido_Compra_IT_ICMS"].ToDecimal();
                this.nudSubstituicaoItem.Value = dtrItemGrid["Pedido_Compra_IT_Substituicao"].ToDecimal();
                this.nudIPIItem.Value = dtrItemGrid["Pedido_Compra_IT_Imposto"].ToDecimal();
                this.lblMargemLucro.Text = dtrItemGrid["Peca_Margem_Lucro"].ToDecimal().ToString();
                this.lblQtdeMultiploCompra.Text = dtrItemGrid["Peca_Qtde_Multipla_Compra"].ToString();
                this.lblCustoReposicao.Text = dtrItemGrid["Custo_Reposicao"].DefaultDecimal().ToString("R$ #,##0.00");
                this.lblPrecoFabrica.Text = dtrItemGrid["Preco_Fabrica"].DefaultDecimal().ToString("R$ #,##0.00");
                this.lblUltimoCusto.Text = dtrItemGrid["Ultimo_Custo"].DefaultDecimal().ToString("R$ #,##0.00");
                this.lblPrecoVenda.Text = dtrItemGrid["Preco_Venda"].DefaultDecimal().ToString("R$ #,##0.00");

                if (dtrItemGrid["Pedido_Compra_IT_Enviar_Totalmente_Lojas"] == DBNull.Value)
                {
                    PecaBUS busPeca = new PecaBUS();
                    PecaDO dtoPeca = busPeca.Selecionar(dtrItemGrid["Peca_ID"].DefaultInteger());

                    this.chkDistribuirTotalmenteParaLojas.Checked = dtoPeca.Peca_Estoque_Totalmente_Lojas;
                }
                else
                {
                    this.chkDistribuirTotalmenteParaLojas.Checked = dtrItemGrid["Pedido_Compra_IT_Enviar_Totalmente_Lojas"].DefaultBool();
                }

                this.Colorir_Checkbox();

                this.Redimencionar_Data_Grid_Distribuicao();

                if (this.objGridBotaoItens.DgvPadrao.RowCount == 0)
                {
                    return;
                }

                this.Calcular_Valores_Detalhe_Peca(this.objGridBotaoItens.DgvPadrao.CurrentRow.Cells["Peca_Embalagem_Compra_ID"].Value.ToInteger(),
                                                   this.objGridBotaoItens.DgvPadrao.CurrentRow.Cells["Peca_ID"].Value.ToInteger(), this.chkRemoverImpostosItens.Checked, false);
                this.Habilitar_Edicao_Item_Pedido(false);

                this.Colorir_Checkbox();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Redimencionar_Data_Grid_Distribuicao()
        {
            try
            {
                int intQtdeLinhas = this.dgvPreDistribuicao.RowCount;
                int intAlturaLinha = this.dgvPreDistribuicao.RowTemplate.Height;
                int intAlturaGrid = this.dgvPreDistribuicao.Height;
                int intQtdeLinhasNoGrid = intAlturaGrid / intAlturaLinha;

                if (this.dgvPreDistribuicao.ScrollBars == ScrollBars.Vertical && intQtdeLinhas > intQtdeLinhasNoGrid - 1)
                {
                    this.dgvPreDistribuicao.AutoResizeColumns();
                    this.dgvPreDistribuicao.Columns["Lojas_NM"].Width = this.intColunaLojaNome - 22;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Insere_Item_No_Data_Table_Peca_Codigo_Fornecedor(DataRow dtrItemGrid, ref DataTable dttTempPecaCodigoFornecedor)
        {
            try
            {
                DataRow dtrTempPecaCodigoFornecedor = null;
                if (dttTempPecaCodigoFornecedor.Select("Peca_Codigo_Fornecedor_Codigo = '' ").Length > 0)
                {
                    return;
                }
                dtrTempPecaCodigoFornecedor = dttTempPecaCodigoFornecedor.NewRow();
                dtrTempPecaCodigoFornecedor["Peca_ID"] = dtrItemGrid["Peca_ID"].ToString();
                dtrTempPecaCodigoFornecedor["Peca_Codigo_Fornecedor_ID"] = 0;
                dtrTempPecaCodigoFornecedor["Peca_Codigo_Fornecedor_Codigo"] = string.Empty;
                dttTempPecaCodigoFornecedor.Rows.InsertAt(dtrTempPecaCodigoFornecedor, 0);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Atualizar_Data_Grid_View_Distribuicao(int intPecaID)
        {
            try
            {
                if (this.dtsResumoPecaPedidoCompra != null)
                {
                    // Só atualiza a quantidade a peça do resumo for igual a peça do parametro
                    if (this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_ID"].ToInteger() == intPecaID)
                    {
                        foreach (DataGridViewRow dtvItem in this.dgvPreDistribuicao.Rows)
                        {
                            if (this.dtsResumoPecaPedidoCompra.Tables["Pre_Distribuicao"].Select("Peca_ID = " + dtvItem.Cells["Peca_ID"].Value.ToString() +
                                " AND Loja_ID = " + dtvItem.Cells["Loja_ID"].Value.ToString() + " AND Enum_Tipo_ID = " + Mercadocar.Enumerados.Origem_Pre_Distribuicao.Pedido_Compra.ToInteger()).Length > 0)
                            {
                                DataRow dtrItem = this.dtsResumoPecaPedidoCompra.Tables["Pre_Distribuicao"].Select(
                                    "Peca_ID = " + dtvItem.Cells["Peca_ID"].Value.ToString() +
                                    " AND Loja_ID = " + dtvItem.Cells["Loja_ID"].Value.ToString() +
                                    " AND Enum_Tipo_ID = " + Mercadocar.Enumerados.Origem_Pre_Distribuicao.Pedido_Compra.ToInteger())[0];

                                dtrItem["Pre_Distribuicao_Qtde"] = dtvItem.Cells["Pre_Distribuicao_Qtde"].Value;
                            }
                        }
                    }
                }

                if (this.objGridBotaoItens.Verificar_Formulario_Em_Edicao())
                {
                    this.Atualizar_Data_Table_Pre_Distribuicao(intPecaID, this.nudQtdeItem.Value.ToInteger());
                }

                DataTable dttTempPreDistribuicao = this.dtsPropriedades.Tables["Pre_Distribuicao"].Copy();

                if (this.objGridBotaoItens.Verificar_Formulario_Em_Edicao())
                {
                    foreach (DataRow dtrItemTemp in dttTempPreDistribuicao.Rows)
                    {
                        if (dtrItemTemp["Peca_ID"].ToInteger() == 0 && dtrItemTemp["Pre_Distribuicao_Qtde"].ToInteger() == 0 && (
                            dttTempPreDistribuicao.Select("Loja_ID = " + dtrItemTemp["Loja_ID"].ToString() + " AND Peca_ID = " + intPecaID.ToString() +
                            " AND Enum_Tipo_ID = " + Mercadocar.Enumerados.Origem_Pre_Distribuicao.Pedido_Compra.ToInteger()).Length == 0))
                        {
                            dtrItemTemp["Peca_ID"] = intPecaID;
                            dtrItemTemp["Enum_Tipo_ID"] = Mercadocar.Enumerados.Origem_Pre_Distribuicao.Pedido_Compra.ToInteger();
                            dtrItemTemp["Lojas_Ordenacao"] = dtrItemTemp["Lojas_Ordenacao"];
                        }
                    }
                }

                dttTempPreDistribuicao.DefaultView.RowFilter = "Peca_ID = " + intPecaID.ToString() + " AND Enum_Tipo_ID = " + Mercadocar.Enumerados.Origem_Pre_Distribuicao.Pedido_Compra.ToInteger();
                DataView dtvPreDistribuicao = dttTempPreDistribuicao.DefaultView;
                this.Finalizar_Edicao_Grid_Distribuicao();
                dtvPreDistribuicao.Sort = "Lojas_Ordenacao ASC";

                this.dgvPreDistribuicao.DataSource = dtvPreDistribuicao.ToTable();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Finalizar_Edicao_Grid_Distribuicao()
        {
            try
            {
                if (!this.dgvPreDistribuicao.EndEdit())
                {
                    this.dgvPreDistribuicao.EndEdit();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Verificar_Cadastro_Valido()
        {
            try
            {
                if (!this.Validar_Incluir_Item())
                {
                    return false;
                }

                if (!this.Validar_Alteracao_Quantidade_Recebida(this.objCodigoMercadocar.Peca_ID, this.nudQtdeItem.Value.ToInteger()))
                {
                    this.nudQtdeItem.Focus();
                    return false;
                }

                if (this.objCodigoMercadocar.Text_Fabricante.Text.Trim() == String.Empty && this.objCodigoMercadocar.Text_Produto.Text.Trim() == String.Empty &&
                    this.objCodigoMercadocar.Text_Peca.Text.Trim() == String.Empty)
                {
                    MessageBox.Show("O Preenchimento do item é obrigatório.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.objCodigoMercadocar.Text_Fabricante.Focus();
                    return false;
                }

                if (this.objCodigoMercadocar.Peca_ID == 0 && this.objCodigoMercadocar.Text_Fabricante.Text.Trim() != String.Empty &&
                    this.objCodigoMercadocar.Text_Produto.Text.Trim() != String.Empty && this.objCodigoMercadocar.Text_Peca.Text.Trim() != String.Empty)
                {
                    this.objCodigoMercadocar.Carregar_Peca_Por_Codigo_Mercadocar(
                        this.objCodigoMercadocar.Text_Fabricante.Text.Trim(), this.objCodigoMercadocar.Text_Produto.Text.Trim(), this.objCodigoMercadocar.Text_Peca.Text.Trim());
                }

                this.Habilitar_Edicao_Item_Pedido(false);
                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Validar_Incluir_Item()
        {
            try
            {
                if (this.objCodigoMercadocar.Text_Peca.Text.Trim() != string.Empty &&
                    (this.objCodigoMercadocar.Text_Fabricante.Text.Trim() == string.Empty ||
                    this.objCodigoMercadocar.Text_Produto.Text.Trim() == string.Empty))
                {
                    MessageBox.Show("Preencha corretamente as informações da Peça.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }

                if (this.nudQtdeItem.Value == 0)
                {
                    MessageBox.Show("A quantidade de embalagens deve ser maior que zero.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.nudQtdeItem.Focus();
                    return false;
                }

                if (this.nudPrecoEmbalagem.Value == 0)
                {
                    MessageBox.Show("O custo de embalagem deve ser maior que zero.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.nudPrecoEmbalagem.Focus();
                    return false;
                }

                if (this.cboEmbalagemCompra.SelectedIndex == -1)
                {
                    MessageBox.Show("Selecione uma embalagem de compra antes de incluir.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.cboEmbalagemCompra.Focus();
                    return false;
                }

                Int32 intPecaQtdeMultiplaCompra = 0;
                int intPecaEmbalagemQtde = 0;

                if (this.dtsResumoPecaPedidoCompra != null)
                {
                    intPecaQtdeMultiplaCompra = this.dtsResumoPecaPedidoCompra.Tables["Peca"].Rows[0]["Peca_Qtde_Multipla_Compra"].ToInteger();
                    intPecaEmbalagemQtde = this.objCodigoMercadocar.Quantidade_Embalagem.ToInteger();
                }
                else
                {
                    intPecaQtdeMultiplaCompra = this.objGridBotaoItens.DgvPadrao.CurrentRow.Cells["Peca_Qtde_Multipla_Compra"].Value.ToInteger();
                    intPecaEmbalagemQtde = this.objGridBotaoItens.DgvPadrao.CurrentRow.Cells["Peca_Embalagem_Quantidade"].Value.ToInteger();
                }

                if (intPecaEmbalagemQtde == 0)
                {
                    intPecaEmbalagemQtde = 1;
                }

                if (!this.Verificar_Multiplo_Compra_Diferente(intPecaEmbalagemQtde, this.nudQtdeItem.Value.ToInteger(), intPecaQtdeMultiplaCompra) && !this.blnExibirMenssagemMultiploCompra)
                {
                    MessageBox.Show("A quantidade informada não respeita o multiplo de compra!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.blnExibirMenssagemMultiploCompra = true;
                }

                Int32 intQtdeDistribuida = 0;

                foreach (DataGridViewRow objItemDistribuicao in this.dgvPreDistribuicao.Rows)
                {
                    intQtdeDistribuida += objItemDistribuicao.Cells["Pre_Distribuicao_Qtde"].Value.ToString() == string.Empty ? 0 : objItemDistribuicao.Cells["Pre_Distribuicao_Qtde"].Value.ToInteger();
                }

                if (this.Verificar_Necessidade_Definir_Distribuicao(this.objCodigoMercadocar.Peca_ID, true) && DivUtil.Valida_Loja_Tipo_CD(this.cboLojaDestino.SelectedValue.DefaultString()))
                {
                    this.dgvPreDistribuicao.ReadOnly = true;

                    this.Habilitar_Desabilitar_Edicao_Distribuicao(this.Verificar_Necessidade_De_Distribuicao_Peca_Inclusao());
                    this.Adicionar_Remover_Handler_Tab_Itens(false);
                    this.dgvPreDistribuicao.Focus();
                    return false;
                }

                if (this.blnAlterarItem && intQtdeDistribuida != this.qtdeTotalPeca && (intQtdeDistribuida != 0 || this.objGridBotaoItens.DgvPadrao.SelectedRows[0].Cells["Solicitar_Distribuicao"].Value.ToInteger() != 0))
                {
                    MessageBox.Show("Não foi realizado corretamente a Pré Distribuição.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.dgvPreDistribuicao.Focus();
                    return false;
                }


                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Validar_Alteracao_Quantidade_Recebida(int intPecaID, int intQtdeAlterada)
        {
            try
            {
                foreach (DataGridViewRow dgrLinha in this.objGridBotaoItens.DgvPadrao.Rows)
                {
                    if (dgrLinha.Cells["Peca_ID"].Value.DefaultInteger() == intPecaID)
                    {
                        if (intQtdeAlterada < dgrLinha.Cells["Quantidade_Recebida"].Value.DefaultInteger())
                        {
                            MessageBox.Show("A quantidade da peça não pode ser menor que a quantidade recebida!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                    }
                }

                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Verificar_Multiplo_Compra_Diferente(Int32 intQtdeEmbalagem, Int32 intQtdeItem, Int32 intQtdeMultiploCompra)
        {
            try
            {
                if (intQtdeMultiploCompra == 0)
                {
                    intQtdeMultiploCompra = 1;
                }

                if ((intQtdeEmbalagem * intQtdeItem) % intQtdeMultiploCompra == 0)
                {
                    return true;
                }
                return false;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Verifica_Reajuste()
        {
            try
            {
                foreach (DataGridViewRow dgvItem in this.objGridBotaoItens.DgvPadrao.Rows)
                {
                    decimal dcmCustoUnitario = 0;
                    decimal dcmPrecoVenda = 0;
                    decimal dcmCustoXMargem = 0;

                    if (this.dtsPropriedades.Tables["Pedido_Compra_IT"].Rows.Count > 0)
                    {
                        DataRow[] dtrDados = this.dtsPropriedades.Tables["Pedido_Compra_IT"].Select("Peca_ID = " + Convert.ToString(dgvItem.Cells["Peca_ID"].Value));

                        if (dtrDados.Length > 0)
                        {
                            decimal dcmSubstituicao = dgvItem.Cells["Pedido_Compra_IT_Substituicao"].Value.ToDecimal();
                            decimal dcmIPI = 0;
                            decimal dcmICMS = dgvItem.Cells["Pedido_Compra_IT_Substituicao"].Value.ToDecimal();

                            dcmIPI = dgvItem.Cells["Pedido_Compra_IT_Imposto"].Value.ToDecimal();

                            // Se for SIMPLES, zerar todos os impostos
                            if (this.chkOptanteSimples.Checked)
                            {
                                dcmIPI = 0;
                                dcmICMS = 0;
                            }

                            Pedido_CompraBUS busPedidoCompra = new Pedido_CompraBUS();
                            if (!dgvItem.Cells["Pedido_Compra_IT_Remover_Impostos"].Value.ToBool())
                            {
                                dcmCustoUnitario = busPedidoCompra.Calcula_Custo_Unitario(
                                                                                          dgvItem.Cells["Pedido_Compra_IT_Custo_Compra"].Value.ToDecimal(),
                                                                                          dgvItem.Cells["Peca_Embalagem_Quantidade"].Value.ToDecimal(),
                                                                                          dgvItem.Cells["Pedido_Compra_IT_Desconto"].Value.ToDecimal(),
                                                                                          dcmIPI,
                                                                                          dcmSubstituicao,
                                                                                          false);
                            }
                            else
                            {
                                dcmCustoUnitario = busPedidoCompra.Remover_Impostos_Custo_Unitario(
                                                                                                   dgvItem.Cells["Pedido_Compra_IT_Custo_Compra"].Value.ToDecimal(),
                                                                                                   dgvItem.Cells["Peca_Embalagem_Quantidade"].Value.ToDecimal(),
                                                                                                   dgvItem.Cells["Pedido_Compra_IT_Desconto"].Value.ToDecimal(),
                                                                                                   dcmIPI,
                                                                                                   dcmSubstituicao,
                                                                                                   dcmICMS);
                            }

                            if (dcmCustoUnitario != 0 & (dcmCustoUnitario <= Convert.ToDecimal(dtrDados[0]["Custo_Reposicao"])))
                            {
                                continue;
                            }

                            dcmPrecoVenda = Convert.ToDecimal(dtrDados[0]["Preco_Venda"]);
                            dcmCustoXMargem = busPedidoCompra.Calcula_Custo_X_Margem(dcmCustoUnitario, dtrDados[0]["Peca_Margem_Lucro"].ToDecimal());
                        }

                        if (Decimal.Round(dcmCustoXMargem, 2) > Decimal.Round(dcmPrecoVenda, 2))
                        {
                            return true;
                        }
                    }
                }

                return false;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Setar_Pedido_Compra_CT_ID()
        {
            try
            {
                this.intPedidoCompraCTID = Convert.ToInt32(this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Pedido_Compra_CT_ID"]);

                this.blnPedidoEmInclusao = false;
                this.blnPedidoEmEdicao = true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Setar_Imagens_Grid()
        {
            try
            {
                Pedido_CompraBUS busPedidoCompra = new Pedido_CompraBUS();
                int intEnumStatusID = this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger();
                if (this.objGridBotaoItens.DgvPadrao.RowCount > 0)
                {
                    foreach (DataGridViewRow dgrItem in this.objGridBotaoItens.DgvPadrao.Rows)
                    {
                        decimal dcmCustoUnitario = 0;
                        decimal dcmIPI = 0;
                        decimal dcmICMS = dgrItem.Cells["Pedido_Compra_IT_ICMS"].Value.ToDecimal();
                        decimal dcmSubstituicao = dgrItem.Cells["Pedido_Compra_IT_Substituicao"].Value.ToDecimal();

                        dcmIPI = dgrItem.Cells["Pedido_Compra_IT_Imposto"].Value.ToDecimal();

                        // Se for SIMPLES, zerar todos os impostos
                        if (this.chkOptanteSimples.Checked)
                        {
                            dcmIPI = 0;
                            dcmICMS = 0;
                        }

                        if (!dgrItem.Cells["Pedido_Compra_IT_Remover_Impostos"].Value.ToBool())
                        {
                            dcmCustoUnitario = busPedidoCompra.Calcula_Custo_Unitario(
                                                                                      dgrItem.Cells["Pedido_Compra_IT_Custo_Compra"].Value.ToDecimal(),
                                                                                      dgrItem.Cells["Peca_Embalagem_Quantidade"].Value.ToDecimal(),
                                                                                      dgrItem.Cells["Pedido_Compra_IT_Desconto"].Value.ToDecimal(),
                                                                                      dcmIPI,
                                                                                      dcmSubstituicao,
                                                                                      false);
                        }
                        else
                        {
                            dcmCustoUnitario = busPedidoCompra.Remover_Impostos_Custo_Unitario(
                                                                                               dgrItem.Cells["Pedido_Compra_IT_Custo_Compra"].Value.ToDecimal(),
                                                                                               dgrItem.Cells["Peca_Embalagem_Quantidade"].Value.ToDecimal(),
                                                                                               dgrItem.Cells["Pedido_Compra_IT_Desconto"].Value.ToDecimal(),
                                                                                               dcmIPI,
                                                                                               dcmSubstituicao,
                                                                                               dcmICMS);
                        }

                        decimal dcmCustoXMargem = busPedidoCompra.Calcula_Custo_X_Margem(dcmCustoUnitario, dgrItem.Cells["Peca_Margem_Lucro"].Value.ToDecimal());
                        bool blnImagemReajuste = (Decimal.Round(dcmCustoXMargem, 2) > dgrItem.Cells["Preco_Venda"].Value.ToDecimal()) & (dcmCustoUnitario > dgrItem.Cells["Custo_Reposicao"].Value.ToDecimal());
                        dgrItem.Cells["Reajustar_Peca"].Value = busPedidoCompra.Setar_Imagem_Item_Pedido(0, 0, blnImagemReajuste == true ? 1 : 3, intEnumStatusID);
                        dgrItem.Cells["Parcialmente_Recebido"].Value = busPedidoCompra.Setar_Imagem_Item_Pedido(dgrItem.Cells["Quantidade_Recebida"].Value.ToInteger() * dgrItem.Cells["Peca_Embalagem_Quantidade"].Value.ToInteger(), dgrItem.Cells["Quantidade_Total"].Value.ToInteger(), 0, intEnumStatusID);
                        Boolean blnDivergenciaQuantidadeEmbalagemCompra = this.Verificar_Multiplo_Compra_Diferente(dgrItem.Cells["Peca_Embalagem_Quantidade"].Value.ToInteger(),
                                                                                                                   dgrItem.Cells["Pedido_Compra_IT_Quantidade"].Value.ToInteger(),
                                                                                                                   dgrItem.Cells["Peca_Qtde_Multipla_Compra"].Value.ToInteger());
                        dgrItem.Cells["Divergencia_Quantidade_Embalagem_Compra"].Value = blnDivergenciaQuantidadeEmbalagemCompra == true ? busPedidoCompra.Setar_Imagem_Item_Pedido(0, 0, 3, intEnumStatusID) : busPedidoCompra.Setar_Imagem_Item_Pedido(0, 0, 2, intEnumStatusID);
                    }
                }
                this.objGridBotaoItens.DgvPadrao.Refresh();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Valida_Pedido_De_Compra()
        {
            try
            {
                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Fornecedor_ID"].ToString().IsNullOrEmpty() ||
                    this.txtCodigoFornecedor.Text == string.Empty)
                {
                    this.tbcHerdado.SelectedTab = this.tbpControlePedido;
                    this.txtCodigoFornecedor.Text = string.Empty;
                    this.txtCodigoFornecedor.Focus();
                    MessageBox.Show("Selecione um Fornecedor para o Pedido de Compra!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }

                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Condicao_Pagamento_CT_ID"].ToString().IsNullOrEmpty())
                {
                    this.tbcHerdado.SelectedTab = this.tbpControlePedido;
                    this.txtCodigoCondicaoPagamento.Text = string.Empty;
                    this.txtCodigoCondicaoPagamento.Focus();
                    MessageBox.Show("Selecione uma Condição de Pagamento para o Pedido de Compra!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }

                if (this.cboComprador.SelectedValue.ToInteger() == 0)
                {
                    MessageBox.Show("Escolha um comprador antes de prosseguir!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.tbcHerdado.SelectedTab = this.tbpControlePedido;
                    this.cboComprador.Focus();
                    return false;
                }

                if (this.dtpDataPrevista.Value.Date < DateTime.Now.Date && this.intPedidoCompraCTID == 0)
                {
                    MessageBox.Show("A data de entrega não pode ser menor que a data atual!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.tbcHerdado.SelectedTab = this.tbpControlePedido;
                    this.dtpDataPrevista.Focus();
                    return false;
                }

                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Valida_Remover_Impostos_Para_Itens()
        {
            try
            {
                bool blnExisteItemMarcado = this.dtsPropriedades.Tables["Pedido_Compra_IT"].Select("Pedido_Compra_IT_Remover_Impostos = 1").Length > 0;
                bool blnExisteItemDesMarcado = this.dtsPropriedades.Tables["Pedido_Compra_IT"].Select("Pedido_Compra_IT_Remover_Impostos = 0").Length > 0;

                if (blnExisteItemMarcado && blnExisteItemDesMarcado)
                {
                    MessageBox.Show("Todos os itens devem estar com a opção (Remover Impostos) marcada ou desmarcada!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.tbcHerdado.SelectedTab = this.tbpItensDoPedido;
                    return false;
                }
                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Tratar_Permissoes()
        {
            try
            {
                this.blnPermissaoAlterar = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, this.Name, Enumerados.Acao_Formulario.Alterar.ToString());

                this.blnPermissaoPropriedadesFornecedor = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, typeof(frmFornecedorGrid).Name, Enumerados.Acao_Formulario.Selecionar.ToString());
                this.blnPermissaoAlterarPedidosComOrigem = this.blnPermissaoAlterar && Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, this.Name, Mercadocar.Enumerados.Acao_Formulario.Alterar_Pedidos_Com_Origem.ToString());

                this.btnConfirmarSaldo.Enabled = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, this.Name, Enumerados.Acao_Formulario.Liberar.ToString());

                this.blnPermissaoAnaliseCusto = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, typeof(frmAnalise_Mercadologica_Propriedades).Name, Enumerados.Acao_Formulario.Habilitar_Opcao_No_Menu_Do_Modulo.ToString());
                this.blnPermissaoAnaliseEstoque = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, typeof(frmAnalise_Mercadologica_Estoque_New).Name, Enumerados.Acao_Formulario.Habilitar_Opcao_No_Menu_Do_Modulo.ToString());
                this.blnPermissaoHistoricoMovimentacao = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, typeof(frmAnalise_Mercadologica_Movimentacao_Diaria).Name, Enumerados.Acao_Formulario.Habilitar_Opcao_No_Menu_Do_Modulo.ToString());
                this.blnPermissaoHistoricoPedidoCompra = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, typeof(frmPedido_Compra_Historico).Name, Enumerados.Acao_Formulario.Habilitar_Opcao_No_Menu_Do_Modulo.ToString());
                this.blnPermissaoBotaoListagemGarantia = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, typeof(frmGarantia_Pedido_Grid).Name, Enumerados.Acao_Formulario.Habilitar_Opcao_No_Menu_Do_Modulo.ToString());

                this.blnPermissaoPropriedadeADE = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, typeof(frmAnalise_Duracao_Estoque_Propriedades).Name, Enumerados.Acao_Formulario.Selecionar.ToString());
                this.blnPermissaoPropriedadeMapa = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, typeof(frmMapa_Cotacao_Propriedades).Name, Enumerados.Acao_Formulario.Selecionar.ToString());
                this.blnPermissaoGerarMapaCotacao = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, typeof(frmMapa_Cotacao_Criacao_Wizard).Name, Mercadocar.Enumerados.Acao_Formulario.Selecionar.ToString());

                this.blnPermissaoDistribuicao = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, this.Name, Enumerados.Acao_Formulario.Distribuicao_Previa.ToString());
                this.blnPermissaoRedistribuicao = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, this.Name, Enumerados.Acao_Formulario.Redefinir_Distribuicao.ToString());

                this.blnPermissaoVisualizarAuditoria = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, this.Name, Enumerados.Acao_Formulario.Visualizar_Historico_De_Auditoria.ToString());

                this.blnPermissaoDistribuirTotalmenteLojas = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, this.Name, Enumerados.Acao_Formulario.Alterar_Distribuicao_Total_Lojas.ToString());
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Habilitar_Desabilitar_Capa()
        {
            try
            {
                bool blnHabilitar = false;
                if (this.intPedidoCompraCTID != 0)
                {
                    if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() != Enumerados.Status_Pedido_Compra.Finalizado.ToInteger())
                    {
                        if (this.Verificar_Pedido_Com_Origem())
                        {
                            blnHabilitar = this.blnPermissaoAlterar && this.blnPermissaoAlterarPedidosComOrigem;
                        }
                        else
                        {
                            blnHabilitar = this.blnPermissaoAlterar;
                        }
                    }
                }
                else
                {
                    blnHabilitar = true;
                }

                this.Habilitar_Desabilitar_Objetos_Capa(blnHabilitar);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Habilitar_Desabilitar_Objetos_Capa(bool blnHabilita)
        {
            try
            {
                // Quando o Pedido for criado na tala antiga e aberto na tela nova o combo de seleção de loja faturamento ficara desabilitado
                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Loja_Faturamento_ID"].ToString().IsNullOrEmpty())
                {
                    this.cboLojaFaturamento.Enabled = false;
                }
                else
                {
                    this.cboLojaFaturamento.Enabled = blnHabilita;
                }

                this.cboLojaDestino.Enabled = blnHabilita;
                this.cboComprador.Enabled = blnHabilita;
                this.txtVendedor.Enabled = blnHabilita;
                this.nudDescontoPedido.Enabled = blnHabilita;
                this.nudSubstituicaoPedido.Enabled = blnHabilita;
                this.nudIPIPedido.Enabled = blnHabilita;
                this.chkRemoverImpostos.Enabled = blnHabilita;
                this.dtpDataPrevista.Enabled = blnHabilita;
                this.txtCodigoFornecedor.Enabled = blnHabilita;
                this.btnPesquisarFornecedor.Enabled = blnHabilita;
                this.btnPropriedadesFornecedor.Enabled = this.blnPermissaoPropriedadesFornecedor;
                this.btnPesquisaEncomenda.Enabled = blnHabilita;
                this.txtEncomenda.Enabled = blnHabilita;

                // estes campos ficarão habilitados independente do situação do pedido mas depende da permissão.
                if (this.Verificar_Pedido_Com_Origem())
                {
                    if (!this.blnPedidoEncomendaVenda)
                    {
                        blnHabilita = this.blnPermissaoAlterar && this.blnPermissaoAlterarPedidosComOrigem;
                    }
                }
                else
                {
                    if (this.blnPedidoEmInclusao)
                    {
                        blnHabilita = true;
                    }
                    else if (this.blnPedidoEmEdicao)
                    {
                        blnHabilita = this.blnPermissaoAlterar;
                    }
                }

                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() == Enumerados.Status_Pedido_Compra.Finalizado.ToInteger())
                {
                    this.txtObservacoes.Enabled = false;
                    this.txtCobrancaFornecedor.Enabled = false;
                    this.txtCodigoCondicaoPagamento.Enabled = false;
                    this.btnPesquisarCondicaoPagamento.Enabled = false;
                }
                else
                {
                    this.txtObservacoes.Enabled = blnHabilita;
                    this.txtCobrancaFornecedor.Enabled = blnHabilita;
                    this.txtCodigoCondicaoPagamento.Enabled = blnHabilita;
                    this.btnPesquisarCondicaoPagamento.Enabled = blnHabilita;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Verificar_Pedido_Com_Origem()
        {
            try
            {
                return this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Tipo_Origem_ID"].ToInteger() != Enumerados.Origem_Pedido_Compras.Pedido_de_Compras.ToInteger();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Bloquear_Edicao_Itens_Pedido_Encomenda()
        {
            try
            {
                if (this.blnPedidoEncomendaVenda)
                {
                    this.objGridBotaoItens.Botao_Propriedade_Incluir.Enabled = false;
                    this.objGridBotaoItens.Botao_Propriedade_Alterar.Enabled = false;
                    this.objGridBotaoItens.Botao_Propriedade_Excluir.Enabled = false;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public override bool Efetuar_Alteracao()
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                if (!this.Valida_Pedido_De_Compra())
                {
                    return false;
                }
                if (!this.Valida_Remover_Impostos_Para_Itens())
                {
                    return false;
                }
                Pedido_CompraBUS busPedidoCompra = new Pedido_CompraBUS();

                MC_MessageBox objMessageBox = null;

                if (this.Verifica_Reajuste() == true)
                {
                    this.blnReajustar = true;

                    objMessageBox = busPedidoCompra.Verificar_Existencia_Reajuste(this.intPedidoCompraCTID);

                    if ((objMessageBox != null) && objMessageBox.Show() == DialogResult.No)
                    {
                        this.blnReajustar = false;
                    }
                }

                busPedidoCompra.Trata_DataSet(this.dtsPropriedades, this.blnReajustar);

                this.Autorizar_Pedido();
                this.Setar_Pedido_Compra_CT_ID();
                this.Habilitar_Desabilitar_Capa();
                this.Carregar_Dados();
                this.Atualizar_Valores_Itens_E_Totais();
                this.Preencher_Valor_Total_Pedido();
                this.Setar_Imagens_Grid();
                this.Verificar_Mudancas();

                this.Registro_Alterado = true;
                return true;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Autorizar_Pedido()
        {

            try
            {
                if (this.strFornCD != string.Empty)
                {
                    this.intPedidoCompraCTID = this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Pedido_Compra_CT_ID"].DefaultInteger();
                    Pedido_CompraBUS busPedidoCompra = new Pedido_CompraBUS();
                    busPedidoCompra.Autorizar_Pedido(ref this.intPedidoCompraCTID);
                }
            }
            catch (Exception)
            {

                throw;
            }

        }

        private void Habilitar_Edicao_Item_Pedido(bool blnHabilitar)
        {
            try
            {
                this.objCodigoMercadocar.Carregar_Peca_ID -= this.Carregar_Peca_ID_Cod_Mercadocar;

                if (this.tbcHerdado.SelectedTab == this.tbpItensDoPedido && this.objCodigoMercadocar.Peca_ID != 0)
                {
                    this.dgvPreDistribuicao.ReadOnly = !this.blnIncluirItem && this.dgvPreDistribuicao.ReadOnly;
                }

                this.Habilitar_Desabilitar_Edicao_Distribuicao(this.dgvPreDistribuicao.ReadOnly);

                if (blnHabilitar)
                {
                    if (this.objGridBotaoItens.DgvPadrao.SelectedRows.Count == 1)
                    {
                        if (this.objGridBotaoItens.DgvPadrao.SelectedRows[0].Cells["Solicitar_Distribuicao"].Value.ToInteger() == 1 && this.blnAlterarItem)
                        {
                            this.dgvPreDistribuicao.ReadOnly = true;
                            this.Habilitar_Desabilitar_Edicao_Distribuicao(this.Verificar_Necessidade_De_Distribuicao_Peca_Inclusao());
                        }
                        else
                        {
                            this.dgvPreDistribuicao.ReadOnly = this.Verificar_Necessidade_Definir_Distribuicao(this.objGridBotaoItens.DgvPadrao.SelectedRows[0].Cells["Peca_ID"].Value.ToInteger(), false);
                            this.Habilitar_Desabilitar_Edicao_Distribuicao(this.Verificar_Necessidade_De_Distribuicao_Peca_Inclusao());
                        }
                    }

                    this.dgvPreDistribuicao.ReadOnly = this.dgvPreDistribuicao.ReadOnly && Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, ((LojasDO)Root.Loja_Ativa_NEW).ID, this.Name, Mercadocar.Enumerados.Acao_Formulario.Redefinir_Distribuicao.ToString());
                    this.Habilitar_Desabilitar_Edicao_Distribuicao(this.Verificar_Necessidade_De_Distribuicao_Peca_Inclusao());
                }

                this.txtCodigoItemFabricante.Enabled = false;

                if (!this.blnAlterarItem)
                {
                    this.nudQtdeItem.Enabled = blnHabilitar;
                    this.cboEmbalagemCompra.Enabled = blnHabilitar;
                    this.nudPrecoEmbalagem.Enabled = blnHabilitar;
                    this.nudDescontoItem.Enabled = blnHabilitar;
                    this.nudIPIItem.Enabled = blnHabilitar;
                    this.nudICMSItem.Enabled = blnHabilitar;
                    this.nudSubstituicaoItem.Enabled = blnHabilitar;
                    this.chkRemoverImpostosItens.Enabled = blnHabilitar;
                    this.chkDistribuirTotalmenteParaLojas.Enabled = blnHabilitar && this.blnPermissaoDistribuirTotalmenteLojas;
                }
                if (this.chkOptanteSimples.Checked)
                {
                    this.nudIPIItem.Enabled = false;
                    this.nudICMSItem.Enabled = false;
                    this.nudIPIItem.Value = 0;
                    this.nudICMSItem.Value = 0;
                }

                if (this.intPedidoCompraCTID != 0)
                {
                    if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() == Mercadocar.Enumerados.Status_Pedido_Compra.Finalizado.ToInteger())
                    {
                        this.objGridBotaoItens.Botao_Propriedade_Incluir.Enabled = false;
                        this.objGridBotaoItens.Botao_Propriedade_Alterar.Enabled = false;
                        this.objGridBotaoItens.Botao_Propriedade_Excluir.Enabled = false;
                    }

                    this.tsmAuditoriaItemPedidoSelecionado.Enabled = this.objGridBotaoItens.DgvPadrao.SelectedRows.Count == 1 && this.blnPermissaoVisualizarAuditoria;
                    this.tsmAuditoriaItemPedidoExcluidos.Enabled = this.blnPermissaoVisualizarAuditoria;
                    this.btnAuditoria.Enabled = this.blnPermissaoVisualizarAuditoria;
                }
                else
                {
                    this.tsmAuditoriaItemPedidoSelecionado.Enabled = false;
                    this.tsmAuditoriaItemPedidoExcluidos.Enabled = false;
                    this.btnAuditoria.Enabled = false;
                }

                // Os botões do grid de itens não olham permissão a não ser quando o pedido estiver finalizado que apenas o botão alterar ficara habilitado.
                if (this.blnPedidoEmInclusao)
                {
                    this.objGridBotaoItens.Botao_Propriedade_Incluir.Enabled = this.blnAlterarItem == this.blnIncluirItem;
                    this.objGridBotaoItens.Botao_Propriedade_Alterar.Enabled = this.blnAlterarItem == this.blnIncluirItem && this.objGridBotaoItens.DgvPadrao.RowCount > 0;
                    this.objGridBotaoItens.Botao_Propriedade_Excluir.Enabled = this.objGridBotaoItens.Botao_Propriedade_Alterar.Enabled;
                }
                else if (this.blnPedidoEmEdicao)
                {
                    // Se pedido tem origem e permissão de alterar é casada com alterar com origem
                    if (this.Verificar_Pedido_Com_Origem())
                    {
                        this.blnPermissaoAlterar = this.blnPermissaoAlterar && this.blnPermissaoAlterarPedidosComOrigem;
                    }

                    this.objGridBotaoItens.Botao_Propriedade_Alterar.Enabled = this.blnPermissaoAlterar && this.blnAlterarItem == this.blnIncluirItem && this.objGridBotaoItens.DgvPadrao.RowCount > 0 && this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() != Mercadocar.Enumerados.Status_Pedido_Compra.Finalizado.ToInteger();

                    // Pedido com status diferente de Pendente_de_Autorizacao não sera possivel a inclusão ou exclusão de item.
                    if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Enum_Status_ID"].ToInteger() == Mercadocar.Enumerados.Status_Pedido_Compra.Finalizado.ToInteger())
                    {
                        // this.objGridBotaoItens.Botao_Propriedade_Incluir.Enabled = false;
                        this.objGridBotaoItens.Botao_Propriedade_Excluir.Enabled = false;
                    }
                    else
                    {
                        this.objGridBotaoItens.Botao_Propriedade_Incluir.Enabled = this.blnPermissaoAlterar && this.blnAlterarItem == this.blnIncluirItem;
                        this.objGridBotaoItens.Botao_Propriedade_Excluir.Enabled = this.blnPermissaoAlterar && this.blnAlterarItem == this.blnIncluirItem && this.objGridBotaoItens.DgvPadrao.RowCount > 0;
                    }
                }

                this.btnAnaliseMercadologica.Visible = this.objGridBotaoItens.DgvPadrao.RowCount > 0 && this.blnIncluirItem == false;
                this.btnHistoricoCompras.Visible = this.btnAnaliseMercadologica.Visible;

                if (this.btnAnaliseMercadologica.Visible)
                {
                    this.tsmAnaliseCusto.Enabled = this.blnPermissaoAnaliseCusto;
                    this.tsmAnaliseEstoque.Enabled = this.blnPermissaoAnaliseEstoque;
                    this.tsmHistoricoMovimentacao.Enabled = this.blnPermissaoHistoricoMovimentacao;
                    this.tsmHistoricoPedidoCompra.Enabled = this.blnPermissaoHistoricoPedidoCompra;
                }

                this.objCodigoMercadocar.Enabled = this.blnIncluirItem;
                this.objCodigoMercadocar.cboTipoPesquisa.Enabled = this.objCodigoMercadocar.Enabled;
                this.objCodigoMercadocar.Text_Fabricante.Enabled = this.objCodigoMercadocar.Enabled;
                this.objCodigoMercadocar.Text_Produto.Enabled = this.objCodigoMercadocar.Enabled;
                this.objCodigoMercadocar.Text_Peca.Enabled = this.objCodigoMercadocar.Enabled;
                this.objCodigoMercadocar.Text_CodigoBarrasEOriginal.Enabled = this.objCodigoMercadocar.Enabled;
                this.objCodigoMercadocar.Text_CodigoItemFabricante.Enabled = this.objCodigoMercadocar.Enabled;
                this.objCodigoMercadocar.Btn_PesquisarCodigoItem.Enabled = this.objCodigoMercadocar.Enabled;

                this.Bloquear_Edicao_Itens_Pedido_Encomenda();
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                this.objCodigoMercadocar.Carregar_Peca_ID -= this.Carregar_Peca_ID_Cod_Mercadocar;
                this.objCodigoMercadocar.Carregar_Peca_ID += this.Carregar_Peca_ID_Cod_Mercadocar;
            }
        }

        private void Calcular_Valores_Detalhe_Peca(Int32 intEmabalagemCompraID, Int32 intPecaID, bool blnRemoverImpostos, bool blnConsiderarImposto)
        {
            try
            {
                if (intEmabalagemCompraID != 0 && intPecaID != 0)
                {
                    decimal dcmValorEmbalagem = this.nudPrecoEmbalagem.Value;
                    decimal dcmDesconto = this.nudDescontoItem.Value;
                    decimal dcmIPI = this.nudIPIItem.Value;
                    decimal dcmSubstituicao = this.nudSubstituicaoItem.Value;
                    decimal dcmICMS = this.nudICMSItem.Value;
                    Int32 intQntdEmbCompra = 1;

                    // Se for SIMPLES, zerar todos os impostos
                    if (this.chkOptanteSimples.Checked)
                    {
                        dcmIPI = 0;
                        dcmICMS = 0;
                    }

                    intQntdEmbCompra = this.Retorna_Qtde_Item_Por_Embalagem();

                    Pedido_CompraBUS busPedidoCompra = new Pedido_CompraBUS();

                    this.qtdeTotalPeca = busPedidoCompra.Calcula_Quantidade_Total_Item(this.nudQtdeItem.Value.ToDecimal(), intQntdEmbCompra);

                    decimal dcmCustoUnitario = 0;

                    if (!blnRemoverImpostos)
                    {
                        dcmCustoUnitario = busPedidoCompra.Calcula_Custo_Unitario(dcmValorEmbalagem, intQntdEmbCompra, dcmDesconto, dcmIPI, dcmSubstituicao, blnConsiderarImposto);
                    }
                    else
                    {
                        dcmCustoUnitario = busPedidoCompra.Remover_Impostos_Custo_Unitario(dcmValorEmbalagem, intQntdEmbCompra, dcmDesconto, dcmIPI, dcmSubstituicao, dcmICMS);
                    }

                    this.lblQuantidadeTotal.Text = this.qtdeTotalPeca.ToString("#,##0");
                    this.lblCustoTotalItem.Text = busPedidoCompra.Calcula_Custo_Total_Item(this.nudQtdeItem.Value.ToDecimal(), this.nudPrecoEmbalagem.Value.ToDecimal()).ToString("R$ #,##0.00");
                    this.lblCustoUnitario.Text = dcmCustoUnitario.ToString("R$ #,##0.00");
                }
                else
                {
                    this.lblQuantidadeTotal.Text = "0";
                    this.lblCustoTotalItem.Text = "R$ 0,00";
                    this.lblCustoUnitario.Text = "R$ 0,00";
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private decimal Calcular_Valor_Total_Pedido_Com_Desconto()
        {
            try
            {
                decimal dcmValorTotal = 0;
                if (this.objGridBotaoItens.DgvPadrao.Rows.Count > 0)
                {
                    foreach (DataGridViewRow dgrItem in this.objGridBotaoItens.DgvPadrao.Rows)
                    {
                        Int32 intQuantTotal = (dgrItem.Cells["Quantidade_Total"].Value.ToString().Replace(".", string.Empty).IsNumber() ? dgrItem.Cells["Quantidade_Total"].Value.ToString().Replace(".", string.Empty).ToInteger() : 0).ToInteger();
                        int intQtdePorEmbalagem = dgrItem.Cells["Peca_Embalagem_Quantidade"].Value.ToInteger();
                        decimal dcmCustoUni = (dgrItem.Cells["Pedido_Compra_IT_Custo_Compra"].Value.ToString().IsNumber() ? dgrItem.Cells["Pedido_Compra_IT_Custo_Compra"].Value.ToDecimal() : 0).ToDecimal() / intQtdePorEmbalagem;
                        decimal dcmValorDesconto = (dcmCustoUni * dgrItem.Cells["Pedido_Compra_IT_Desconto"].Value.ToDecimal()) / 100;
                        decimal dcmImpostos = (100 + dgrItem.Cells["Pedido_Compra_IT_Substituicao"].Value.ToDecimal() + dgrItem.Cells["Pedido_Compra_IT_Imposto"].Value.ToDecimal()) / 100;

                        decimal dcmValorImposto = 0;

                        if (dgrItem.Cells["Pedido_Compra_IT_Remover_Impostos"].Value.ToBool())
                            dcmValorImposto = dcmCustoUni - (dcmCustoUni / dcmImpostos);

                        dcmValorTotal += (intQuantTotal * (dcmCustoUni - dcmValorDesconto - dcmValorImposto));
                    }
                }
                return dcmValorTotal;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private decimal Calcular_Valor_Total_Impostos()
        {
            try
            {
                decimal dcmValorTotal = 0;
                if (this.objGridBotaoItens.DgvPadrao.Rows.Count > 0)
                {
                    foreach (DataGridViewRow dgrItem in this.objGridBotaoItens.DgvPadrao.Rows)
                    {
                        Int32 intQuantTotal = (dgrItem.Cells["Quantidade_Total"].Value.ToString().Replace(".", string.Empty).IsNumber() ? dgrItem.Cells["Quantidade_Total"].Value.ToString().Replace(".", string.Empty).ToInteger() : 0).ToInteger();
                        int intQtdePorEmbalagem = dgrItem.Cells["Peca_Embalagem_Quantidade"].Value.ToInteger();
                        decimal dcmCustoCompra = (dgrItem.Cells["Pedido_Compra_IT_Custo_Compra"].Value.ToString().IsNumber() ? dgrItem.Cells["Pedido_Compra_IT_Custo_Compra"].Value.ToDecimal() : 0).ToDecimal() / intQtdePorEmbalagem;
                        decimal dcmImpostos = (100 + dgrItem.Cells["Pedido_Compra_IT_Substituicao"].Value.ToDecimal() + dgrItem.Cells["Pedido_Compra_IT_Imposto"].Value.ToDecimal()) / 100;

                        decimal dcmValorImposto = dcmCustoCompra - (dcmCustoCompra / dcmImpostos);

                        dcmValorTotal += (intQuantTotal * (dcmValorImposto));
                    }
                }
                return dcmValorTotal;
            }
            catch (Exception)
            {
                throw;
            }
        }


        private decimal Calcular_Valor_Total_Pedido_Sem_Desconto()
        {
            try
            {
                decimal dcmValorTotal = 0;
                if (this.objGridBotaoItens.DgvPadrao.Rows.Count > 0)
                {
                    foreach (DataGridViewRow dgrItem in this.objGridBotaoItens.DgvPadrao.Rows)
                    {
                        Int32 intQuantTotal = (dgrItem.Cells["Quantidade_Total"].Value.ToString().Replace(".", string.Empty).IsNumber() ? dgrItem.Cells["Quantidade_Total"].Value.ToString().Replace(".", string.Empty).ToInteger() : 0).ToInteger();
                        int intQtdePorEmbalagem = dgrItem.Cells["Peca_Embalagem_Quantidade"].Value.ToInteger();
                        decimal dcmCustoUni = (dgrItem.Cells["Pedido_Compra_IT_Custo_Compra"].Value.ToString().IsNumber() ? dgrItem.Cells["Pedido_Compra_IT_Custo_Compra"].Value.ToDecimal() : 0).ToDecimal() / intQtdePorEmbalagem;

                        dcmValorTotal += (intQuantTotal * dcmCustoUni);
                    }
                }
                return dcmValorTotal;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private decimal Calcular_Valor_Total_Desconto_Pedido()
        {
            try
            {
                decimal dcmValorTotal = 0;
                if (this.objGridBotaoItens.DgvPadrao.Rows.Count > 0)
                {
                    foreach (DataGridViewRow dgrItem in this.objGridBotaoItens.DgvPadrao.Rows)
                    {
                        Int32 intQuantTotal = (dgrItem.Cells["Quantidade_Total"].Value.ToString().Replace(".", string.Empty).IsNumber() ? dgrItem.Cells["Quantidade_Total"].Value.ToString().Replace(".", string.Empty).ToInteger() : 0).ToInteger();
                        int intQtdePorEmbalagem = dgrItem.Cells["Peca_Embalagem_Quantidade"].Value.ToInteger();
                        decimal dcmCustoUni = (dgrItem.Cells["Pedido_Compra_IT_Custo_Compra"].Value.ToString().IsNumber() ? dgrItem.Cells["Pedido_Compra_IT_Custo_Compra"].Value.ToDecimal() : 0).ToDecimal() / intQtdePorEmbalagem;
                        decimal dcmValorDesconto = (dcmCustoUni * dgrItem.Cells["Pedido_Compra_IT_Desconto"].Value.ToDecimal()) / 100;



                        dcmValorTotal += (intQuantTotal * dcmValorDesconto);
                    }
                }
                return dcmValorTotal;
            }
            catch (Exception)
            {
                throw;
            }
        }


        private void Validar_Tipo_Fornecedor()
        {
            try
            {
                if (this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Loja_Faturamento_ID"].ToString().IsNotNullOrEmpty())
                {
                    if (!this.blnPedidoEmEdicao)
                    {
                        this.chkRemoverImpostos.Checked = this.blnFornecedorFabricante;
                        this.chkRemoverImpostosItens.Checked = this.chkRemoverImpostos.Checked;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Alterar_Usuario_Ultima_Alteracao()
        {
            try
            {
                this.dtsPropriedades.Tables["Pedido_Compra_CT"].Rows[0]["Usuario_Ultima_Alteracao_ID"] = ((UsuarioDO)Root.Funcionalidades.Usuario_Ativo).ID;
            }
            catch (Exception)
            {
                throw;
            }
        }


        private void Atualizar_Pre_Distribuicao_Para_Todos_Itens()
        {
            try
            {
                if (this.objGridBotaoItens.DgvPadrao.RowCount > 0)
                {
                    foreach (DataRow dtrItem in this.dtsPropriedades.Tables["Pedido_Compra_IT"].Rows)
                    {
                        if (DivUtil.Valida_Loja_Tipo_CD(this.cboLojaDestino.SelectedValue.DefaultString()))
                        {
                            if (DivUtil.Valida_Loja_Tipo_CD(this.cboLojaDestino.SelectedValue.DefaultString()) == false || this.blnLojaVendaDestino == false)
                            {
                                foreach (DataGridViewRow dgvItem in this.dgvPreDistribuicao.Rows)
                                {
                                    dgvItem.Cells["Pre_Distribuicao_Qtde"].Value = 0;
                                }

                                if (this.dtsResumoPecaPedidoCompra != null)
                                {
                                    foreach (DataRow dtrItemResumo in this.dtsResumoPecaPedidoCompra.Tables["Pre_Distribuicao"].Rows)
                                    {
                                        dtrItemResumo["Pre_Distribuicao_Qtde"] = 0;
                                    }
                                }

                                DataRow[] dtrPecasLoja = this.dtsPropriedades.Tables["Pre_Distribuicao"].Select("Peca_ID = " + dtrItem["Peca_ID"].ToInteger());

                                foreach (DataRow dtrAlterar in dtrPecasLoja)
                                {
                                    dtrAlterar["Pre_Distribuicao_Qtde"] = 0;
                                }
                            }
                        }
                        else
                        {
                            DataRow[] dtrPecasLoja = this.dtsPropriedades.Tables["Pre_Distribuicao"].Select("Peca_ID = " + dtrItem["Peca_ID"].ToInteger());

                            foreach (DataRow dtrAlterar in dtrPecasLoja)
                            {
                                if (dtrAlterar["Loja_ID"].ToInteger() == this.cboLojaDestino.SelectedValue.ToInteger())
                                {
                                    dtrAlterar["Pre_Distribuicao_Qtde"] = dtrItem["Pedido_Compra_IT_Quantidade"].ToInteger();
                                }
                                else
                                {
                                    dtrAlterar["Pre_Distribuicao_Qtde"] = 0;
                                }
                            }
                        }
                    }
                }

                this.blnLojaVendaDestino = (DivUtil.Valida_Loja_Tipo_CD(this.cboLojaDestino.SelectedValue.DefaultString()));
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Atualizar_Valores_Itens_E_Totais()
        {
            try
            {
                if (this.blnRecebidoDataSet && this.lblNumeroPedido.Text == string.Empty)
                {
                    decimal dcmValor = 0;
                    decimal dcmValorUnitario = 0;

                    Pedido_CompraBUS busPedidoCompra = new Pedido_CompraBUS();

                    foreach (DataRow dtrLinha in this.dtsPropriedades.Tables["Pedido_Compra_IT"].Rows)
                    {
                        if (this.blnFornecedorTipoFabricante)
                        {
                            dcmValor = dtrLinha["Preco_Fabrica"].DefaultDecimal();

                            if (dcmValor == 0)
                            {
                                dcmValor = dtrLinha["Pedido_Compra_IT_Custo_Compra"].DefaultDecimal();
                                dcmValor /= dtrLinha["Peca_Embalagem_Quantidade"].DefaultInteger();
                            }
                        }
                        else
                        {
                            dcmValor = dtrLinha["Pedido_Compra_IT_Custo_Compra"].DefaultDecimal();
                            dcmValor /= dtrLinha["Peca_Embalagem_Quantidade"].DefaultInteger();
                        }

                        dcmValorUnitario = busPedidoCompra.Calcula_Custo_Unitario(
                                                                                  dtrLinha["Pedido_Compra_IT_Custo_Compra"].DefaultDecimal(),
                                                                                  dtrLinha["Peca_Embalagem_Quantidade"].ToDecimal(),
                                                                                  dtrLinha["Pedido_Compra_IT_Desconto"].ToDecimal(),
                                                                                  dtrLinha["Pedido_Compra_IT_Imposto"].ToDecimal(),
                                                                                  dtrLinha["Pedido_Compra_IT_Substituicao"].ToDecimal(),
                                                                                  false);

                        this.Atualizar_Custo_Peca(dcmValor, dcmValorUnitario, dtrLinha);
                    }
                }

                this.Atualiza_DataSet();

                this.Preencher_Valor_Total_Pedido();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Atualizar_Custo_Peca(decimal dcmValor, decimal dcmValorUnitario, DataRow dtrLinha)
        {
            try
            {
                Peca_EmbalagemBUS busPecaEmbalagem = new Peca_EmbalagemBUS();
                Peca_Embalagem_DO dtoPecaEmbalagem = busPecaEmbalagem.Selecionar_Embalagem_Compra(dtrLinha["Peca_Embalagem_Compra_ID"].DefaultInteger());

                dtrLinha["Pedido_Compra_IT_Custo_Compra"] = dcmValor * dtoPecaEmbalagem.Quantidade;
                dtrLinha["Pedido_Compra_IT_Custo_Unitario"] = dcmValorUnitario;
                dtrLinha["Pedido_Compra_IT_Custo_Efetivo"] = dcmValor * dtoPecaEmbalagem.Quantidade;
                dtrLinha["Valor_Total_Unitario"] = dtrLinha["Quantidade_Total"].DefaultInteger() * dcmValor;
                dtrLinha["Valor_Total_Compra"] = (dtrLinha["Valor_Total_Unitario"].DefaultDecimal())
                                                - (dtrLinha["Pedido_Compra_IT_Quantidade"].ToDecimal() * decimal.Round(dtrLinha["Pedido_Compra_IT_Valor_Desconto"].ToDecimal(), 2));
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Colorir_Checkbox()
        {
            try
            {
                if (this.objCodigoMercadocar.Peca_ID == 0)
                {
                    this.chkDistribuirTotalmenteParaLojas.BackColor = DefaultBackColor;
                    return;
                }

                if (this.chkDistribuirTotalmenteParaLojas.Checked)
                {
                    this.chkDistribuirTotalmenteParaLojas.BackColor = Color.LightCoral;
                }
                else
                {
                    this.chkDistribuirTotalmenteParaLojas.BackColor = Color.LightGreen;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region "   Não Utilizados     "

        public object DataObject
        {
            get { return null; }
        }

        #endregion
    }
}

