// -----------------------------------------------------------------------
// <copyright file="frmInstalacao_Novo_Propriedades.cs" company="MercadoCAR"> MercadoCar </copyright>
// <userName> alfelix </userName>
// <created> 10/16/2012 2:23:11 PM </created>
// -----------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Mercadocar.Enumerados;
using Mercadocar.Herancas;
using Mercadocar.InfraEstrutura;
using Mercadocar.InfraEstrutura.Utilidades;
using Mercadocar.ObjetosNegocio.DataObject;
using Mercadocar.RegrasNegocio;
using Microsoft.VisualBasic;

namespace Mercadocar.Formularios.Instalacao.New
{

    public partial class frmInstalacao_Controle_Propriedades : frmPropriedades
    {

        #region "   Declarações        "

        private int intIDInstalacaoCT;
        private int intIDLojas;

        private DataTable dttFuncionariosInstaladores = new DataTable();
        private DataSet dtsPropriedades = new DataSet();
        private DataSet dtsPropriedadesOriginal = new DataSet();

        bool blnPermissaoRecepcaoIniciar = false;
        bool blnPermissaoRecepcaoFinalizar = false;
        bool blnPermissaoIncluir = false;
        bool blnPermissaoAlterar = false;
        bool blnPermissaoIncluirCliente = false;
        bool blnUtilizaProdutoReciclavel = false;

        private List<Reciclagem_CTBUS.Pre_Venda> colPreVenda = new List<Reciclagem_CTBUS.Pre_Venda>();
        private Etiqueta_CTBUS busEtiquetaCT = new Etiqueta_CTBUS();

        #endregion

        #region "   Construtor         "

        public frmInstalacao_Controle_Propriedades(int Instalacao_CT_ID, int Lojas_ID)
            : this()
        {
            try
            {
                this.intIDInstalacaoCT = Instalacao_CT_ID;
                this.intIDLojas = Lojas_ID;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public frmInstalacao_Controle_Propriedades()
            : base()
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                this.Load += this.Form_Load;
                this.Activated += this.Form_Activated;
                this.InitializeComponent();

                this.btnAuditoria.Enter += this.Ganhar_Foco_Auditoria;
                this.btnAuditoria.Click += this.Clicar_Botao_Auditoria;
                this.tsmAuditoriaInstalacao_CT.Click += this.Clicar_Menu_Auditoria_Instalacao_CT;
                this.tsmAuditoriaInstalacao_IT.Click += this.Clicar_Menu_Auditoria_Instalacao_IT;
                this.tsmAuditoriaInstalacao_IT_Instalador.Click += this.Clicar_Menu_Auditoria_Instalacao_IT_Instalador;
                this.btnHistoricoCliente.Click += this.Clicar_Botao_Historico_Cliente;
                this.btnDadosCliente.Click += this.Clicar_Botao_Dados_Cliente;

                this.chkAgedamento.CheckedChanged += this.Alterar_Marcacao_chkAgedamento;
                this.dtpDataAgendamento.ValueChanged += this.Alterar_Data_Agendamento;

                this.cmsMenu.Opened += this.ContextMenu_Popup;
                this.tsmVisualizarInstaladores.Click += this.Clicar_Menu_Visualizar_Instaladores;
                this.tsmSolicitarRetornoGarantia.Click += this.Clicar_Menu_Solicitar_Retorno_Garantia;
                this.tsmEstornoCancelamento.Click += this.Clicar_Menu_Estorno_Cancelamento;
                this.tsmEstornoFinalizacao.Click += this.Clicar_Menu_Estorno_Finalizacao;

                this.btnRecepcao_Iniciar.Click += this.Clicar_Botao_Recepcao_Iniciar;
                this.btnRecepcao_Finalizar.Click += this.Clicar_Botao_Recepcao_Finalizar;
                this.btnRecepcao_Suspender.Click += this.Clicar_Botao_Recepcao_Suspender_Cancelar;
                this.btnRecepcao_Cancelar.Click += this.Clicar_Botao_Recepcao_Suspender_Cancelar;

                this.btnPesquisarDocumento.Click += this.Clicar_Botao_Pesquisar_Documento;
                this.btnPesquisar_Cliente.Click += this.Clicar_Botao_Pesquisar_Cliente;
                this.btnIncluir_Cliente.Click += this.Clicar_Botao_Incluir_Cliente;
                this.btnSalvarVeiculo.Click += this.Clicar_Botao_Salvar_Veiculo;
                this.btnIncluir_Veiculo.Click += this.Clicar_Botao_Incluir_Veiculo;
                this.btnExcluir_Veiculo.Click += this.Clicar_Botao_Excluir_Veiculo;

                this.btnIncluirDocumento.Click += this.Clicar_Botao_Incluir_Documento;

                this.cboVeiculo.LostFocus += this.Perder_Foco_cboVeiculo;
                this.cboVeiculo.SelectedIndexChanged += this.Perder_Foco_cboVeiculo;

                this.dgvInstaladores.KeyDown += this.Pressionar_Tecla_Grid_Instaladores;
                this.dgvInstaladores.CellClick += this.Clicar_Grid_Instaladores;
                this.dgvInstaladores.CurrentCellDirtyStateChanged += this.Alterar_Marcacao_Grids;

                this.dgvVeiculos.KeyDown += this.Pressionar_Tecla_Grid_Veiculos;
                this.dgvVeiculos.Click += this.Clicar_Grid_Veiculos;
                this.dgvVeiculos.SelectionChanged += this.Alterar_Selecao_dgvVeiculos;

                this.dgvItens.SelectionChanged += this.Alterar_Selecao_dgvItens;
                this.dgvItens.CellClick += this.Clicar_Grid_Itens;
                this.dgvItens.CurrentCellDirtyStateChanged += this.Alterar_Marcacao_Grids;
                this.dgvItens.KeyDown += this.Pressionar_Tecla_Grid_Itens;
                this.dgvItens.CellDoubleClick += this.Clicar_Celula_dgvItens;
                this.dgvItens.CellLeave += this.Perder_Foco_Celula_dgvItens;
                this.dgvInstaladores.Sorted += this.Ordenar_Grid;
                this.dgvItens.Sorted += this.Ordenar_Grid;

                this.dgvItens.DataError += new DataGridViewDataErrorEventHandler(this.Data_Error_Grid_Itens);

                this.dgvItens.CellFormatting += this.Formatar_Celula_Grid_dgvItens;

                this.txtNumeroDocumento.KeyPress += DivUtil.Pressionar_Tecla_Permitindo_Apenas_Numerico;
                this.txtPrisma.KeyPress += DivUtil.Pressionar_Tecla_Permitindo_Apenas_Numerico;

                this.txtObservacao.TextChanged += this.Modificar_Texto_txtObservacao;
                this.txtCPF_CNPJ.TextChanged += this.Modificar_Texto_txtCPF_CNPJ;
                this.txtPlaca.TextChanged += this.Modificar_Texto_txtPlaca;
                this.txtPlaca.LostFocus += this.Perder_Foco_txtPlaca;
                this.txtPrisma.TextChanged += this.Modificar_Texto_txtPrisma;
                this.txtPrisma.LostFocus += this.Perder_Foco_txtPrisma;

                this.txtCPF_CNPJ.KeyPress += DivUtil.Pressionar_Tecla_Permitindo_Apenas_Numerico;
                this.txtCPF_CNPJ.Validating += this.Validando_TextBox_CPF_CNPJ;

                this.txtHoraAgendamento.Validating += this.Validando_txtHoraAgendamento;

                this.chkMostrarInstaladoresDisponiveis.CheckedChanged += this.Alterar_Marcacao_chkMostrarInstaladores;
                this.chkMostrarInstaladoresMarcados.CheckedChanged += this.Alterar_Marcacao_chkMostrarInstaladores;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }

        }

        #endregion

        #region "   Inicialização      "

        private void Form_Load(object sender, System.EventArgs e)
        {
            try
            {
                this.Definir_Formulario_Estilo();
                this.Inicializar_Paramentros();
                this.Configurar_Design_Utiliza_Reciclavel();
                this.Carregar_Combo_Lojas();
                this.Carregar_Combo_Tipo_Documento();
                this.Configurar_Grid_Instaladores();
                this.Configurar_Grid_Itens();
                this.Configurar_Grid_Veiculos();
                this.Limpar_Campos_Formulario();
                this.Carregar_Grid_Instaladores();
                this.Carregar_Combo_Veiculos();
                this.Carregar_Dados_Instalacao();
                this.Preencher_Dados_Instalacao();
                this.Tratar_Permissoes();
                this.Gerenciar_Formulario();
                this.txtNumeroDocumento.Select();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Form_Activated(object sender, System.EventArgs e)
        {
            try
            {
                this.Gerenciar_Imagens_Cor_Linha_Grids();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        #endregion

        #region "   Eventos            "

        private void Alterar_Data_Agendamento(object sender, EventArgs e)
        {
            try
            {
                DBUtil objUtil = new DBUtil();
                DateTime dtmDataAtual = objUtil.Obter_Data_do_Servidor(true, TipoServidor.LojaAtual);

                if (this.dtpDataAgendamento.Value < dtmDataAtual.Date)
                {
                    MessageBox.Show("A Data do Agendamento deve ser superior ou igual a data Atual", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.dtpDataAgendamento.Value = dtmDataAtual.Date;
                    this.dtpDataAgendamento.Focus();
                    this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_Data_Agendamento"] = new DateTime(1900, 1, 1);
                }
                else
                {
                    this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_Data_Agendamento"] = this.dtpDataAgendamento.Value.Date;
                }
                this.Atribuir_Status_Instalacao_Capa();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_Marcacao_Grids(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                this.Desativar_ToolTip_Instaladores();

                if (((DataGridView)sender).IsCurrentCellDirty)
                {
                    ((DataGridView)sender).CommitEdit(DataGridViewDataErrorContexts.Commit);
                }
                this.Gerenciar_Imagens_Cor_Linha_Grids();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }
        private void Alterar_Marcacao_chkAgedamento(object sender, EventArgs e)
        {
            try
            {
                this.Desativar_ToolTip_Instaladores();

                this.grbDadosAgendamento.Enabled = this.chkAgedamento.Checked;

                if (!this.chkAgedamento.Checked)
                {
                    this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_Data_Agendamento"] = new DateTime(1900, 1, 1);
                }

                this.Atribuir_Status_Instalacao_Capa();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_Selecao_dgvItens(object sender, EventArgs e)
        {
            try
            {
                this.txtCPF_CNPJ.TextChanged -= this.Modificar_Texto_txtCPF_CNPJ;

                this.Desativar_ToolTip_Instaladores();

                if (this.dgvItens.Rows.Count > 0)
                {

                    if ((this.dgvItens.CurrentRow.Cells["Enum_Status_ID"].Value.ToInteger() == Status_Instalacao.Finalizada.ToInteger() ||
                                                     this.dgvItens.CurrentRow.Cells["Enum_Status_ID"].Value.ToInteger() == Status_Instalacao.Cancelada.ToInteger())
                                                     && (this.blnPermissaoAlterar || (this.blnPermissaoIncluir && this.intIDInstalacaoCT == 0)))
                    {
                        this.dgvInstaladores.Enabled = false;
                    }
                    else
                    {
                        this.dgvInstaladores.Enabled = true;
                    }


                    this.Atribuir_Instaladores_Instalacao();

                    DataRowView dtvItem = (DataRowView)this.dgvItens.CurrentRow.DataBoundItem;

                    this.Gerenciar_Formulario();

                    this.tsmSolicitarRetornoGarantia.Enabled = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo,
                                                                                                      Root.Loja_Ativa.ID,
                                                                                                      this.Name,
                                                                                                      Acao_Formulario.Solicitar_Retorno_Servico_Garantia.ToString()) &&
                                                                                                      (Status_Instalacao)dtvItem["Enum_Status_ID"] == Status_Instalacao.Finalizada;

                    this.tsmEstornoCancelamento.Visible = Convert.ToInt32(dtvItem["Enum_Status_ID"]) == Status_Instalacao.Cancelada.ToInteger();
                    this.tssSeparador.Visible = this.tsmEstornoCancelamento.Visible;

                    this.tsmEstornoFinalizacao.Visible = Convert.ToInt32(dtvItem["Enum_Status_ID"]) == Status_Instalacao.Finalizada.ToInteger();
                    this.tssSeparador.Visible = this.tsmEstornoFinalizacao.Visible;

                    if (this.dtsPropriedades.Tables["Instalacao_IT"].Select(string.Concat("Instalacao_IT_Origem_ID <> '' AND Instalacao_IT_ID = '", dtvItem["Instalacao_IT_ID"], "' AND Instalacao_IT_Data_Termino = '1/1/1900'")).Length > 0)
                    {
                        if ((dtvItem["Enum_Motivo_Retorno_ID"].ToInteger() != 0) && (dtvItem["Enum_Status_ID"].ToInteger() == (int)Status_Instalacao.Finalizada))
                        {
                            this.tsmSolicitarRetornoGarantia.Text = "Visualizar Retorno de Garantia";
                        }
                        else
                        {
                            this.tsmSolicitarRetornoGarantia.Text = "Informar o Motivo de Retorno de Garantia";
                        }

                    }
                    else
                    {
                        this.tsmSolicitarRetornoGarantia.Text = "Solicitar Retorno de Garantia";
                    }


                    this.Carregar_Veiculo(Convert.ToInt32(dtvItem["Veiculo_ID"]), dtvItem["Instalacao_IT_Placa"].ToString(), dtvItem["Instalacao_IT_Prisma"].ToString());

                    this.Mudar_Cor_Linha_Grid_Item_Recolher_Reciclavel();

                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                this.txtCPF_CNPJ.TextChanged -= this.Modificar_Texto_txtCPF_CNPJ;
            }
        }

        private void Alterar_Selecao_dgvVeiculos(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                this.Desativar_ToolTip_Instaladores();

                this.txtPlaca.TextChanged -= this.Modificar_Texto_txtPlaca;
                if (this.dgvVeiculos.Rows.Count > 0)
                {
                    this.Gerenciar_Controles_Veiculos();
                    DataRow dtrVeiculo = ((DataRowView)this.dgvVeiculos.CurrentRow.DataBoundItem).Row;
                    this.cboVeiculo.SelectedValue = dtrVeiculo["Veiculo_ID"].ToInteger();
                    this.txtPlaca.Text = dtrVeiculo["Cliente_Veiculo_Placa"].ToString();
                }
                else
                {
                    this.Gerenciar_Controles_Veiculos();
                    this.cboVeiculo.SelectedValue = 0;
                    this.txtPlaca.Text = string.Empty;
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                this.txtPlaca.TextChanged -= this.Modificar_Texto_txtPlaca;
                this.txtPlaca.TextChanged += this.Modificar_Texto_txtPlaca;

                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Botao_Auditoria(object sender, EventArgs e)
        {
            try
            {
                this.Expandir_Menu_Auditoria();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Incluir_Cliente(object sender, System.EventArgs e)
        {
            try
            {
                this.Processar_Incluir_Cliente();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Incluir_Documento(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                this.Processar_Botao_Incluir_Documento();
                this.Gerenciar_Botoes_Dados_Cliente();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Botao_Salvar_Veiculo(object sender, EventArgs e)
        {
            try
            {
                if (this.cboVeiculo.SelectedItem == null)
                {
                    MessageBox.Show("Informe o veículo.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.cboVeiculo.Focus();
                    return;
                }

                if (this.txtPlaca.Text.Trim() == string.Empty)
                {
                    MessageBox.Show("Informe a placa do veículo.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.txtPlaca.Focus();
                    return;
                }

                if (this.dtsPropriedades.Tables["Cliente_Veiculo"].Select("Veiculo_ID = " + this.cboVeiculo.SelectedValue + " AND Cliente_Veiculo_Placa = '" + this.txtPlaca.Text.Trim() + "'").Length > 0)
                {
                    MessageBox.Show("Este veículo já esta cadastrado!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.txtPlaca.Focus();
                    return;
                }

                DataTable dttVeiculoCombo = (DataTable)this.cboVeiculo.DataSource;
                DataRow dtrVeiculoCombo = ((DataRowView)this.cboVeiculo.SelectedItem).Row;
                DataRow dtrVeiculosCliente = this.dtsPropriedades.Tables["Cliente_Veiculo"].NewRow();
                dtrVeiculosCliente.BeginEdit();
                dtrVeiculosCliente["Selecionado"] = this.dgvVeiculos.Rows.Count == 0 ? true : false;
                dtrVeiculosCliente["Veiculo_ID"] = dtrVeiculoCombo["Veiculo_ID"];
                dtrVeiculosCliente["Veiculo_DS"] = dtrVeiculoCombo["Veiculo_DS"];
                dtrVeiculosCliente["Cliente_Veiculo_Placa"] = this.txtPlaca.Text.Trim();
                dtrVeiculosCliente["Cliente_ID"] = this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"];
                dtrVeiculosCliente.EndEdit();
                this.dtsPropriedades.Tables["Cliente_Veiculo"].Rows.Add(dtrVeiculosCliente);
                this.Verificar_Mudancas();
                this.Gerenciar_Controles_Veiculos();

                this.Carregar_Veiculo(Convert.ToInt32(dtrVeiculoCombo["Veiculo_ID"]), this.txtPlaca.Text, this.txtPrisma.Text);

            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Incluir_Veiculo(object sender, EventArgs e)
        {
            try
            {
                this.lblVeiculo.Enabled = true;
                this.cboVeiculo.Enabled = true;
                this.lblPlaca.Enabled = true;
                this.txtPlaca.Enabled = true;
                this.txtPlaca.Text = string.Empty;
                this.cboVeiculo.SelectedValue = 0;
                this.cboVeiculo.Focus();
                this.btnSalvarVeiculo.Enabled = true;
                this.btnIncluir_Veiculo.Enabled = false;
                this.btnExcluir_Veiculo.Enabled = false;
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Excluir_Veiculo(object sender, EventArgs e)
        {
            try
            {
                this.dgvVeiculos.SelectionChanged -= this.Alterar_Selecao_dgvVeiculos;

                if (this.dgvVeiculos.Rows.Count > 0 && MessageBox.Show("Confirma a exclusão do veículo?", this.Text, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                {
                    DataRow dtrItemVeiculo = ((DataRowView)this.dgvVeiculos.CurrentRow.DataBoundItem).Row;
                    dtrItemVeiculo.BeginEdit();
                    if (Convert.ToBoolean(this.dgvVeiculos.CurrentRow.Cells["Selecionado"].Value))
                    {
                        this.Marcar_Desmarcar_Item_Grid_Veiculos();
                    }
                    dtrItemVeiculo.EndEdit();
                    dtrItemVeiculo.Delete();

                    this.dtsPropriedades.Tables["Cliente_Veiculo"].AcceptChanges();

                    if (this.dgvVeiculos.Rows.Count == 0)
                    {
                        DataRow dtrItemInstalacao = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;
                        dtrItemInstalacao["Veiculo_ID"] = 0;
                    }
                    else
                    {
                        this.dgvVeiculos.Rows[this.dgvVeiculos.Rows.Count - 1].Selected = true;
                    }
                    this.Verificar_Mudancas();
                }

            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                this.dgvVeiculos.SelectionChanged += this.Alterar_Selecao_dgvVeiculos;
            }
        }

        private void Clicar_Botao_Recepcao_Iniciar(object sender, EventArgs e)
        {
            try
            {

                Cursor.Current = Cursors.WaitCursor;
                List<string> colMensagemErro = new List<string>();
                InstalacaoBUS_NEW busInstalacao = new InstalacaoBUS_NEW();
                busInstalacao.Iniciar_Servico_Instalacao(this.dtsPropriedades, ref colMensagemErro);

                foreach (string strItem in colMensagemErro)
                {
                    MessageBox.Show("O item: " + strItem + " não foi iniciado pois não possui um instalador.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

                this.Gerenciar_Imagens_Cor_Linha_Grids();
                this.Gerenciar_Botoes_Recepcao_Status_Servico();
                this.Verificar_Mudancas();
                if (this.btnAplicar.Enabled)
                {
                    this.Efetuar_Alteracao();
                    this.btnOk.PerformClick();
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Botao_Recepcao_Finalizar(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                if (this.dtsPropriedades.Tables["Instalacao_IT"].Select(string.Concat("Instalacao_IT_Origem_ID <> '' AND Enum_Motivo_Retorno_ID = 0 AND Enum_Status_ID <> ", Status_Instalacao.Finalizada.ToInteger())).Length > 0)
                {
                    MessageBox.Show("Existem serviços de Retorno de Garantia que não tiveram seus motivos informados.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.dgvItens.Focus();
                    return;
                }

                // Quando for finalizar instalação de retorno de garantia sera tratado com uma permissão diferente
                if (this.dtsPropriedades.Tables["Instalacao_IT"].Select(string.Concat("Instalacao_IT_Origem_ID <> '' AND Enum_Motivo_Retorno_ID <> 0 AND Enum_Status_ID <> ", Status_Instalacao.Finalizada.ToInteger())).Length > 0)
                {
                    object objUsuario = Utilitario.Autenticar_Usuario();
                    if (objUsuario == null)
                        return;

                    if (!Root.Permissao.Obter_Permissao_Do_Usuario(objUsuario, Root.Loja_Ativa.ID, this.Name, Acao_Formulario.Finalizar_Com_Autorizacao.ToString()))
                    {
                        MessageBox.Show("Usuário não tem permissão para realizar esta ação! ", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }

                List<string> colMensagemErro = new List<string>();
                new InstalacaoBUS_NEW().Finalizar_Servico_Instalacao(this.dtsPropriedades, ref colMensagemErro);

                if (this.blnUtilizaProdutoReciclavel)
                {
                    this.Selecionar_Impressora_Etiqueta_Reciclagem();
                }

                foreach (string strItem in colMensagemErro)
                {
                    MessageBox.Show("O item: " + strItem + " não foi finalizado.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

                this.Gerenciar_Imagens_Cor_Linha_Grids();
                this.Gerenciar_Botoes_Recepcao_Status_Servico();
                this.Verificar_Mudancas();
                if (this.btnAplicar.Enabled)
                {
                    if (this.Efetuar_Alteracao())
                    {
                        this.btnOk.PerformClick();
                    }
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Botao_Recepcao_Suspender_Cancelar(object sender, EventArgs e)
        {
            try
            {

                bool blnSuspender = ((Button)sender).Name == this.btnRecepcao_Suspender.Name;

                UsuarioDO objUsuarioCancelamento;
                if (!blnSuspender)
                {
                    objUsuarioCancelamento = Utilitario.Autenticar_Usuario();
                    if (objUsuarioCancelamento == null)
                        return;
                }
                else
                {
                    objUsuarioCancelamento = Root.Funcionalidades.UsuarioDO_Ativo;
                }

                if (!Root.Permissao.Obter_Permissao_Do_Usuario(objUsuarioCancelamento, Root.Loja_Ativa.ID, this.Name, blnSuspender ? Acao_Formulario.Suspender.ToString() : Acao_Formulario.Cancelar.ToString()))
                {
                    MessageBox.Show("Usuário não tem permissão para essa ação!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                string strTituloForm = blnSuspender ? "Motivo de Suspensão de serviço:" : "Motivo de Cancelamento de serviço:";
                string strMensagem = string.Empty;

                if (blnSuspender == false)
                {
                    int intTotalRegistrosReciclagemSelecionados = this.dtsPropriedades.Tables["Instalacao_IT"].Select("Marcado = 1 AND Reciclavel_Produto = 1 AND Reciclavel_Qtde > 0").Length;

                    if (intTotalRegistrosReciclagemSelecionados > 0)
                    {
                        if (intTotalRegistrosReciclagemSelecionados == 1)
                        {
                            strMensagem = "Existe serviço com reciclável vinculado, favor cancelar o acordo do reciclável antes de cancelar o serviço.";
                        }
                        else
                        {
                            strMensagem = "Existem serviços com recicláveis vinculado, favor cancelar o acordo do reciclável antes de cancelar o serviço.";
                        }

                        MessageBox.Show(strMensagem, this.Text, MessageBoxButtons.OKCancel, MessageBoxIcon.Information);
                        return;
                    }
                }

                int intTotalRegistrosSelecionados = this.dtsPropriedades.Tables["Instalacao_IT"].Select("Marcado = 1").Length;

                if (intTotalRegistrosSelecionados > 0)
                {
                    string strTipoMensagem = string.Empty;

                    if (intTotalRegistrosSelecionados == 1)
                    {
                        strTipoMensagem = blnSuspender ? "Suspenso. " : "Cancelado. ";
                        strMensagem = "O Item selecionado será ";
                    }
                    else
                    {
                        strTipoMensagem = blnSuspender ? "Suspensos. " : "Cancelados. ";
                        strMensagem = "Todos os itens selecionados serão ";
                    }

                    if (MessageBox.Show(strMensagem + strTipoMensagem + "Deseja continuar?", this.Text, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
                    {
                        return;
                    }
                }

                frmObservacao frmObservacaoCancelamento = new frmObservacao(this.Text, strTituloForm, 200, true);
                frmObservacaoCancelamento.ShowDialog(this);

                if (frmObservacaoCancelamento.DialogResult == System.Windows.Forms.DialogResult.OK)
                {
                    InstalacaoBUS_NEW busInstalacao = new InstalacaoBUS_NEW();
                    busInstalacao.Suspender_Cancelar_Servico_Instalacao(this.dtsPropriedades, blnSuspender ? Status_Instalacao.Suspensa : Status_Instalacao.Cancelada, frmObservacaoCancelamento.Observacao, objUsuarioCancelamento.ID);
                }

                this.Gerenciar_Imagens_Cor_Linha_Grids();
                this.Gerenciar_Botoes_Recepcao_Status_Servico();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Pesquisar_Cliente(object sender, EventArgs e)
        {
            Cursor.Current = Cursors.WaitCursor;
            try
            {
                frmCliente_Pesquisa_Grid frmPesquisaCliente = new frmCliente_Pesquisa_Grid();
                if (frmPesquisaCliente.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    if ((frmPesquisaCliente.DataRow != null))
                    {
                        this.txtCPF_CNPJ.Text = Convert.ToString(frmPesquisaCliente.DataRow["CNPJ_CPF"]);
                        this.Consultar_Dados_Cliente();
                    }
                }
                this.txtCPF_CNPJ.Focus();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Botao_Pesquisar_Documento(object sender, System.EventArgs e)
        {
            try
            {
                object objUsuario = Utilitario.Autenticar_Usuario();
                if (objUsuario == null)
                    return;

                if (!Root.Permissao.Obter_Permissao_Do_Usuario(objUsuario, Root.Loja_Ativa.ID, this.Name, Acao_Formulario.Solicitar_Autenticacao.ToString()))
                {
                    MessageBox.Show("Usuário não tem permissão para realizar esta ação! ", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (this.Validar_Preenchimento_Combo_Lojas())
                {
                    this.Processar_Botao_Pesquisar_Documento();
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Botao_Historico_Cliente(System.Object sender, System.EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"].ToString()))
                {
                    frmCliente_Historico_Compras frmClienteHistorico = new frmCliente_Historico_Compras(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"].ToString(), false);
                    frmClienteHistorico.Show(this);
                }

            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }

        }

        private void Clicar_Botao_Dados_Cliente(System.Object sender, System.EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"].ToString()))
                {
                    frmCliente_Resumo frmClienteResumo = new frmCliente_Resumo(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"].ToString());
                    frmClienteResumo.Show(this);
                }

            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }

        }

        private void Clicar_Grid_Instaladores(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                if (this.dgvInstaladores.Rows.Count > 0)
                {
                    if (this.dgvInstaladores.Columns[e.ColumnIndex].Name == "Marcado")
                    {
                        this.Marcar_Desmarcar_Item_Grid_Instaladores();
                    }
                    if (this.dgvInstaladores.IsCurrentCellDirty)
                    {
                        this.dgvInstaladores.CommitEdit(DataGridViewDataErrorContexts.Commit);
                    }
                }
                this.dgvInstaladores.Refresh();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Grid_Itens(object sender, DataGridViewCellEventArgs e)
        {
            Cursor.Current = Cursors.WaitCursor;

            try
            {
                if (this.dgvItens.Rows.Count > 0)
                {

                    if (this.dgvItens.Columns[e.ColumnIndex].Name == "Marcado")
                    {
                        this.Marcar_Desmarcar_Item_Grid_Itens();

                        if (this.dgvItens.IsCurrentCellDirty)
                        {
                            this.dgvItens.CommitEdit(DataGridViewDataErrorContexts.Commit);
                        }
                    }


                }
                this.dgvItens.Refresh();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Grid_Veiculos(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                if (this.dgvVeiculos.Rows.Count > 0)
                {
                    if (this.dgvVeiculos.Columns[this.dgvVeiculos.CurrentCell.ColumnIndex].Name == "Selecionado")
                    {
                        this.Marcar_Desmarcar_Item_Grid_Veiculos();
                    }
                    if (this.dgvVeiculos.IsCurrentCellDirty)
                    {
                        this.dgvVeiculos.CommitEdit(DataGridViewDataErrorContexts.Commit);
                    }

                    this.Associar_Veiculo_Item();
                }
                this.dgvVeiculos.Refresh();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Menu_Auditoria_Instalacao_CT(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                this.Processar_Menu_Auditoria_Instalacao_CT();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Menu_Auditoria_Instalacao_IT(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                this.Processar_Menu_Auditoria_Instalacao_IT();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }

        }

        private void Clicar_Menu_Auditoria_Instalacao_IT_Instalador(object sender, EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                this.Processar_Menu_Auditoria_Instalacao_IT_Instalador();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }

        }

        private void Clicar_Menu_Visualizar_Instaladores(object sender, System.EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                if ((this.lblStatusDesc.Text == "Pendente") | (this.dgvItens.SelectedRows.Count == 0))
                {
                    return;
                }

                DataRow dtrItem = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;

                this.Preencher_ToolTip_Instaladores();

                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Menu_Solicitar_Retorno_Garantia(object sender, System.EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                if ((!this.tsmSolicitarRetornoGarantia.Enabled) | (this.dgvItens.SelectedRows.Count == 0))
                {
                    return;
                }

                DataRow dtrItem = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;
                if (this.tsmSolicitarRetornoGarantia.Text == "Solicitar Retorno de Garantia")
                {
                    if ((this.dtsPropriedades.Tables["Instalacao_IT"].Select(string.Concat("Instalacao_IT_Origem_ID = '", dtrItem["Instalacao_IT_ID"], "'")).Length > 0))
                    {
                        MessageBox.Show("Já existe um Retorno de Garantia para o item selecionado!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    if (((DBUtil)new DBUtil()).Obter_Data_do_Servidor(true, TipoServidor.LojaAtual) > Convert.ToDateTime(dtrItem["Instalacao_IT_Data_Garantia"]))
                    {
                        MessageBox.Show("A tempo de garantia expirou na seguinte data: " + Convert.ToDateTime(dtrItem["Instalacao_IT_Data_Garantia"]).Date.ToString("dd/MM/yyyy"), this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }


                    this.Processar_Solicitar_Retorno_Garantia();
                    this.Atribuir_Status_Instalacao_Capa();

                }
                else
                {
                    this.Processar_Solicitar_Retorno_Garantia();
                }

                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Menu_Estorno_Cancelamento(object sender, System.EventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                if ((!this.tsmEstornoCancelamento.Enabled) | (this.dgvItens.SelectedRows.Count == 0))
                {
                    return;
                }

                DataRow dtrItem = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;
                if (Convert.ToInt32(dtrItem["Enum_Status_ID"]) == Status_Instalacao.Cancelada.ToInteger())
                {
                    if (new Romaneio_VendaBUS().Verificar_Existe_Credito_Para_Instalacao(this.dgvItens.CurrentRow.Cells["Romaneio_CT_ID"].Value.ToInteger(),
                                                                                         this.dgvItens.CurrentRow.Cells["Lojas_Origem_ID"].Value.ToInteger(),
                                                                                         this.dgvItens.CurrentRow.Cells["Servico_ID"].Value.ToInteger()))
                    {
                        MessageBox.Show("Não é possível estornar o cancelamento, já existe credito gerado para esse serviço!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    if (MessageBox.Show("O item selecionado será estornado e seu status ficará pendente, confirma?", this.Text, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                    {
                        dtrItem["Marcado"] = true;
                        dtrItem["Enum_Status_ID"] = Status_Instalacao.Pendente.ToInteger();
                        dtrItem["Instalacao_IT_Data_Inicio"] = new DateTime(1900, 1, 1);
                        dtrItem["Instalacao_IT_Data_Termino"] = new DateTime(1900, 1, 1);
                        dtrItem["Instalacao_IT_Tempo_Decorrido"] = DBNull.Value;
                        this.grbInstaladores.Enabled = true;

                        if (this.blnUtilizaProdutoReciclavel)
                        {
                            new Reciclagem_CTBUS().Estonar_Acordo_Reciclagem(dtrItem["Romaneio_IT_ID"].DefaultInteger(), dtrItem["Lojas_ID"].DefaultInteger());
                        }

                    }
                    else
                    {
                        return;
                    }
                }

                this.Setar_Imagens_Grid_Itens();
                this.Atribuir_Status_Instalacao_Capa();
                this.Verificar_Mudancas();
                if (this.btnAplicar.Enabled)
                {
                    if (this.Efetuar_Alteracao())
                    {
                        this.btnOk.PerformClick();
                    }
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Clicar_Menu_Estorno_Finalizacao(object sender, System.EventArgs e)
        {
            try
            {

                Cursor.Current = Cursors.WaitCursor;

                DataRow dtrItem = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;

                if (this.blnUtilizaProdutoReciclavel)
                {

                    Reciclagem_ITDO dtoReciclagemIT = new Reciclagem_ITBUS().Selecionar_Por_Objeto_Origem_ID(dtrItem["Romaneio_IT_ID"].DefaultInteger(), dtrItem["Lojas_ID"].DefaultInteger());

                    if (dtoReciclagemIT != null)
                    {
                        MessageBox.Show("Não é possível realizar o estorno do serviço finalizado com utilização de produto reciclável!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }

                if ((!this.tsmEstornoFinalizacao.Enabled) | (this.dgvItens.SelectedRows.Count == 0))
                {
                    return;
                }

                if (Convert.ToInt32(dtrItem["Enum_Status_ID"]) == Status_Instalacao.Finalizada.ToInteger())
                {

                    if (new Romaneio_VendaBUS().Verificar_Existe_Credito_Para_Instalacao(this.dgvItens.CurrentRow.Cells["Romaneio_CT_ID"].Value.ToInteger(),
                                                                                         this.dgvItens.CurrentRow.Cells["Lojas_Origem_ID"].Value.ToInteger(),
                                                                                         this.dgvItens.CurrentRow.Cells["Servico_ID"].Value.ToInteger()))
                    {
                        MessageBox.Show("Não é possível estornar esta finalização, pois já existe crédito gerado para esse serviço!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    if (MessageBox.Show("O item selecionado será estornado e seu status ficará pendente, confirma?", this.Text, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                    {
                        dtrItem["Servico_CD"] = dtrItem["Servico_CD"];
                        dtrItem["Servico_Descricao"] = dtrItem["Servico_Descricao"];

                        frmInstalacao_Retorno_Garantia frmInstalacaoRetornoGarantia = new frmInstalacao_Retorno_Garantia(
                            false,
                            this.dtsPropriedades.Tables["Instalacao_CT"],
                            ref dtrItem, this.dtsPropriedades.Tables["Instalacao_IT_Instalador"],
                            Instalacao_Motivo_Retorno_Garantia.Outros.DefaultInteger(),
                            "Estorno de Serviço Finalizado");

                        frmInstalacaoRetornoGarantia.ShowDialog(this);

                        if (frmInstalacaoRetornoGarantia.Registro_Alterado)
                        {

                            DataRow[] dtrItemEstorno = this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Select(
                                string.Concat("Instalacao_IT_ID = '", dtrItem["Instalacao_IT_ID"], "' AND Sequencia = ", dtrItem["Sequencia"]));

                            string strItId = dtrItemEstorno[0]["Instalacao_IT_ID"].DefaultString();

                            foreach (DataRow dtr in this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Rows)
                            {
                                if (dtr["Instalacao_IT_ID"].Equals(strItId))
                                {
                                    dtr["Instalacao_IT_Instalador_Pontos"] = 0;
                                    dtr["Instalacao_IT_Instalador_Pontos_Extra"] = 0;
                                }
                            }

                            dtrItem["Marcado"] = true;
                            dtrItem["Enum_Status_ID"] = Status_Instalacao.Pendente.ToInteger();
                            dtrItem["Instalacao_IT_Data_Inicio"] = new DateTime(1900, 1, 1);
                            dtrItem["Instalacao_IT_Data_Termino"] = new DateTime(1900, 1, 1);
                            dtrItem["Instalacao_IT_Tempo_Decorrido"] = DBNull.Value;

                            this.grbInstaladores.Enabled = true;

                        }
                        else
                        {
                            return;
                        }
                    }
                    else
                    {
                        return;
                    }
                }

                this.Setar_Imagens_Grid_Itens();
                this.Atribuir_Status_Instalacao_Capa();
                this.Verificar_Mudancas();
                if (this.btnAplicar.Enabled)
                {
                    if (this.Efetuar_Alteracao())
                    {
                        this.btnOk.PerformClick();
                    }
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void ContextMenu_Popup(object sender, System.EventArgs e)
        {
            try
            {
                this.Configurar_Menus();
            }
            catch (Exception ex)
            {

                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Data_Error_Grid_Itens(object sender, DataGridViewDataErrorEventArgs e)
        {
            try
            {
                e.Cancel = true;
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Formatar_Celula_Grid_dgvItens(object sender, DataGridViewCellFormattingEventArgs e)
        {
            try
            {
                if (this.dgvItens.Columns[e.ColumnIndex].Name == "Servico_Tempo_Restante")
                {
                    if (this.dgvItens["Servico_Atrasado", e.RowIndex].Value == null || Convert.ToString(this.dgvItens["Servico_Atrasado", e.RowIndex].Value) == string.Empty)
                    {
                        return;
                    }

                    if (Convert.ToBoolean(this.dgvItens["Servico_Atrasado", e.RowIndex].Value))
                    {
                        e.CellStyle.ForeColor = Color.Red;
                    }
                    else
                    {
                        e.CellStyle.ForeColor = Color.Green;
                    }
                }

                if (this.dgvItens.Columns[e.ColumnIndex].Name == "Imagem_Status_Romaneio")
                {
                    if ((Status_Instalacao)this.dgvItens["Enum_Status_ID", e.RowIndex].Value == Status_Instalacao.Cancelada ||
                       (Status_Instalacao)this.dgvItens["Enum_Status_ID", e.RowIndex].Value == Status_Instalacao.Suspensa)
                    {
                        DataGridViewCell dceCelula = this.dgvItens.Rows[e.RowIndex].Cells[e.ColumnIndex];
                        dceCelula.ToolTipText = this.dgvItens["Instalacao_IT_Observacao", e.RowIndex].Value.ToString();
                    }
                }

                if (this.dgvItens.Columns[e.ColumnIndex].Name == "Instalacao_IT_Observacao")
                {
                    DataGridViewCell dceCelula = this.dgvItens.Rows[e.RowIndex].Cells[e.ColumnIndex];
                    dceCelula.ToolTipText = this.dgvItens.Rows[e.RowIndex].Cells["Instalacao_IT_Observacao"].Value.ToString();
                }


            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Ganhar_Foco_Auditoria(object sender, EventArgs e)
        {
            try
            {
                this.Expandir_Menu_Auditoria();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Modificar_Texto_txtObservacao(object sender, EventArgs e)
        {
            try
            {
                this.Desativar_ToolTip_Instaladores();

                if (this.dgvItens.RowCount == 0)
                {
                    return;
                }

                if (this.txtObservacao.Text != string.Empty)
                {
                    if (Convert.ToString(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_Observacao"]) != this.txtObservacao.Text)
                    {
                        this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_Observacao"] = this.txtObservacao.Text;
                    }
                }
                else
                {
                    this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_Observacao"] = string.Empty;
                }
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Modificar_Texto_txtCPF_CNPJ(object sender, EventArgs e)
        {
            try
            {
                this.Desativar_ToolTip_Instaladores();

                if (this.Validar_TextBox_CPF_CNPJ())
                {
                    if (Convert.ToString(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_CPF_CNPJ"]) != this.txtCPF_CNPJ.Text.Replace(".", string.Empty).Replace("-", string.Empty))
                    {
                        this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_CPF_CNPJ"] = this.txtCPF_CNPJ.Text.Replace(".", string.Empty).Replace("-", string.Empty);
                    }
                }
                else
                {
                    this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"] = DBNull.Value;
                    this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_CPF_CNPJ"] = "000.000.000-00";
                }
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Modificar_Texto_txtPlaca(object sender, EventArgs e)
        {
            try
            {
                this.Desativar_ToolTip_Instaladores();

                if (this.dgvItens.RowCount == 0)
                {
                    return;
                }

                if (this.dgvItens.Rows.Count == 0)
                {
                    return;
                }

                if (this.cboVeiculo.Enabled)
                {
                    DataRow dtrItem = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;
                    if (this.txtPlaca.Text != string.Empty)
                    {
                        if (Convert.ToString(dtrItem["Instalacao_IT_Placa"]) != this.txtPlaca.Text)
                        {
                            dtrItem["Instalacao_IT_Placa"] = this.txtPlaca.Text;
                        }
                    }
                    else
                    {
                        dtrItem["Instalacao_IT_Placa"] = string.Empty;
                    }
                }
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Modificar_Texto_txtPrisma(object sender, EventArgs e)
        {
            try
            {

                this.Desativar_ToolTip_Instaladores();

                if (this.dgvItens.RowCount == 0)
                {
                    return;
                }

                DataRow dtrItem = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;
                if (this.txtPrisma.Text != string.Empty)
                {
                    if (Convert.ToString(dtrItem["Instalacao_IT_Prisma"]) != this.txtPrisma.Text)
                    {
                        dtrItem["Instalacao_IT_Prisma"] = this.txtPrisma.Text;
                    }
                }
                else
                {
                    dtrItem["Instalacao_IT_Prisma"] = 0;
                }
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Ordenar_Grid(object sender, EventArgs e)
        {
            try
            {
                this.Desativar_ToolTip_Instaladores();

                this.Gerenciar_Imagens_Cor_Linha_Grids();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Perder_Foco_cboVeiculo(object sender, EventArgs e)
        {
            try
            {
                this.Desativar_ToolTip_Instaladores();

                if (this.cboVeiculo.SelectedValue == null || this.dtsPropriedades == null || this.dtsPropriedades.Tables.Count == 0 || this.dgvItens.RowCount == 0)
                {
                    return;
                }

                DataRow dtrItemServico = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;
                if (this.cboVeiculo.Text == string.Empty)
                {
                    dtrItemServico["Veiculo_ID"] = 0;
                }
                else if (Convert.ToString(dtrItemServico["Veiculo_ID"]) != Convert.ToString(this.cboVeiculo.SelectedValue))
                {
                    dtrItemServico["Veiculo_ID"] = this.cboVeiculo.SelectedValue;
                }

                this.Verificar_Mudancas();

            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Perder_Foco_txtPlaca(object sender, EventArgs e)
        {
            try
            {
                if (this.txtPlaca.Text == String.Empty || this.dgvItens.RowCount == 0)
                {
                    return;
                }

                if (this.cboVeiculo.SelectedItem == null)
                {
                    this.txtPlaca.Text = string.Empty;
                    MessageBox.Show("Informe o veículo.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.cboVeiculo.Focus();
                    return;
                }

                DataRow dtrItemServico = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;
                dtrItemServico["Instalacao_IT_Placa"] = this.txtPlaca.Text;

                if (this.dgvVeiculos.RowCount > 0)
                {
                    this.Associar_Veiculo_Item();
                }
                else
                {
                    foreach (DataRow dtrItem in this.dtsPropriedades.Tables["Instalacao_IT"].Rows)
                    {
                        if (Convert.ToInt32(dtrItem["Veiculo_ID"]) == 0)
                        {
                            dtrItem["Veiculo_ID"] = this.cboVeiculo.SelectedValue == null ? 0 : this.cboVeiculo.SelectedValue;
                            dtrItem["Instalacao_IT_Placa"] = this.txtPlaca.Text;
                        }
                    }
                }


            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Perder_Foco_txtPrisma(object sender, EventArgs e)
        {
            try
            {
                if (this.txtPrisma.Text == String.Empty || this.dgvItens.RowCount == 0)
                {
                    return;
                }

                if (this.dtsPropriedades.Tables["Instalacao_IT"].Select("Instalacao_IT_Prisma = 0").Length > 0)
                {
                    foreach (DataRow dtrItem in this.dtsPropriedades.Tables["Instalacao_IT"].Rows)
                    {
                        if (Convert.ToInt32(dtrItem["Instalacao_IT_Prisma"]) == 0)
                        {
                            dtrItem["Instalacao_IT_Prisma"] = this.txtPrisma.Text;
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Pressionar_Tecla_Grid_Instaladores(object sender, KeyEventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                this.Desativar_ToolTip_Instaladores();

                switch (e.KeyCode)
                {
                    case Keys.Space:
                        if (this.dgvInstaladores.Rows.Count > 0)
                        {
                            if (this.dgvInstaladores.Columns[this.dgvInstaladores.CurrentCell.ColumnIndex].Name != "Marcado")
                            {
                                this.Marcar_Desmarcar_Item_Grid_Instaladores();
                            }
                        }
                        break;
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Pressionar_Tecla_Grid_Itens(object sender, KeyEventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                this.Desativar_ToolTip_Instaladores();

                switch (e.KeyCode)
                {
                    case Keys.Space:
                        if (this.dgvItens.Rows.Count > 0)
                        {
                            if (this.dgvItens.Columns[this.dgvItens.CurrentCell.ColumnIndex].Name != "Marcado")
                            {
                                this.Marcar_Desmarcar_Item_Grid_Itens();
                            }
                        }
                        break;
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Pressionar_Tecla_Grid_Veiculos(object sender, KeyEventArgs e)
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;

                this.Desativar_ToolTip_Instaladores();

                switch (e.KeyCode)
                {
                    case Keys.Space:
                        if (this.dgvVeiculos.Rows.Count > 0)
                        {
                            this.Marcar_Desmarcar_Item_Grid_Veiculos();
                        }
                        break;
                }
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            try
            {
                this.Desativar_ToolTip_Instaladores();

                if (!object.ReferenceEquals(Cursor.Current, Cursors.WaitCursor))
                {
                    if (msg.WParam.ToInt32() == Convert.ToInt32(Keys.F2))
                    {
                        if (this.txtNumeroDocumento.Focused)
                        {
                            this.btnIncluirDocumento.PerformClick();
                            return true;
                        }

                        if (this.txtCPF_CNPJ.Focused)
                        {
                            this.btnIncluir_Cliente.PerformClick();
                            return true;
                        }

                        if (this.dgvVeiculos.Focused || this.cboVeiculo.Focused || this.txtPlaca.Focused || this.txtPrisma.Focused)
                        {
                            this.btnIncluir_Veiculo.PerformClick();
                            return true;
                        }
                    }

                    if (msg.WParam.ToInt32() == Convert.ToInt32(Keys.F10))
                    {
                        if (this.dgvVeiculos.Focused || this.cboVeiculo.Focused || this.txtPlaca.Focused || this.txtPrisma.Focused)
                        {
                            this.btnSalvarVeiculo.PerformClick();
                            return true;
                        }
                    }

                    if (msg.WParam.ToInt32() == Convert.ToInt32(Keys.Delete) && this.dgvVeiculos.Focused)
                    {
                        this.btnExcluir_Veiculo.PerformClick();
                        return true;
                    }

                    if (msg.WParam.ToInt32() == Convert.ToInt32(Keys.F4))
                    {
                        if (this.txtNumeroDocumento.Focused)
                        {
                            this.btnPesquisarDocumento.PerformClick();
                            return true;
                        }

                        if (this.txtCPF_CNPJ.Focused)
                        {
                            this.btnPesquisar_Cliente.PerformClick();
                            return true;
                        }
                    }

                    if (msg.WParam.ToInt32() == Convert.ToInt32(Keys.F6) && this.dgvItens.SelectedRows.Count > 0)
                    {
                        this.Exibir_Romaneios_Liberados();
                        return true;
                    }

                    if (msg.WParam.ToInt32() == Convert.ToInt32(Keys.F7))
                    {
                        if (this.dgvVeiculos.Focused)
                        {
                            this.dgvInstaladores.Focus();
                        }
                        else if (this.dgvInstaladores.Focused)
                        {
                            this.dgvItens.Focus();
                        }
                        else
                        {
                            if (this.dgvVeiculos.Enabled)
                            {
                                this.dgvVeiculos.Focus();
                            }
                            else if (this.dgvInstaladores.Enabled)
                            {
                                this.dgvInstaladores.Focus();
                            }
                            else if (this.dgvItens.Enabled)
                            {
                                this.dgvItens.Focus();
                            }

                        }
                        return true;
                    }

                    if (msg.WParam.ToInt32() == Convert.ToInt32(Keys.F10))
                    {
                        if (this.tsmSolicitarRetornoGarantia.Enabled)
                        {
                            this.tsmSolicitarRetornoGarantia.PerformClick();
                            return true;
                        }
                    }

                    if (msg.WParam.ToInt32() == Convert.ToInt32(Keys.F11))
                    {
                        if (this.tsmEstornoCancelamento.Enabled)
                        {
                            this.tsmEstornoCancelamento.PerformClick();
                            return true;
                        }
                    }

                    if (msg.WParam.ToInt32() == Convert.ToInt32(Keys.F12))
                    {
                        if (this.tsmEstornoFinalizacao.Enabled)
                        {
                            this.tsmEstornoFinalizacao.PerformClick();
                            return true;
                        }
                    }

                    if (msg.WParam.ToInt32() == Convert.ToInt32(Keys.F9) && this.blnUtilizaProdutoReciclavel && this.dgvItens.Rows.Count > 0)
                    {
                        this.Permitir_Alterarcao_Coluna_Qtde_Reciclavel(this.dgvItens.CurrentCell.ColumnIndex);
                    }
                }
                return base.ProcessCmdKey(ref msg, keyData);
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
                return true;
            }
        }

        private void Validando_txtHoraAgendamento(object sender, CancelEventArgs e)
        {
            try
            {
                if (this.txtHoraAgendamento.Text.Trim() == string.Empty)
                {
                    return;
                }

                if (this.Validar_Hora_Agendamento())
                {
                    TimeSpan objIntervaloTempo = new TimeSpan(this.txtHoraAgendamento.Text.Left(2).ToInteger(), this.txtHoraAgendamento.Text.Right(2).ToInteger(), 0);
                    this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_Data_Agendamento"] = this.dtpDataAgendamento.Value.Date.Add(objIntervaloTempo);
                }
                else
                {
                    this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_Data_Agendamento"] = new DateTime(1900, 1, 1);
                    e.Cancel = true;
                    return;
                }
                this.Atribuir_Status_Instalacao_Capa();
                this.Verificar_Mudancas();
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Validando_TextBox_CPF_CNPJ(object sender, System.EventArgs e)
        {

            try
            {
                if (this.dgvItens.RowCount == 0)
                {
                    MessageBox.Show("Ínsira um romaneio antes de informar o Cliente!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    this.txtCPF_CNPJ.Text = "000.000.000-00";
                    return;
                }

                if (!this.Validar_TextBox_CPF_CNPJ())
                {
                    this.txtCPF_CNPJ.Text = "000.000.000-00";
                    return;
                }

                DataRow dtrCliente = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;

                this.txtCPF_CNPJ.Text = this.txtCPF_CNPJ.Text.Replace(".", string.Empty).Replace("-", string.Empty);
                DivUtil objUtil = new DivUtil();
                if (this.txtCPF_CNPJ.Text.Length <= 11)
                {
                    if (!objUtil.Validar_CPF(this.txtCPF_CNPJ.Text))
                    {
                        MessageBox.Show("CPF inválido!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        this.txtCPF_CNPJ.Focus();
                        return;
                    }
                }
                else
                {
                    if (!objUtil.Validar_CNPJ(this.txtCPF_CNPJ.Text))
                    {
                        MessageBox.Show("CNPJ inválido!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        this.txtCPF_CNPJ.Focus();
                        return;
                    }
                }

                this.Consultar_Dados_Cliente();
                this.Verificar_Mudancas();

                this.Gerenciar_GroupBox_Formulario();

            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Alterar_Marcacao_chkMostrarInstaladores(object sender, EventArgs e)
        {
            try
            {
                this.dttFuncionariosInstaladores.AcceptChanges();

                if ((this.chkMostrarInstaladoresDisponiveis.Checked) & (this.chkMostrarInstaladoresMarcados.Checked))
                {
                    this.dttFuncionariosInstaladores.DefaultView.RowFilter = "Disponivel = 1 AND Marcado = 1";
                }
                else if (this.chkMostrarInstaladoresDisponiveis.Checked)
                {
                    this.dttFuncionariosInstaladores.DefaultView.RowFilter = "Disponivel = 1";
                }
                else if (this.chkMostrarInstaladoresMarcados.Checked)
                {
                    this.dttFuncionariosInstaladores.DefaultView.RowFilter = "Marcado = 1";
                }
                else
                {
                    this.dttFuncionariosInstaladores.DefaultView.RowFilter = string.Empty;
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Clicar_Celula_dgvItens(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (this.blnUtilizaProdutoReciclavel && this.dgvItens.Rows.Count > 0 && this.dgvItens.Columns[e.ColumnIndex].Name == "Reciclavel_Qtde")
                {
                    this.Permitir_Alterarcao_Coluna_Qtde_Reciclavel(e.ColumnIndex);
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Perder_Foco_Celula_dgvItens(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (this.blnUtilizaProdutoReciclavel && this.dgvItens.Rows.Count > 0 && this.dgvItens.Columns[e.ColumnIndex].Name == "Reciclavel_Qtde")
                {
                    if (this.Validar_Acordo_Reciclavel() == false)
                    {
                        this.Mudar_Cor_Linha_Grid_Item_Recolher_Reciclavel();
                        return;
                    }

                    if (this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value.DefaultInteger() < this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Original"].Value.DefaultInteger())
                    {
                        if (this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value.DefaultInteger() == 0)
                        {
                            this.Processar_Cancelamento_Acordo_Reciclavel();
                        }
                        else
                        {
                            MessageBox.Show("Quantidade de reciclável menor do que o acordado, não é permitido a operação.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Original"].Value.DefaultInteger();
                        }

                        this.Mudar_Cor_Linha_Grid_Item_Recolher_Reciclavel();
                        return;
                    }

                    if (this.Processar_Acordo_Reciclavel())
                        this.Verificar_Mudancas();

                    this.Mudar_Cor_Linha_Grid_Item_Recolher_Reciclavel();
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }

        private void Pressionar_Tecla_Permitindo_Apenas_Decimais(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (sender == this.dgvItens && this.dgvItens.ReadOnly)
                {
                    return;
                }
                else
                {
                    if ((Int16)new DivUtil().Permitir_Digitacao_Somente_Valores(Convert.ToInt16(e.KeyChar)) == 0)
                    {
                        e.Handled = true;
                    }
                }
            }
            catch (Exception ex)
            {
                Root.Tratamento_Erro.Tratar_Erro(ex, this);
            }
        }


        #endregion

        #region "   Métodos            "

        private void Inicializar_Paramentros()
        {
            try
            {
                this.blnUtilizaProdutoReciclavel = Root.Lojas_Parametros.Verificar_Loja_Por_Parametro_Opcional(Root.Loja_Ativa.ID, "Verificar Produtos Reciclaveis", "Sim");
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Configurar_Design_Utiliza_Reciclavel()
        {
            try
            {
                this.lblLegendaReciclavel.Visible = this.blnUtilizaProdutoReciclavel;
                this.lblLegendaReciclavelDescricao.Visible = this.blnUtilizaProdutoReciclavel;

                if (this.blnUtilizaProdutoReciclavel)
                {
                    this.lblInformativo2.Text = "<<F3 = Visualizar Instaladores>>  <<F6 = Exibir Romaneios Liberados>>  <<Para visualizar o menu de opções dos serviços, clique com o botão direito>> <<F9 = Qtde Reciclável>>";
                }
                else
                {
                    this.lblInformativo2.Text = "<< F3 = Visualizar Instaladores >>  << F6 = Exibir Romaneios Liberados>>  << Para visualizar o menu de opções dos serviços, clique com o botão direito >>";
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Atribuir_Numero_Documento(ref int intRomaneioCTID, ref int intRomaneioGrupoID, ref string strRomaneioDocumentoNumero)
        {
            try
            {
                switch ((Tipo_Documento_Instalacao)this.cboTipo.SelectedValue)
                {
                    case Tipo_Documento_Instalacao.Romaneio:
                        intRomaneioCTID = this.txtNumeroDocumento.Text.ToInteger();
                        intRomaneioGrupoID = 0;
                        strRomaneioDocumentoNumero = "0";
                        break;
                    case Tipo_Documento_Instalacao.Grupo:
                        intRomaneioCTID = 0;
                        intRomaneioGrupoID = this.txtNumeroDocumento.Text.ToInteger();
                        strRomaneioDocumentoNumero = "0";
                        break;
                    case Tipo_Documento_Instalacao.Cupom:
                        intRomaneioCTID = 0;
                        intRomaneioGrupoID = 0;
                        strRomaneioDocumentoNumero = this.txtNumeroDocumento.Text;
                        break;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Atribuir_Status_Instalacao_Capa()
        {
            try
            {
                if (this.dgvItens.Rows.Count > 0)
                {
                    InstalacaoBUS_NEW busInstalacao = new InstalacaoBUS_NEW();
                    busInstalacao.Atribuir_Status_Instalacao_Capa(this.dtsPropriedades);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Atribuir_Instaladores_Instalacao()
        {
            try
            {
                if (this.dttFuncionariosInstaladores.Rows.Count == 0 || this.dgvItens.SelectedRows.Count == 0)
                {
                    return;
                }

                foreach (DataRow dtrItem in this.dttFuncionariosInstaladores.Rows)
                {
                    dtrItem["Marcado"] = 0;
                }

                this.dttFuncionariosInstaladores.DefaultView.RowFilter = string.Empty;

                DataRow[] dtrInstaladores = this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Select(string.Concat("Instalacao_IT_ID = '", this.dgvItens.CurrentRow.Cells["Instalacao_IT_ID"].Value, "'",
                                                                                                           " AND Sequencia = ", this.dgvItens.CurrentRow.Cells["Sequencia"].Value, " AND Marcado = 1"));
                foreach (DataGridViewRow dgrItem in this.dgvInstaladores.Rows)
                {
                    foreach (DataRow dtrItemInstaladores in dtrInstaladores)
                    {
                        if (Convert.ToInt32(dgrItem.Cells["Funcionario_ID"].Value) == Convert.ToInt32(dtrItemInstaladores["Funcionario_ID"]))
                        {
                            dgrItem.Cells["Marcado"].Value = true;
                        }
                    }
                }

                this.Alterar_Marcacao_chkMostrarInstaladores(null, null);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Carregar_Combo_Lojas()
        {
            try
            {
                this.cboLoja.DisplayMember = "Lojas_NM";
                this.cboLoja.ValueMember = "Lojas_ID";

                this.cboLoja.DataSource = Root.Lojas_Parametros.Retornar_Lojas_Por_Parametro_Opcional("Tipo Loja", "Loja");
                this.cboLoja.SelectedValue = Root.Loja_Ativa.ID;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Carregar_Combo_Tipo_Documento()
        {
            try
            {
                Utilitario.Preencher_ComboBox_Enumerado_Exibindo_Extenso(ref this.cboTipo, "Tipo_Documento_Instalacao");
                this.cboTipo.SelectedValue = Tipo_Documento_Instalacao.Grupo.ToInteger();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Carregar_Combo_Veiculos()
        {
            try
            {
                InstalacaoBUS busInstalacao = new InstalacaoBUS();
                DataTable dttVeiculo = busInstalacao.Consultar_DataTable_Veiculos_Montadora();

                this.cboVeiculo.DisplayMember = "Veiculo_DS";
                this.cboVeiculo.ValueMember = "Veiculo_ID";
                this.cboVeiculo.DataSource = dttVeiculo;
                this.cboVeiculo.SelectedValue = 0;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Carregar_Dados_Instalacao()
        {
            try
            {

                this.dtsPropriedades = new InstalacaoBUS_NEW().Consultar_DataSet_Propriedades_Novo(this.intIDInstalacaoCT, this.intIDLojas);

                this.Atualizar_DataSet_Reciclavel();

                if (this.dtsPropriedades.Tables["Instalacao_CT"].Rows.Count == 0)
                {
                    DataRow dtrNovaCapa = this.dtsPropriedades.Tables["Instalacao_CT"].NewRow();
                    this.dtsPropriedades.Tables["Instalacao_CT"].Rows.Add(dtrNovaCapa);
                    DataRow dtrNovoItens = this.dtsPropriedades.Tables["Instalacao_IT"].NewRow();
                    this.dtsPropriedades.Tables["Instalacao_IT"].Rows.Add(dtrNovoItens);

                }

                this.dtsPropriedadesOriginal = this.dtsPropriedades.Copy();
            }
            catch (Exception)
            {

                throw;
            }

        }

        private void Carregar_Grid_Instaladores()
        {
            try
            {
                InstalacaoBUS_NEW busInstalacao = new InstalacaoBUS_NEW();
                this.dttFuncionariosInstaladores = busInstalacao.Consultar_DataTale_Instaladores_Grid(Root.Loja_Ativa.ID);

                this.dgvInstaladores.DataSource = this.dttFuncionariosInstaladores;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Carregar_Veiculo(int intVeiculoID, string strPlaca, string strPrisma)
        {
            try
            {
                foreach (DataGridViewRow dgrItemGrid in this.dgvVeiculos.Rows)
                {
                    this.dgvVeiculos.Rows[dgrItemGrid.Index].Cells["Selecionado"].Value = false;
                }

                foreach (DataGridViewRow dgrItemGrid in this.dgvVeiculos.Rows)
                {
                    if ((Convert.ToInt32(dgrItemGrid.Cells["Veiculo_ID"].Value) == intVeiculoID) & (Convert.ToString(dgrItemGrid.Cells["Cliente_Veiculo_Placa"].Value) == strPlaca))
                    {
                        this.dgvVeiculos.Rows[dgrItemGrid.Index].Cells["Selecionado"].Value = true;
                    }
                }

                this.cboVeiculo.SelectedValue = intVeiculoID;
                this.txtPlaca.Text = strPlaca;
                this.txtPrisma.Text = strPrisma;

            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Consultar_Dados_Cliente()
        {
            try
            {
                ClienteBUS busCliente = new ClienteBUS();
                DataSet dtsCliente = new DataSet();
                dtsCliente = busCliente.Consultar_DataSet_Dados_Cliente_para_Instalacao_New(this.txtCPF_CNPJ.Text.Replace(".", string.Empty).Replace("-", string.Empty));

                if (dtsCliente.Tables[0].Rows.Count == 0)
                {

                    if (MessageBox.Show("Cliente não encontrado, deseja incluir?", this.Text, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                    {
                        this.Processar_Incluir_Cliente();
                    }
                    else
                    {
                        this.lblNomeCliente.Text = "CONSUMIDOR FINAL";
                        this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"] = Constantes.Constantes_Caixa.ID_CONSUMIDOR_FINAL;
                        this.txtCPF_CNPJ.Text = "000.000.000-00";
                        this.txtCPF_CNPJ.Focus();

                    }
                }
                else
                {
                    this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"] = dtsCliente.Tables[0].Rows[0]["Cliente_ID"].ToString();
                    this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_CPF_CNPJ"] = dtsCliente.Tables[0].Rows[0]["Cliente_CPF_CNPJ"].ToString();
                    this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_Nome"] = dtsCliente.Tables[0].Rows[0]["Cliente_Nome"].ToString();

                    this.txtCPF_CNPJ.Text = DivUtil.Formatar_CPF_CNPJ(dtsCliente.Tables[0].Rows[0]["Cliente_CPF_CNPJ"].ToString());
                    this.lblNomeCliente.Text = dtsCliente.Tables[0].Rows[0]["Cliente_Nome"].ToString();


                    this.dtsPropriedades.Tables["Cliente_Veiculo"].Clear();

                    foreach (DataRow dtrVeiculoCliente in dtsCliente.Tables["Cliente_Veiculo"].Rows)
                    {
                        if (this.dtsPropriedades.Tables["Cliente_Veiculo"].Select("Cliente_ID = '" + dtrVeiculoCliente["Cliente_ID"].ToString() + "' AND " +
                                                                                  "Cliente_Veiculo_ID = '" + dtrVeiculoCliente["Cliente_Veiculo_ID"].ToString() + "'").Length == 0)
                        {
                            DataRow dtrNovoVeiculo = this.dtsPropriedades.Tables["Cliente_Veiculo"].NewRow();
                            dtrNovoVeiculo.BeginEdit();
                            dtrNovoVeiculo["Selecionado"] = false;
                            dtrNovoVeiculo["Cliente_Veiculo_ID"] = dtrVeiculoCliente["Cliente_Veiculo_ID"];
                            dtrNovoVeiculo["Veiculo_ID"] = dtrVeiculoCliente["Veiculo_ID"];
                            dtrNovoVeiculo["Veiculo_DS"] = dtrVeiculoCliente["Veiculo_DS"];
                            dtrNovoVeiculo["Cliente_Veiculo_Placa"] = dtrVeiculoCliente["Cliente_Veiculo_Placa"];
                            dtrNovoVeiculo["Cliente_ID"] = dtrVeiculoCliente["Cliente_ID"];
                            dtrNovoVeiculo.EndEdit();
                            this.dtsPropriedades.Tables["Cliente_Veiculo"].Rows.Add(dtrNovoVeiculo);
                        }
                    }
                    this.dgvVeiculos.DataSource = this.dtsPropriedades.Tables["Cliente_Veiculo"];
                    if (this.dgvVeiculos.Rows.Count > 0)
                    {
                        this.Marcar_Desmarcar_Item_Grid_Veiculos();
                    }
                }

                this.Gerenciar_Botoes_Dados_Cliente();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Configurar_Grid_Instaladores()
        {
            try
            {
                this.dgvInstaladores.ReadOnly = true;
                this.dgvInstaladores.MultiSelect = false;
                this.dgvInstaladores.AutoGenerateColumns = false;

                this.dgvInstaladores.Adicionar_Coluna("Marcado", " ", 20, false, Enumerados.Tipo_Coluna.CheckBox, false);
                DataGridViewCheckBoxColumn objCheckColumn = (DataGridViewCheckBoxColumn)this.dgvInstaladores.Columns["Marcado"];
                objCheckColumn.ThreeState = true;
                this.dgvInstaladores.Adicionar_Coluna("Funcionario_NM_Completo", "Instalador ", 140, true, Enumerados.Tipo_Coluna.Texto, false);
                this.dgvInstaladores.Adicionar_Coluna("Classificacao", "Class.", 35, false, Enumerados.Tipo_Coluna.Texto, false);
                this.dgvInstaladores.Adicionar_Coluna("Qtde_Instalacoes", "Qtde.", 36, false, Enumerados.Tipo_Coluna.Inteiro, false);
                this.dgvInstaladores.Adicionar_Coluna("Disponivel", "Disp.", 30, false, Enumerados.Tipo_Coluna.CheckBox, false);
                this.dgvInstaladores.Adicionar_Coluna("Funcionario_ID");
                this.dgvInstaladores.Adicionar_Coluna("Enum_Classificacao_Instalador_ID");
                this.dgvInstaladores.Adicionar_Coluna("Instalador_ID");
                this.dgvInstaladores.Adicionar_Coluna("Instalador_Usuario_ID");
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Configurar_Grid_Itens()
        {
            try
            {
                this.dgvItens.ReadOnly = true;
                this.dgvItens.MultiSelect = false;
                this.dgvItens.AutoGenerateColumns = false;
                this.dgvItens.ContextMenuStrip = this.cmsMenu;

                this.dgvItens.Adicionar_Coluna("Marcado", " ", 20, false, Tipo_Coluna.CheckBox, false);
                DataGridViewCheckBoxColumn objCheckColumn = (DataGridViewCheckBoxColumn)this.dgvInstaladores.Columns["Marcado"];
                objCheckColumn.ThreeState = true;
                this.dgvItens.Adicionar_Coluna("Romaneio_CT_ID", "Romaneio", 70, false, Tipo_Coluna.Texto, false);
                this.dgvItens.Adicionar_Coluna("Imagem_Status_Romaneio", " ", 24, false, Tipo_Coluna.Imagem, false);
                this.dgvItens.Adicionar_Coluna("Servico_Classificacao", "Class.", 35, false, Tipo_Coluna.Texto, false);
                this.dgvItens.Adicionar_Coluna("Servico_CD", "Cód.", 37, false, Tipo_Coluna.Texto, false);
                this.dgvItens.Adicionar_Coluna("Servico_Descricao", "Serviço", 350, true, Tipo_Coluna.Texto, false);
                this.dgvItens.Adicionar_Coluna("Instalacao_IT_Qtde", "Qtde.", 36, false, Tipo_Coluna.Inteiro, false);
                this.dgvItens.Adicionar_Coluna("Instalacao_IT_Preco_Pago", "Valor (R$)", 62, false, Tipo_Coluna.Decimal, false);
                this.dgvItens.Adicionar_Coluna("Instalacao_IT_Tempo", "Tempo Previsto", 90, false, Tipo_Coluna.Texto, false);
                this.dgvItens.Columns["Instalacao_IT_Tempo"].DefaultCellStyle.Format = "t";
                this.dgvItens.Adicionar_Coluna("Servico_Tempo_Restante", "Tempo Restante", 95, false, Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                this.dgvItens.Adicionar_Coluna("Instalacao_IT_Pontos", "Pontos", 45, false, Tipo_Coluna.Inteiro, false);

                if (this.blnUtilizaProdutoReciclavel)
                {
                    this.dgvItens.Adicionar_Coluna("Reciclavel_Qtde", "Qtde. Reciclável", 95, false, Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                    this.dgvItens.Adicionar_Coluna("Reciclavel_Produto", "Reciclável", 60, false, Tipo_Coluna.CheckBox, false);

                    this.dgvItens.Adicionar_Coluna("Reciclavel_Qtde_Original");
                    this.dgvItens.Adicionar_Coluna("Reciclavel_Qtde_Anterior");
                    this.dgvItens.Adicionar_Coluna("Produto_Reciclavel_Desconto");
                    this.dgvItens.Adicionar_Coluna("Produto_Emitir_Etiqueta_Receber_Reciclavel");
                }

                this.dgvItens.Adicionar_Coluna("Instalacao_IT_Observacao", "Observação", 200, false, Tipo_Coluna.Texto, false);

                this.dgvItens.Adicionar_Coluna("Romaneio_IT_ID");
                this.dgvItens.Adicionar_Coluna("Lojas_Origem_ID");
                this.dgvItens.Adicionar_Coluna("Servico_ID");
                this.dgvItens.Adicionar_Coluna("Sequencia");
                this.dgvItens.Adicionar_Coluna("Enum_Classificacao_Servico_ID");
                this.dgvItens.Adicionar_Coluna("Enum_Status_ID");
                this.dgvItens.Adicionar_Coluna("Instalacao_IT_Data_Inicio");
                this.dgvItens.Adicionar_Coluna("Instalacao_IT_Data_Termino");
                this.dgvItens.Adicionar_Coluna("Servico_Atrasado");
                this.dgvItens.Adicionar_Coluna("Lojas_ID");
                this.dgvItens.Adicionar_Coluna("Romaneio_Grupo_ID");
                this.dgvItens.Adicionar_Coluna("Status_Romaneio");
                this.dgvItens.Adicionar_Coluna("Instalacao_IT_ID");

                this.dgvItens.Adicionar_Coluna("Instalacao_IT_Origem_ID");
                this.dgvItens.Adicionar_Coluna("Veiculo_ID");
                this.dgvItens.Adicionar_Coluna("Instalacao_IT_Placa");
                this.dgvItens.Adicionar_Coluna("Romaneio_It_Preco_Lista");

                this.dgvItens.Adicionar_Coluna("Romaneio_Venda_Grupo_ID");
                this.dgvItens.Adicionar_Coluna("Romaneio_Venda_CT_ID");
                this.dgvItens.Adicionar_Coluna("Romaneio_Venda_IT_ID");
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Configurar_Grid_Veiculos()
        {
            try
            {
                this.dgvVeiculos.ReadOnly = true;
                this.dgvVeiculos.MultiSelect = false;
                this.dgvVeiculos.AutoGenerateColumns = false;

                this.dgvVeiculos.Adicionar_Coluna("Selecionado", " ", 20, false, Tipo_Coluna.CheckBox);
                this.dgvVeiculos.RowTemplate.Height = 18;
                this.dgvVeiculos.Adicionar_Coluna("Veiculo_DS", "Veiculo", 80, true, Tipo_Coluna.Texto);
                this.dgvVeiculos.Adicionar_Coluna("Cliente_Veiculo_Placa", "Placa", 75, false, Tipo_Coluna.Texto);
                this.dgvVeiculos.Adicionar_Coluna("Veiculo_ID");
                this.dgvVeiculos.Adicionar_Coluna("Cliente_ID");
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void Configurar_Menus()
        {
            try
            {
                if (this.dgvItens.Rows.Count > 0)
                {
                    this.tsmSolicitarRetornoGarantia.Enabled = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, Root.Loja_Ativa.ID, this.Name, Acao_Formulario.Solicitar_Retorno_Servico_Garantia.ToString()) &&
                                                                                                     (((Status_Instalacao)this.dgvItens.CurrentRow.Cells["Enum_Status_ID"].Value == Status_Instalacao.Finalizada)
                                                                                                        |
                                                                                                        (this.dgvItens.CurrentRow.Cells["Instalacao_IT_Origem_ID"].Value.DefaultString() != string.Empty));

                    this.tsmVisualizarInstaladores.Enabled = (this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Select(string.Concat("Instalacao_IT_ID = '", this.dgvItens.CurrentRow.Cells["Instalacao_IT_ID"].Value, "'")).Length > 0);
                }
                else
                {
                    this.tsmSolicitarRetornoGarantia.Enabled = false;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Definir_Formulario_Estilo()
        {
            try
            {
                Form_Designer.Definir_Imagem_Logo_Instalacao(this.picLogo_Instalacao);

                Form_Designer.Definir_Botao_Estilo_Incluir(this.btnIncluirDocumento);
                Form_Designer.Definir_Botao_Estilo_Pesquisar(this.btnPesquisarDocumento);

                Form_Designer.Definir_Botao_Estilo_Incluir(this.btnIncluir_Cliente);
                Form_Designer.Definir_Botao_Estilo_Pesquisar(this.btnPesquisar_Cliente);

                Form_Designer.Definir_Botao_Estilo_Confirmar(this.btnSalvarVeiculo);
                Form_Designer.Definir_Botao_Estilo_Incluir(this.btnIncluir_Veiculo);
                Form_Designer.Definir_Botao_Estilo_Excluir(this.btnExcluir_Veiculo);

                Form_Designer.Definir_Botao_Estilo_Iniciar(this.btnRecepcao_Iniciar);
                Form_Designer.Definir_Botao_Estilo_Finalizar(this.btnRecepcao_Finalizar);
                Form_Designer.Definir_Botao_Estilo_Suspender(this.btnRecepcao_Suspender);
                Form_Designer.Definir_Botao_Estilo_Cancelar(this.btnRecepcao_Cancelar);

                Form_Designer.Definir_Imagem_Bolinha_Vermelha(this.picBolinhaVermelha);
                Form_Designer.Definir_Imagem_Bolinha_Preta(this.picBolinhaPreta);
                Form_Designer.Definir_Imagem_Bolinha_Amarela(this.picBolinhaAmarela);
                Form_Designer.Definir_Imagem_Bolinha_Azul(this.picBolinhaAzul);
                Form_Designer.Definir_Imagem_Bolinha_Verde(this.picBolinhaVerde);

                Form_Designer.Configurar_Designer_Padrao_MercadoCar(this);

                this.lblInformativo2.ForeColor = Color.Gray;
                this.grbDadosAgendamento.Enabled = false;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Desativar_ToolTip_Instaladores()
        {
            try
            {
                if (this.totDetalheItem.Active)
                {
                    this.totDetalheItem.Active = false;
                    this.totDetalheItem.Hide(this);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public override bool Efetuar_Alteracao()
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                InstalacaoBUS_NEW busInstalacao = new InstalacaoBUS_NEW();
                string strMensagemErro = string.Empty;
                if (this.txtHoraAgendamento.Text == string.Empty && this.grbDadosAgendamento.Enabled)
                {
                    MessageBox.Show("Preencha corretamente as informações do agendamento!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.txtHoraAgendamento.Focus();
                    return false;
                }

                if (this.dgvItens.Rows.Count == 0)
                {
                    MessageBox.Show("Nenhum romaneio foi informado para ser instalado!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.txtNumeroDocumento.Focus();
                    return false;
                }


                if (busInstalacao.Validar_Se_Servico_Possui_Instalador(this.dtsPropriedades, ref strMensagemErro))
                {
                    busInstalacao.Tratar_DataSet(ref this.dtsPropriedades, ref this.dtsPropriedadesOriginal, ref this.busEtiquetaCT, this.colPreVenda);

                    this.Atualizar_Itens_Instalados_Novas_Tabelas();

                    this.intIDInstalacaoCT = Convert.ToInt32(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_ID"]);
                    this.intIDLojas = Convert.ToInt32(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Lojas_ID"]);
                    this.Carregar_Dados_Instalacao();
                    this.Preencher_Dados_Instalacao();
                    this.Verificar_Mudancas();
                    this.Gerenciar_Imagens_Cor_Linha_Grids();
                    this.Registro_Alterado = true;
                    this.btnAplicar.Enabled = false;

                    this.colPreVenda.Clear();

                    if (this.blnPermissaoIncluir && !this.btnAplicar.Enabled)
                    {
                        this.btnOk.Enabled = true;
                    }

                    return true;
                }
                else
                {
                    MessageBox.Show(strMensagemErro, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.dgvInstaladores.Focus();
                }


                return false;
            }
            catch (Exception)
            {
                this.colPreVenda.Clear();
                throw;
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void Exibir_Romaneios_Liberados()
        {
            try
            {
                if (this.dgvItens.SelectedRows.Count == 0)
                {
                    return;
                }
                DataGridViewRow dgrItem = this.dgvItens.SelectedRows[0];

                var romaneioVendaGrupo = new Romaneio_Venda_GrupoBUS().Selecionar_Dados_Origem_Romaneio_Venda_CT_Por_Grupo(dgrItem.Cells["Romaneio_Grupo_ID"].Value.DefaultInteger(),
                                                                                                                           dgrItem.Cells["Lojas_Origem_ID"].Value.DefaultInteger());

                frmRomaneio_Propriedades frmVendaPropriedades = new frmRomaneio_Propriedades(romaneioVendaGrupo["Romaneio_Venda_Grupo_ID"].DefaultInteger(), 0,
                                                                                             Convert.ToInt32(dgrItem.Cells["Lojas_Origem_ID"].Value), true);
                frmVendaPropriedades.Show(this);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Expandir_Menu_Auditoria()
        {
            try
            {
                this.btnAuditoria.ShowContextMenuStrip();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Gerenciar_Controles_Veiculos()
        {
            try
            {
                if (this.dgvItens.Rows.Count == 0)
                {
                    return;
                }

                if (((Status_Instalacao)this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Enum_Status_ID"] == Status_Instalacao.Finalizada) ||
                    ((Status_Instalacao)this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Enum_Status_ID"] == Status_Instalacao.Cancelada))
                {
                    this.grbVeiculos.Enabled = false;
                }
                else
                {
                    this.grbVeiculos.Enabled = true;
                }


                if (this.txtCPF_CNPJ.Text == "000.000.000-00")
                {
                    this.btnSalvarVeiculo.Enabled = false;
                    this.btnExcluir_Veiculo.Enabled = false;
                }
                else
                {
                    this.btnSalvarVeiculo.Enabled = this.cboVeiculo.Enabled;
                    this.btnExcluir_Veiculo.Enabled = this.btnSalvarVeiculo.Enabled && this.dgvVeiculos.Rows.Count > 0;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Gerenciar_Botoes_Recepcao_Status_Servico()
        {
            try
            {
                if (this.dgvItens.Rows.Count == 0)
                {
                    this.btnRecepcao_Iniciar.Enabled = false;
                    this.btnRecepcao_Finalizar.Enabled = false;
                    this.btnRecepcao_Suspender.Enabled = false;
                    this.btnRecepcao_Cancelar.Enabled = false;
                    return;
                }

                DataRow dtrItem = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;

                this.btnRecepcao_Iniciar.Enabled = this.blnPermissaoRecepcaoIniciar &&
                                                   (this.blnPermissaoAlterar || (this.blnPermissaoIncluir && this.intIDInstalacaoCT == 0)) &&
                                                   Convert.ToBoolean(dtrItem["Marcado"]) &&
                                                   (this.Validar_Servico_Possui_Instalador()) &&
                                                   ((Status_Instalacao)dtrItem["Enum_Status_ID"] == Status_Instalacao.Pendente || (Status_Instalacao)dtrItem["Enum_Status_ID"] == Status_Instalacao.Suspensa ? true : false);
                this.btnRecepcao_Finalizar.Enabled = this.blnPermissaoRecepcaoFinalizar && (this.blnPermissaoAlterar || (this.blnPermissaoIncluir && this.intIDInstalacaoCT == 0)) &&
                                                     Convert.ToBoolean(dtrItem["Marcado"]) &&
                                                     (Status_Instalacao)dtrItem["Enum_Status_ID"] == Status_Instalacao.Em_Andamento ? true : false;
                this.btnRecepcao_Suspender.Enabled = (this.blnPermissaoAlterar || (this.blnPermissaoIncluir && this.intIDInstalacaoCT == 0)) && Convert.ToBoolean(dtrItem["Marcado"]) &&
                                                     (Status_Instalacao)dtrItem["Enum_Status_ID"] == Status_Instalacao.Em_Andamento ? true : false;
                this.btnRecepcao_Cancelar.Enabled = (Convert.ToBoolean(dtrItem["Marcado"]) && (Status_Instalacao)dtrItem["Enum_Status_ID"] == Status_Instalacao.Pendente ? true : false ||
                                                    (Status_Instalacao)dtrItem["Enum_Status_ID"] == Status_Instalacao.Em_Andamento ? true : false);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Gerenciar_Botoes_Dados_Cliente()
        {
            try
            {
                if (this.lblNomeCliente.Text == "CONSUMIDOR FINAL")
                {
                    this.btnDadosCliente.Enabled = false;
                    this.btnHistoricoCliente.Enabled = false;
                    this.btnSalvarVeiculo.Enabled = false;
                }
                else
                {
                    this.btnDadosCliente.Enabled = true;
                    this.btnHistoricoCliente.Enabled = true;
                    this.btnSalvarVeiculo.Enabled = true;

                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Gerenciar_GroupBox_Formulario()
        {
            try
            {
                this.dgvVeiculos.Enabled = this.txtCPF_CNPJ.Text != "000.000.000-00";
                if (this.intIDInstalacaoCT != 0)
                {
                    this.btnSalvarVeiculo.Enabled = this.dgvVeiculos.Enabled && this.blnPermissaoAlterar;
                    this.btnExcluir_Veiculo.Enabled = this.blnPermissaoAlterar && this.dgvVeiculos.Rows.Count > 0;

                    if (this.lblStatusDesc.Text != "Pendente")
                    {
                        this.cboLoja.Enabled = false;
                        this.cboTipo.Enabled = false;
                        this.txtNumeroDocumento.Enabled = false;
                        this.btnPesquisarDocumento.Enabled = false;
                        this.btnIncluirDocumento.Enabled = false;

                        if (this.txtCPF_CNPJ.Text != Constantes.Constantes_Caixa.DOCUMENTO_CONSUMIDOR_FINAL_FORMATADO || this.lblStatusDesc.Text == "Finalizado" || this.lblStatusDesc.Text == "Cancelada")
                        {
                            this.txtCPF_CNPJ.Enabled = false;
                            this.btnPesquisar_Cliente.Enabled = false;
                            this.btnIncluir_Cliente.Enabled = false;
                        }
                    }
                }
                else
                {
                    this.btnSalvarVeiculo.Enabled = this.dgvVeiculos.Enabled && this.blnPermissaoIncluir;
                    this.btnExcluir_Veiculo.Enabled = this.blnPermissaoIncluir && this.dgvVeiculos.Rows.Count > 0;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Gerenciar_Formulario()
        {
            try
            {
                this.Gerenciar_GroupBox_Formulario();
                this.Gerenciar_Botoes_Recepcao_Status_Servico();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Gerenciar_Imagens_Cor_Linha_Grids()
        {
            try
            {
                this.Setar_Imagens_Grid_Itens();
                this.Mudar_Cor_Linha_Grid_Item_Retorno_Garantia();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Limpar_Campos_Formulario()
        {
            try
            {
                this.lblNumInstalacaoDesc.Text = string.Empty;
                this.lblLojaAtivaDesc.Text = string.Empty;
                this.lblDataInstalacao.Text = string.Empty;
                this.lblStatusDesc.Text = string.Empty;
                this.lblNomeInstalacao.Text = string.Empty;
                this.txtNumeroDocumento.Text = string.Empty;
                this.txtObservacao.Text = string.Empty;
                this.txtCPF_CNPJ.Text = "000.000.000-00";
                this.txtPlaca.Text = string.Empty;
                this.txtPrisma.Text = string.Empty;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Marcar_Desmarcar_Item_Grid_Instaladores()
        {
            try
            {
                if (this.dgvItens.Rows.Count == 0)
                {
                    return;
                }
                DataGridViewRow dgrItem = this.dgvInstaladores.CurrentRow;

                switch ((CheckState)dgrItem.Cells["Marcado"].Value)
                {
                    case CheckState.Checked:
                        dgrItem.Cells["Marcado"].Value = CheckState.Unchecked;

                        DataRow[] dtrVinculados = this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Select("Funcionario_Instalacao_ID = " + Convert.ToInt32(dgrItem.Cells["Funcionario_ID"].Value) +
                                                                             " AND Instalacao_IT_Instalador_Termino IS NULL");


                        if (dtrVinculados.Length > 1)
                        {
                            if (MessageBox.Show("Deseja desvincular este instalador dos demais itens?", this.Text, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                            {
                                foreach (DataGridViewRow dgrItemGrid in this.dgvItens.Rows) // Verifica para todos os itens da instalação quais já tem este instalador vinculado
                                {

                                    DataRow[] dtrItemInstalador = this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Select(string.Concat("Romaneio_IT_ID = ", dgrItemGrid.Cells["Romaneio_IT_ID"].Value.DefaultInteger(),
                                                                                                                                             " AND Lojas_Origem_ID = ", dgrItemGrid.Cells["Lojas_Origem_ID"].Value.DefaultInteger(),
                                                                                                                                             " AND Sequencia = ", dgrItemGrid.Cells["Sequencia"].Value.DefaultInteger(),
                                                                                                                                             " AND Instalacao_IT_ID = '", dgrItemGrid.Cells["Instalacao_IT_ID"].Value.DefaultString(), "'",
                                                                                                                                             " AND Funcionario_Instalacao_ID = ", dgrItem.Cells["Funcionario_ID"].Value.DefaultInteger(),
                                                                                                                                             " AND Instalacao_IT_Instalador_Termino IS NULL"));


                                    if (dtrItemInstalador.Length != 0) // Já tem este instalador vinculado a este serviço, portanto desvincular...
                                    {
                                        this.Tratar_Instalador(Convert.ToInt32(dgrItem.Cells["Funcionario_ID"].Value), Convert.ToInt32(dgrItem.Cells["Instalador_Usuario_ID"].Value), (dgrItem.Cells["Enum_Classificacao_Instalador_ID"].Value == DBNull.Value ? Enumerados.Classificacao_Instalador.A.ToInteger() : Convert.ToInt32(dgrItem.Cells["Enum_Classificacao_Instalador_ID"].Value)), dgrItemGrid);
                                    }
                                }
                            }
                            else // Desvincular o instalador apenas do serviço selecionado
                            {
                                this.Tratar_Instalador(Convert.ToInt32(dgrItem.Cells["Funcionario_ID"].Value), Convert.ToInt32(dgrItem.Cells["Instalador_Usuario_ID"].Value), (dgrItem.Cells["Enum_Classificacao_Instalador_ID"].Value == DBNull.Value ? Enumerados.Classificacao_Instalador.A.ToInteger() : Convert.ToInt32(dgrItem.Cells["Enum_Classificacao_Instalador_ID"].Value)), this.dgvItens.CurrentRow);
                            }
                        }
                        else // Desvincular o instalador apenas do serviço selecionado
                        {
                            this.Tratar_Instalador(Convert.ToInt32(dgrItem.Cells["Funcionario_ID"].Value), Convert.ToInt32(dgrItem.Cells["Instalador_Usuario_ID"].Value), (dgrItem.Cells["Enum_Classificacao_Instalador_ID"].Value == DBNull.Value ? Enumerados.Classificacao_Instalador.A.ToInteger() : Convert.ToInt32(dgrItem.Cells["Enum_Classificacao_Instalador_ID"].Value)), this.dgvItens.CurrentRow);
                        }

                        break;
                    case CheckState.Unchecked:
                        dgrItem.Cells["Marcado"].Value = CheckState.Checked;

                        if (this.dtsPropriedades.Tables["Instalacao_IT"].Select("Instalacao_IT_Data_Termino = '1/1/1900'").Length > 1)
                        {
                            if (MessageBox.Show("Deseja associar este instalador aos demais itens?", this.Text, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                            {
                                foreach (DataGridViewRow dgrItemGrid in this.dgvItens.Rows) // Verifica para todos os itens da instalação quais já tem este instalador vinculado
                                {

                                    DataRow[] dtrItemInstalador = this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Select(string.Concat("Romaneio_IT_ID = ", dgrItemGrid.Cells["Romaneio_IT_ID"].Value.DefaultInteger(),
                                                                                                                                             " AND Lojas_Origem_ID = ", dgrItemGrid.Cells["Lojas_Origem_ID"].Value.DefaultInteger(),
                                                                                                                                             " AND Sequencia = ", dgrItemGrid.Cells["Sequencia"].Value.DefaultInteger(),
                                                                                                                                             " AND Instalacao_IT_ID = '", dgrItemGrid.Cells["Instalacao_IT_ID"].Value.DefaultString(), "'",
                                                                                                                                             " AND Funcionario_Instalacao_ID = ", dgrItem.Cells["Funcionario_ID"].Value.DefaultInteger(),
                                                                                                                                             " AND Instalacao_IT_Instalador_Termino IS NULL"));


                                    if (dtrItemInstalador.Length == 0) // Ainda não tem este instalador vinculado a este serviço, portanto vincular...
                                    {
                                        this.Tratar_Instalador(Convert.ToInt32(dgrItem.Cells["Funcionario_ID"].Value), Convert.ToInt32(dgrItem.Cells["Instalador_Usuario_ID"].Value), (dgrItem.Cells["Enum_Classificacao_Instalador_ID"].Value == DBNull.Value ? Enumerados.Classificacao_Instalador.A.ToInteger() : Convert.ToInt32(dgrItem.Cells["Enum_Classificacao_Instalador_ID"].Value)), dgrItemGrid);
                                    }
                                }
                            }
                            else // Vincular o instalador apenas ao serviço selecionado
                            {
                                this.Tratar_Instalador(Convert.ToInt32(dgrItem.Cells["Funcionario_ID"].Value), Convert.ToInt32(dgrItem.Cells["Instalador_Usuario_ID"].Value), (dgrItem.Cells["Enum_Classificacao_Instalador_ID"].Value == DBNull.Value ? Enumerados.Classificacao_Instalador.A.ToInteger() : Convert.ToInt32(dgrItem.Cells["Enum_Classificacao_Instalador_ID"].Value)), this.dgvItens.CurrentRow);
                            }
                        }
                        else // Vincular o instalador apenas ao serviço selecionado
                        {
                            this.Tratar_Instalador(Convert.ToInt32(dgrItem.Cells["Funcionario_ID"].Value), Convert.ToInt32(dgrItem.Cells["Instalador_Usuario_ID"].Value), (dgrItem.Cells["Enum_Classificacao_Instalador_ID"].Value == DBNull.Value ? Enumerados.Classificacao_Instalador.A.ToInteger() : Convert.ToInt32(dgrItem.Cells["Enum_Classificacao_Instalador_ID"].Value)), this.dgvItens.CurrentRow);
                        }

                        break;
                    default:
                        break;
                }


                this.Gerenciar_Botoes_Recepcao_Status_Servico();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Tratar_Instalador(int intFuncionarioID, int intUsuarioIDFuncionario, int intClassificacaoInstaladorID, DataGridViewRow dgrItemServico)
        {
            try
            {
                DataRow[] dtrItemInstalador = this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Select(string.Concat("Romaneio_IT_ID = ", dgrItemServico.Cells["Romaneio_IT_ID"].Value.DefaultInteger(),
                                                                                                                         " AND Lojas_Origem_ID = ", dgrItemServico.Cells["Lojas_Origem_ID"].Value.DefaultInteger(),
                                                                                                                         " AND Sequencia = ", dgrItemServico.Cells["Sequencia"].Value.DefaultInteger(),
                                                                                                                         " AND Instalacao_IT_ID = '", dgrItemServico.Cells["Instalacao_IT_ID"].Value.DefaultString(), "'",
                                                                                                                         " AND Funcionario_Instalacao_ID = ", intFuncionarioID,
                                                                                                                         " AND Instalacao_IT_Instalador_Termino IS NULL"));
                if (dtrItemInstalador.Length == 0)
                {

                    DataRow dtrNovoItem = this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].NewRow();
                    dtrNovoItem["Instalacao_IT_Instalador_ID"] = 0;
                    dtrNovoItem["Instalacao_IT_ID"] = dgrItemServico.Cells["Instalacao_IT_ID"].Value.DefaultString();
                    dtrNovoItem["Instalacao_IT_Lojas_ID"] = dgrItemServico.Cells["Instalacao_IT_Origem_ID"].Value.DefaultString() == string.Empty ? Convert.ToInt32(dgrItemServico.Cells["Lojas_ID"].Value) : Root.Loja_Ativa.ID;
                    dtrNovoItem["Funcionario_Instalacao_ID"] = intFuncionarioID;
                    dtrNovoItem["Instalador_Usuario_ID"] = intUsuarioIDFuncionario;
                    dtrNovoItem["Enum_Classificacao_Instalador_ID"] = intClassificacaoInstaladorID;
                    dtrNovoItem["Instalacao_IT_Instalador_Inicio"] = (Status_Instalacao)dgrItemServico.Cells["Enum_Status_ID"].Value == Status_Instalacao.Em_Andamento ? ((DBUtil)new DBUtil()).Obter_Data_do_Servidor(true, TipoServidor.LojaAtual) : (object)DBNull.Value;
                    dtrNovoItem["Sequencia"] = Convert.ToInt32(dgrItemServico.Cells["Sequencia"].Value);
                    dtrNovoItem["Romaneio_IT_ID"] = Convert.ToInt32(dgrItemServico.Cells["Romaneio_IT_ID"].Value);
                    dtrNovoItem["Lojas_Origem_ID"] = Convert.ToInt32(dgrItemServico.Cells["Lojas_Origem_ID"].Value);
                    dtrNovoItem["Marcado"] = true;
                    dtrNovoItem["Funcionario_ID"] = intFuncionarioID;
                    dtrNovoItem["Servico_Pontos_Valor"] = this.Obter_Pontuacao_Servico_Instalador(Convert.ToInt32(dgrItemServico.Cells["Servico_ID"].Value), (Classificacao_Instalador)intClassificacaoInstaladorID);
                    this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Rows.Add(dtrNovoItem);
                }
                else
                {
                    if (Convert.ToString(dtrItemInstalador[0]["Instalacao_IT_Instalador_Inicio"]) == string.Empty)
                    {
                        this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Rows.Remove(dtrItemInstalador[0]);
                    }
                    else
                    {
                        dtrItemInstalador[0]["Instalacao_IT_Instalador_Termino"] = ((DBUtil)new DBUtil()).Obter_Data_do_Servidor(true, TipoServidor.LojaAtual);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private int Obter_Pontuacao_Servico_Instalador(int intServicoID, Classificacao_Instalador enumClassificacaoInstalador)
        {
            try
            {
                ServicoBUS busServico = new ServicoBUS();
                DataRow[] dtrServicoPontos = busServico.Selecionar_Servico_Pontos_Por_Servico(intServicoID).Select("Enum_Classificacao_Instalador_ID = " + enumClassificacaoInstalador.ToInteger());
                if (dtrServicoPontos.Length > 0)
                {
                    return Convert.ToInt32(dtrServicoPontos[0]["Servico_Pontos_Valor"]);
                }
                return 0;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Marcar_Desmarcar_Item_Grid_Itens()
        {
            try
            {
                DataGridViewRow dgrItem = this.dgvItens.CurrentRow;
                if ((Status_Instalacao)dgrItem.Cells["Enum_Status_ID"].Value == Status_Instalacao.Cancelada ||
                    (Status_Instalacao)dgrItem.Cells["Enum_Status_ID"].Value == Status_Instalacao.Finalizada)
                {
                    return;
                }

                dgrItem.Cells["Marcado"].Value = !Convert.ToBoolean(dgrItem.Cells["Marcado"].Value);
                this.Gerenciar_Botoes_Recepcao_Status_Servico();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Marcar_Desmarcar_Item_Grid_Veiculos()
        {
            try
            {
                DataRow dtrItemVeiculo = ((DataRowView)this.dgvVeiculos.CurrentRow.DataBoundItem).Row;
                DataRow dtrItemServico = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;


                foreach (DataGridViewRow dgrItemGrid in this.dgvVeiculos.Rows)
                {
                    if (Convert.ToBoolean(dgrItemGrid.Cells["Selecionado"].Value) == true)
                    {
                        if ((Convert.ToInt32(dgrItemGrid.Cells["Veiculo_ID"].Value) != Convert.ToInt32(dtrItemVeiculo["Veiculo_ID"])) || (Convert.ToString(dgrItemGrid.Cells["Cliente_Veiculo_Placa"].Value) != Convert.ToString(dtrItemVeiculo["Cliente_Veiculo_Placa"])))
                        {
                            if (Convert.ToBoolean(dgrItemGrid.Cells["Selecionado"].Value) == true)
                            {
                                MessageBox.Show("Só é permitido um veículo por Serviço, para selecionar outro veículo desmarque o atual!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                        }
                    }
                }

                dtrItemVeiculo["Selecionado"] = !Convert.ToBoolean(dtrItemVeiculo["Selecionado"]);

                if (Convert.ToBoolean(dtrItemVeiculo["Selecionado"]))
                {
                    dtrItemServico["Veiculo_ID"] = dtrItemVeiculo["Veiculo_ID"];
                    dtrItemServico["Instalacao_IT_Placa"] = dtrItemVeiculo["Cliente_Veiculo_Placa"];
                }
                else
                {
                    dtrItemServico["Veiculo_ID"] = 0;
                    dtrItemServico["Instalacao_IT_Placa"] = string.Empty;
                }

                this.dtsPropriedades.Tables["Cliente_Veiculo"].AcceptChanges();

            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Associar_Veiculo_Item()
        {
            try
            {
                DataRow dtrItemVeiculo = ((DataRowView)this.dgvVeiculos.CurrentRow.DataBoundItem).Row;

                if (Convert.ToBoolean(dtrItemVeiculo["Selecionado"]))
                {
                    if (this.dtsPropriedades.Tables["Instalacao_IT"].Select("Instalacao_IT_Data_Termino = '1/1/1900'").Length > 1)
                    {
                        if (this.dtsPropriedades.Tables["Instalacao_IT"].Select("Veiculo_ID = 0").Length > 0)
                        {
                            if (MessageBox.Show("Deseja associar este veículo aos demais itens?", this.Text, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                            {
                                foreach (DataRow dtrItem in this.dtsPropriedades.Tables["Instalacao_IT"].Rows)
                                {
                                    if (Convert.ToInt32(dtrItem["Veiculo_ID"]) == 0)
                                    {
                                        dtrItem["Veiculo_ID"] = this.cboVeiculo.SelectedValue == null ? 0 : this.cboVeiculo.SelectedValue;
                                        dtrItem["Instalacao_IT_Placa"] = this.txtPlaca.Text;
                                    }
                                }
                            }
                        }

                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Mudar_Cor_Linha_Grid_Item_Retorno_Garantia()
        {
            try
            {
                foreach (DataGridViewRow dgrItemGrid in this.dgvItens.Rows)
                {
                    if (dgrItemGrid.Cells["Instalacao_IT_Origem_ID"].Value.DefaultString() != string.Empty)
                    {
                        this.dgvItens.Rows[dgrItemGrid.Index].DefaultCellStyle.BackColor = Color.Silver;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Mudar_Cor_Linha_Grid_Item_Recolher_Reciclavel()
        {
            try
            {
                if (this.blnUtilizaProdutoReciclavel == false)
                {
                    return;
                }

                int intLinhaAtualDaGrid = this.dgvItens.CurrentRow.Index;

                foreach (DataGridViewRow dgrItemGrid in this.dgvItens.Rows)
                {
                    this.dgvItens.Rows[dgrItemGrid.Index].DefaultCellStyle.BackColor = Form_Designer.Cor_Colorir_Ao_Selecionar;

                    if (dgrItemGrid.Cells["Reciclavel_Produto"].Value.DefaultBool())
                    {
                        this.dgvItens.Rows[dgrItemGrid.Index].DefaultCellStyle.BackColor = Color.MediumAquamarine;
                    }
                }

                this.dgvItens.Rows[intLinhaAtualDaGrid].Selected = true;
                this.dgvItens.Refresh();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Preencher_Dados_Instalacao()
        {
            try
            {
                this.dtpDataAgendamento.ValueChanged -= this.Alterar_Data_Agendamento;
                this.txtHoraAgendamento.Validating -= this.Validando_txtHoraAgendamento;
                this.dgvVeiculos.SelectionChanged -= this.Alterar_Selecao_dgvVeiculos;
                this.Tratar_Permissoes();

                DataTable dttInstalacaoCT = this.dtsPropriedades.Tables["Instalacao_CT"];

                if (Convert.ToString(dttInstalacaoCT.Rows[0]["Instalacao_CT_ID"]) != string.Empty)
                {
                    this.lblNumInstalacaoDesc.Text = dttInstalacaoCT.Rows[0]["Instalacao_CT_ID"].ToString();
                    this.lblLojaAtivaDesc.Text = dttInstalacaoCT.Rows[0]["Lojas_NM"].ToString();
                    this.lblDataInstalacao.Text = Convert.ToDateTime(dttInstalacaoCT.Rows[0]["Instalacao_CT_Data_Criacao"]).ToString("dd/MM/yyyy HH:mm");
                    this.lblNomeInstalacao.Text = dttInstalacaoCT.Rows[0]["Usuario_Nome_Completo"].ToString();
                    this.lblStatusDesc.Text = dttInstalacaoCT.Rows[0]["Status"].ToString();
                    this.txtObservacao.Text = dttInstalacaoCT.Rows[0]["Instalacao_CT_Observacao"].ToString();
                    this.lblNomeCliente.Text = dttInstalacaoCT.Rows[0]["Cliente_Nome"].ToString();
                    this.txtCPF_CNPJ.Text = DivUtil.Formatar_CPF_CNPJ(dttInstalacaoCT.Rows[0]["Cliente_CPF_CNPJ"].ToString());

                    this.dgvVeiculos.DataSource = this.dtsPropriedades.Tables["Cliente_Veiculo"];
                    this.dgvItens.DataSource = this.dtsPropriedades.Tables["Instalacao_IT"];

                    if (Convert.ToDateTime(dttInstalacaoCT.Rows[0]["Instalacao_CT_Data_Agendamento"]) != new DateTime(1900, 1, 1))
                    {
                        this.chkAgedamento.Checked = true;
                        DateTime dtmDataAgendamento = Convert.ToDateTime(dttInstalacaoCT.Rows[0]["Instalacao_CT_Data_Agendamento"]);
                        this.dtpDataAgendamento.Value = dtmDataAgendamento.Date;
                        this.txtHoraAgendamento.Text = dtmDataAgendamento.ToString("HH:mm");
                    }

                    this.Gerenciar_Botoes_Recepcao_Status_Servico();

                    if (this.txtCPF_CNPJ.Text == "000.000.000-00")
                    {
                        DataRow dtrItem = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;
                        this.Gerenciar_Controles_Veiculos();
                        this.cboVeiculo.SelectedValue = dtrItem["Veiculo_ID"];
                        this.txtPlaca.Text = dtrItem["Instalacao_IT_Placa"].ToString();
                    }
                    else
                    {
                        this.Gerenciar_Controles_Veiculos();
                    }

                    this.Gerenciar_Botoes_Dados_Cliente();

                    if (this.lblStatusDesc.Text != "Pendente")
                    {
                        this.chkMostrarInstaladoresMarcados.Checked = true;
                    }

                    this.Mudar_Cor_Linha_Grid_Item_Recolher_Reciclavel();

                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                this.dtpDataAgendamento.ValueChanged -= this.Alterar_Data_Agendamento;
                this.txtHoraAgendamento.Validating -= this.Validando_txtHoraAgendamento;
                this.dgvVeiculos.SelectionChanged -= this.Alterar_Selecao_dgvVeiculos;

                this.dtpDataAgendamento.ValueChanged += this.Alterar_Data_Agendamento;
                this.txtHoraAgendamento.Validating += this.Validando_txtHoraAgendamento;
                this.dgvVeiculos.SelectionChanged += this.Alterar_Selecao_dgvVeiculos;
            }
        }

        private void Preencher_ToolTip_Instaladores()
        {
            try
            {
                if (this.totDetalheItem.Active)
                {
                    this.totDetalheItem.Active = false;
                    this.totDetalheItem.Hide(this);
                }
                else
                {

                    if (this.dgvItens.SelectedRows.Count > 0)
                    {
                        System.Drawing.Rectangle objCelulaSelecionada = this.dgvItens.GetCellDisplayRectangle(1, this.dgvItens.SelectedRows[0].Index, true);
                        Int32 intPosicaoY = objCelulaSelecionada.Y + 320;
                        Int32 intPosicaoX = objCelulaSelecionada.X + 60;

                        string strMensagem = this.Obter_Historico_Item_Selecionado(this.dgvItens.SelectedRows[0].Cells["Instalacao_IT_ID"].Value.DefaultString());

                        if (strMensagem != string.Empty)
                        {
                            this.totDetalheItem.Active = true;
                            this.totDetalheItem.Show(Environment.NewLine + "Instalador                           Data Início                       Data Termíno                 Pontos" + Environment.NewLine + strMensagem, this, intPosicaoX, intPosicaoY);
                        }

                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Processar_Botao_Incluir_Documento()
        {
            try
            {
                if (!this.Validar_Inclusao_Romaneio())
                    return;

                InstalacaoBUS_NEW busInstalacao = new InstalacaoBUS_NEW();

                DataSet dtsConsulta = new DataSet();

                int intIDRomaneioCT = 0;
                int intIDRomaneioGrupo = 0;
                string strRomaneioDocumentoNumero = "0";
                this.Atribuir_Numero_Documento(ref intIDRomaneioCT, ref intIDRomaneioGrupo, ref strRomaneioDocumentoNumero);

                dtsConsulta = busInstalacao.Consultar_DataSet_Romaneio_Para_Instalacao(intIDRomaneioCT, intIDRomaneioGrupo, strRomaneioDocumentoNumero, this.dgvItens.Rows.Count, Root.Loja_Ativa.ID, Convert.ToInt32(this.cboLoja.SelectedValue));

                if (dtsConsulta == null)
                    return;

                if (this.Validar_Inclusao_Romaneio(ref dtsConsulta))
                {
                    DataTable dttConsultaItem = dtsConsulta.Tables["Instalacao_IT"];
                    this.Preencher_Data_Garantia_Item(ref dttConsultaItem);

                    if (this.dgvItens.RowCount <= 0)
                    {
                        // Verificar se a instalação possui data de Agendamento já informada e preencher no dataset da consulta.
                        if (this.chkAgedamento.Checked && this.txtHoraAgendamento.Text.Length == 5)
                        {
                            dtsConsulta.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_Data_Agendamento"] = this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_Data_Agendamento"];
                        }
                        this.dtsPropriedades.Clear();
                        this.dtsPropriedadesOriginal = dtsConsulta.Clone();

                        this.dtsPropriedades.Tables["Instalacao_CT"].Merge(dtsConsulta.Tables["Instalacao_CT"]);
                        this.dtsPropriedades.Tables["Instalacao_IT"].Merge(dtsConsulta.Tables["Instalacao_IT"]);
                        this.dtsPropriedades.Tables["Cliente_Veiculo"].Merge(dtsConsulta.Tables["Cliente_Veiculo"]);
                        this.dtsPropriedades.Tables["Reciclagem_CT"].Merge(dtsConsulta.Tables["Reciclagem_CT"]);
                        this.dtsPropriedades.Tables["Reciclagem_IT"].Merge(dtsConsulta.Tables["Reciclagem_IT"]);
                        this.dtsPropriedades.Tables["Avisos_Quantidades_Reciclaveis"].Merge(dtsConsulta.Tables["Avisos_Quantidades_Reciclaveis"]);

                    }
                    else
                    {
                        this.dtsPropriedades.Tables["Instalacao_IT"].Merge(dtsConsulta.Tables["Instalacao_IT"]);
                    }


                    this.lblNomeCliente.Text = this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_Nome"].ToString();
                    this.txtCPF_CNPJ.Text = DivUtil.Formatar_CPF_CNPJ(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_CPF_CNPJ"].ToString());

                    this.dgvItens.DataSource = this.dtsPropriedades.Tables["Instalacao_IT"];
                    this.dgvVeiculos.DataSource = this.dtsPropriedades.Tables["Cliente_Veiculo"];
                    this.Gerenciar_Imagens_Cor_Linha_Grids();
                    this.Mudar_Cor_Linha_Grid_Item_Recolher_Reciclavel();
                    this.Gerenciar_Botoes_Recepcao_Status_Servico();
                }

                this.Atribuir_Status_Instalacao_Capa();

                if (this.blnUtilizaProdutoReciclavel)
                    this.Alertar_Existencia_Reciclavel_E_Quantidades(dtsPropriedades);

                this.txtNumeroDocumento.Text = string.Empty;

                if (this.lblNomeCliente.Text == "CONSUMIDOR FINAL")
                {
                    this.txtCPF_CNPJ.Focus();
                    this.btnSalvarVeiculo.Enabled = false;
                }
                else
                {
                    this.cboVeiculo.Focus();
                    this.btnSalvarVeiculo.Enabled = true;
                }

                this.dtsPropriedadesOriginal = this.dtsPropriedades.Copy();

                this.Verificar_Mudancas();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Alertar_Existencia_Reciclavel_E_Quantidades(DataSet dtsConsulta)
        {

            try
            {

                if (dtsConsulta.Tables["Avisos_Quantidades_Reciclaveis"].Rows.Count == 0)
                    return;

                StringBuilder stbMensagem = new StringBuilder();
                stbMensagem.Append("A instalação possui o(s) seguinte(s) reciclável(is)");
                stbMensagem.Append("\n");

                foreach (DataRow dtrLinhas in dtsConsulta.Tables["Avisos_Quantidades_Reciclaveis"].Rows)
                {
                    stbMensagem.Append("\n");
                    stbMensagem.Append(dtrLinhas["Qtde_Reciclavel"].DefaultString());
                }

                MessageBox.Show(stbMensagem.DefaultString(), this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                this.Mudar_Cor_Linha_Grid_Item_Recolher_Reciclavel();
            }
            catch (Exception)
            {

                throw;
            }
        }


        private void Processar_Botao_Pesquisar_Documento()
        {
            try
            {
                frmPesquisaGrid frmPesquisaRomaneio = new frmPesquisaGrid("Romaneio", "Pesquisa de Romaneios Pendentes de Instalação");
                frmPesquisaRomaneio.Grid.Adicionar_Coluna("Romaneio_CT_ID", "Romaneio", 85, false);
                frmPesquisaRomaneio.Grid.Adicionar_Coluna("Romaneio_Grupo_ID", "Grupo", 85, false);
                frmPesquisaRomaneio.Grid.Adicionar_Coluna("Romaneio_Documento_Numero", "Cupom", 100, false);
                frmPesquisaRomaneio.Grid.Adicionar_Coluna("Romaneio_Ct_Data_Geracao", "Data", 100, false);
                frmPesquisaRomaneio.Grid.Adicionar_Coluna("Cliente", "Cliente", 90, true);
                frmPesquisaRomaneio.Grid.Adicionar_Coluna("Cliente_CPF_CNPJ", "CNPJ_CPF", 110, false);
                frmPesquisaRomaneio.Grid.Adicionar_Coluna("Romaneio_Ct_Valor_Real", "Valor", 90, false);
                frmPesquisaRomaneio.Width = this.dgvItens.Width;

                InstalacaoBUS_NEW busInstalacao = new InstalacaoBUS_NEW();

                DataTable dttConsulta = busInstalacao.Consultar_DataSet_Romaneios_Pendentes_Instalacao_New(Convert.ToInt32(this.cboLoja.SelectedValue)).Tables[0];
                foreach (DataGridViewRow objItem in this.dgvItens.Rows)
                {
                    for (Int16 i = Convert.ToInt16(dttConsulta.Rows.Count - 1); i >= 0; i += -1)
                    {
                        if (Convert.ToInt32(dttConsulta.Rows[i]["Romaneio_CT_ID"]) == Convert.ToInt32(objItem.Cells["Romaneio_Ct_ID"].Value))
                        {
                            dttConsulta.Rows.RemoveAt(i);
                        }
                    }
                }

                frmPesquisaRomaneio.Carregar_Grid(dttConsulta);

                if (frmPesquisaRomaneio.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    if (Convert.ToInt32(this.cboTipo.SelectedValue) == 0)
                    {
                        this.cboTipo.SelectedValue = Tipo_Documento_Instalacao.Romaneio.ToInteger();
                    }
                    switch ((Tipo_Documento_Instalacao)this.cboTipo.SelectedValue)
                    {
                        case Tipo_Documento_Instalacao.Romaneio:
                            this.txtNumeroDocumento.Text = Convert.ToString(frmPesquisaRomaneio.Registro.Cells["Romaneio_Ct_ID"].Value);
                            break;
                        case Tipo_Documento_Instalacao.Grupo:
                            this.txtNumeroDocumento.Text = Convert.ToString(frmPesquisaRomaneio.Registro.Cells["Romaneio_Grupo_ID"].Value);
                            break;
                        case Tipo_Documento_Instalacao.Cupom:
                            this.txtNumeroDocumento.Text = Convert.ToString(frmPesquisaRomaneio.Registro.Cells["Romaneio_Documento_Numero"].Value.ToString().Trim());
                            break;
                    }
                }

                this.txtNumeroDocumento.Focus();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Processar_Incluir_Cliente()
        {
            try
            {
                frmCliente_Inclusao_Simples_Propriedades frmPropriedades = new frmCliente_Inclusao_Simples_Propriedades(this.blnPermissaoIncluirCliente);
                frmPropriedades.ShowDialog();

                if (frmPropriedades.Registro_Alterado)
                {
                    this.txtCPF_CNPJ.Text = frmPropriedades.mskPFCpf.Text.Replace(".", string.Empty).Replace("-", string.Empty);
                    this.Consultar_Dados_Cliente();
                }
                this.txtCPF_CNPJ.Focus();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Processar_Menu_Auditoria_Instalacao_CT()
        {
            try
            {
                if (Convert.ToString(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_ID"]) == string.Empty)
                {
                    MessageBox.Show("Não há dados a serem auditados!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                frmAuditoria_Propriedades frmAuditoria = new frmAuditoria_Propriedades("Histórico de Alterações");
                frmAuditoria.Grid.AutoGenerateColumns = false;
                frmAuditoria.Grid.Adicionar_Coluna("Acao", "Ação", 80);
                frmAuditoria.Grid.Adicionar_Coluna("Data_Ultima_Alteracao", "Data Alteração", 100);
                frmAuditoria.Grid.Adicionar_Coluna("Usuario_Criacao_NM_Completo", "Usuario Criação", 160);
                frmAuditoria.Grid.Adicionar_Coluna("Usuario_Ultima_Alteracao", "Usuário Alteração", 160);
                frmAuditoria.Grid.Adicionar_Coluna("Status_Instalacao", "Status Inst.", 80, false, Tipo_Coluna.Texto);
                frmAuditoria.Grid.Adicionar_Coluna("Instalacao_CT_Observacao", "Observação", 200);


                InstalacaoBUS_NEW busInstalacao = new InstalacaoBUS_NEW();
                DataTable dttAuditoria = busInstalacao.Consultar_DataSet_Auditoria_Instalacao_CT(Convert.ToInt32(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_ID"]),
                                                                                                 Convert.ToInt32(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Lojas_ID"])).Tables["Instalacao_CT"];
                frmAuditoria.Carregar_Grid(dttAuditoria);

                frmAuditoria.Show(this);
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Processar_Menu_Auditoria_Instalacao_IT()
        {
            try
            {
                if (Convert.ToString(this.dtsPropriedades.Tables["Instalacao_IT"].Rows[0]["Instalacao_CT_ID"]) == string.Empty)
                {
                    MessageBox.Show("Não há dados a serem auditados!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                frmAuditoria_Propriedades frmAuditoria = new frmAuditoria_Propriedades("Histórico de Alterações dos Itens");

                frmAuditoria.Grid.Adicionar_Coluna("Acao", "Ação", 80);
                frmAuditoria.Grid.Adicionar_Coluna("Data_Ultima_Alteracao", "Data Alteração", 100, false, Tipo_Coluna.Data_Tempo);
                frmAuditoria.Grid.Adicionar_Coluna("Usuario_Ultima_Alteracao", "Usuário Alteração", 130);
                frmAuditoria.Grid.Adicionar_Coluna("Status_Instalacao", "Status Inst.", 80);
                frmAuditoria.Grid.Adicionar_Coluna("Instalacao_IT_Data_Garantia", "Data Garantia", 100, false, Tipo_Coluna.Data_Tempo);
                frmAuditoria.Grid.Adicionar_Coluna("Instalacao_IT_Tempo", "Tempo", 100, false, Tipo_Coluna.Data_Tempo);
                frmAuditoria.Grid.Adicionar_Coluna("Instalacao_IT_Pontos", "Pontos", 50, false, Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmAuditoria.Grid.Adicionar_Coluna("Veiculo_DS", "Veículo", 80);
                frmAuditoria.Grid.Adicionar_Coluna("Instalacao_IT_Placa", "Placa", 60);
                frmAuditoria.Grid.Adicionar_Coluna("Instalacao_IT_Prisma", "Prisma", 65, false, Tipo_Coluna.Texto, false, DataGridViewContentAlignment.MiddleRight);
                frmAuditoria.Grid.Adicionar_Coluna("Instalacao_IT_Data_Inicio", "Inicio", 100, false, Tipo_Coluna.Data_Tempo);
                frmAuditoria.Grid.Adicionar_Coluna("Instalacao_IT_Data_Termino", "Término", 100, false, Tipo_Coluna.Data_Tempo);
                frmAuditoria.Grid.Adicionar_Coluna("Enum_Status_ID");
                InstalacaoBUS_NEW busInstalacao = new InstalacaoBUS_NEW();
                DataTable dttAuditoria = busInstalacao.Consultar_DataSet_Auditoria_Instalacao_IT(Convert.ToInt32(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_ID"]),
                                                                                                 Convert.ToInt32(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Lojas_ID"])).Tables["Instalacao_IT"];

                frmAuditoria.Carregar_Grid(dttAuditoria);

                frmAuditoria.Show(this);
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Processar_Menu_Auditoria_Instalacao_IT_Instalador()
        {
            try
            {
                if (this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Rows.Count == 0)
                {
                    MessageBox.Show("Não há dados a serem auditados!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (Convert.ToString(this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Rows[0]["Instalacao_IT_Instalador_ID"]) == string.Empty)
                {
                    MessageBox.Show("Não há dados a serem auditados!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                frmAuditoria_Propriedades frmAuditoria = new frmAuditoria_Propriedades("Histórico de Alterações dos Instaladores");

                frmAuditoria.Grid.Adicionar_Coluna("Acao", "Ação", 80);
                frmAuditoria.Grid.Adicionar_Coluna("Data_Ultima_Alteracao", "Data Alteração", 100, false, Tipo_Coluna.Data_Tempo);
                frmAuditoria.Grid.Adicionar_Coluna("Usuario_Nome_Completo", "Usuário Alteração", 140);
                frmAuditoria.Grid.Adicionar_Coluna("Funcionario_Inicio_NM", "Instalador", 140);
                frmAuditoria.Grid.Adicionar_Coluna("Instalacao_IT_Instalador_Data_Inicio", "Data Inicio", 100, false, Tipo_Coluna.Data_Tempo);
                frmAuditoria.Grid.Adicionar_Coluna("Instalacao_IT_Instalador_Data_Termino", "Data Término", 100, false, Tipo_Coluna.Data_Tempo);

                InstalacaoBUS_NEW busInstalacao = new InstalacaoBUS_NEW();
                DataTable dttAuditoria = busInstalacao.Consultar_DataSet_Auditoria_Instalacao_IT_Instalador(Convert.ToInt32(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_ID"]),
                                                                                                            Convert.ToInt32(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Lojas_ID"])).Tables["Instalacao_IT_Instalador"];

                frmAuditoria.Carregar_Grid(dttAuditoria);

                frmAuditoria.Show(this);
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Processar_Solicitar_Retorno_Garantia()
        {

            try
            {
                DataRow dtrItem = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;
                DataRow dtrNovoItem = this.dtsPropriedades.Tables["Instalacao_IT"].NewRow();

                frmInstalacao_Retorno_Garantia frmInstalacaoRetornoGarantia;

                if (this.tsmSolicitarRetornoGarantia.Text.Contains("Informar"))
                {
                    frmInstalacaoRetornoGarantia = new frmInstalacao_Retorno_Garantia(false, this.dtsPropriedades.Tables["Instalacao_CT"], ref dtrItem, this.dtsPropriedades.Tables["Instalacao_IT_Instalador"], dtrItem["Enum_Motivo_Retorno_ID"].ToInteger(), dtrItem["Instalacao_IT_Observacao_Retorno"].ToString());
                }
                else if (this.tsmSolicitarRetornoGarantia.Text.Contains("Visualizar"))
                {
                    frmInstalacaoRetornoGarantia = new frmInstalacao_Retorno_Garantia(true, this.dtsPropriedades.Tables["Instalacao_CT"], ref dtrItem, this.dtsPropriedades.Tables["Instalacao_IT_Instalador"], dtrItem["Enum_Motivo_Retorno_ID"].ToInteger(), dtrItem["Instalacao_IT_Observacao_Retorno"].ToString());
                }
                else
                {
                    dtrNovoItem["Servico_CD"] = dtrItem["Servico_CD"];
                    dtrNovoItem["Servico_Descricao"] = dtrItem["Servico_Descricao"];
                    frmInstalacaoRetornoGarantia = new frmInstalacao_Retorno_Garantia(false, this.dtsPropriedades.Tables["Instalacao_CT"], ref dtrNovoItem, this.dtsPropriedades.Tables["Instalacao_IT_Instalador"]);
                }

                frmInstalacaoRetornoGarantia.ShowDialog(this);

                if (frmInstalacaoRetornoGarantia.Registro_Alterado)
                {
                    if (this.dtsPropriedades.Tables["Instalacao_IT"].Select(string.Concat("Instalacao_IT_Data_Termino = '1/1/1900' AND Instalacao_IT_Origem_ID = '", dtrItem["Instalacao_IT_Origem_ID"].DefaultString(), "'")).Length == 0)
                    {
                        // Instalação_IT

                        dtrNovoItem["Instalacao_IT_ID"] = string.Empty;
                        dtrNovoItem["Instalacao_CT_ID"] = dtrItem["Instalacao_CT_ID"];
                        dtrNovoItem["Lojas_ID"] = dtrItem["Lojas_ID"];
                        dtrNovoItem["Romaneio_IT_ID"] = dtrItem["Romaneio_IT_ID"];
                        dtrNovoItem["Lojas_Origem_ID"] = dtrItem["Lojas_Origem_ID"];
                        dtrNovoItem["Instalacao_IT_Data_Garantia"] = dtrItem["Instalacao_IT_Data_Garantia"];
                        dtrNovoItem["Instalacao_IT_Data_Inicio"] = new DateTime(1900, 1, 1);
                        dtrNovoItem["Instalacao_IT_Data_Termino"] = new DateTime(1900, 1, 1);
                        dtrNovoItem["Instalacao_IT_Tempo"] = dtrItem["Instalacao_IT_Tempo"];
                        dtrNovoItem["Instalacao_IT_Pontos"] = dtrItem["Instalacao_IT_Pontos"];
                        dtrNovoItem["Veiculo_ID"] = dtrItem["Veiculo_ID"];
                        dtrNovoItem["Instalacao_IT_Placa"] = dtrItem["Instalacao_IT_Placa"];
                        dtrNovoItem["Instalacao_IT_Prisma"] = dtrItem["Instalacao_IT_Prisma"];
                        dtrNovoItem["Enum_Status_ID"] = Status_Instalacao.Pendente.ToInteger();
                        dtrNovoItem["Instalacao_IT_Observacao"] = dtrItem["Instalacao_IT_Observacao"];
                        dtrNovoItem["Instalacao_IT_Origem_ID"] = dtrItem["Instalacao_IT_ID"];
                        dtrNovoItem["Usuario_Ultima_Alteracao_ID"] = dtrItem["Usuario_Ultima_Alteracao_ID"];

                        // Dados Que também são exibidos no grid
                        dtrNovoItem["Marcado"] = true;
                        dtrNovoItem["Sequencia"] = this.dtsPropriedades.Tables["Instalacao_IT"].Rows.Count + 1;
                        dtrNovoItem["Servico_ID"] = dtrItem["Servico_ID"];
                        dtrNovoItem["Servico_CD"] = dtrItem["Servico_CD"];
                        dtrNovoItem["Servico_Descricao"] = dtrItem["Servico_Descricao"];
                        dtrNovoItem["Enum_Classificacao_Servico_ID"] = dtrItem["Enum_Classificacao_Servico_ID"];
                        dtrNovoItem["Servico_Classificacao"] = dtrItem["Servico_Classificacao"];
                        dtrNovoItem["Romaneio_CT_ID"] = dtrItem["Romaneio_CT_ID"];
                        dtrNovoItem["Instalacao_IT_Qtde"] = 1;
                        dtrNovoItem["Instalacao_IT_Preco_Pago"] = dtrItem["Instalacao_IT_Preco_Pago"];
                        dtrNovoItem["Status_Romaneio"] = dtrItem["Status_Romaneio"];
                        dtrNovoItem["Servico_Atrasado"] = 0;
                        dtrNovoItem["Enum_Extenso_Instalacao"] = dtrItem["Enum_Extenso_Instalacao"];
                        dtrNovoItem["Romaneio_Grupo_ID"] = dtrItem["Romaneio_Grupo_ID"];

                        dtrNovoItem["Romaneio_Venda_Grupo_ID"] = dtrItem["Romaneio_Venda_Grupo_ID"];
                        dtrNovoItem["Romaneio_Venda_CT_ID"] = dtrItem["Romaneio_Venda_CT_ID"];
                        dtrNovoItem["Romaneio_Venda_IT_ID"] = dtrItem["Romaneio_Venda_IT_ID"];

                        this.dtsPropriedades.Tables["Instalacao_IT"].Rows.Add(dtrNovoItem);
                        this.Alterar_Selecao_dgvItens(this.dgvItens, null);
                    }
                }
                this.dgvItens.Refresh();
                this.Gerenciar_Imagens_Cor_Linha_Grids();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private string Obter_Historico_Item_Selecionado(string strInstalacaoITID)
        {
            try
            {
                ArrayList colHistoricoItens = new ArrayList();
                colHistoricoItens.AddRange(this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Select(string.Concat("Instalacao_IT_ID = '", strInstalacaoITID, "'")));

                StringBuilder stbHistoricoItem = new StringBuilder();

                foreach (DataRow objItem in colHistoricoItens)
                {
                    stbHistoricoItem.Append(Environment.NewLine);
                    string strInstalador = Convert.ToString(objItem["Funcionario_NM_Completo"]);
                    string strDataInicio;
                    string strDataTermino;

                    strInstalador = (strInstalador.Length >= 20 ? strInstalador.Substring(0, 18) + ".." : strInstalador.PadRight(22, Convert.ToChar(" ")));
                    strDataInicio = (objItem["Instalacao_IT_Instalador_Inicio"] == DBNull.Value ? "                                  " : Strings.Format(objItem["Instalacao_IT_Instalador_Inicio"], "dd/MM/yyyy HH:mm:ss").Trim().PadRight(19, Convert.ToChar(" ")));
                    strDataTermino = (objItem["Instalacao_IT_Instalador_Termino"] == DBNull.Value ? "                                 " : Strings.Format(objItem["Instalacao_IT_Instalador_Termino"], "dd/MM/yyyy HH:mm:ss").Trim().PadRight(19, Convert.ToChar(" ")));

                    stbHistoricoItem.Append(strInstalador);
                    stbHistoricoItem.Append("      ");
                    stbHistoricoItem.Append(strDataInicio);
                    stbHistoricoItem.Append("      ");
                    stbHistoricoItem.Append(strDataTermino);
                    stbHistoricoItem.Append("         ");
                    stbHistoricoItem.Append(objItem["Instalacao_IT_Instalador_Pontos"]);
                    stbHistoricoItem.Append("      ");

                }

                return stbHistoricoItem.ToString();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Setar_Imagens_Grid_Itens()
        {
            try
            {
                InstalacaoBUS_NEW busInstalacao = new InstalacaoBUS_NEW();
                foreach (DataGridViewRow dtrStatus in this.dgvItens.Rows)
                {
                    dtrStatus.Cells["Imagem_Status_Romaneio"].Value = busInstalacao.Obter_Imagem_Bolinha_Status_Instalacao((Status_Instalacao)dtrStatus.Cells["Enum_Status_ID"].Value);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Validar_Hora_Agendamento()
        {
            try
            {
                if (this.txtHoraAgendamento.Text.Trim() == string.Empty)
                {
                    return false;
                }

                if (this.txtHoraAgendamento.Text.Length < 5)
                {
                    MessageBox.Show("Preencha corretamente a hora do agendamento", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }

                DateTime dtmDataAtual = (new DBUtil()).Obter_Data_do_Servidor(true, TipoServidor.LojaAtual);
                TimeSpan objIntervaloTempo = new TimeSpan(this.txtHoraAgendamento.Text.Left(2).ToInteger(), this.txtHoraAgendamento.Text.Right(2).ToInteger(), 0);

                if (this.dtpDataAgendamento.Value.Date == dtmDataAtual.Date && objIntervaloTempo < dtmDataAtual.TimeOfDay)
                {
                    MessageBox.Show("A data/hora do agendamento deve ser superior a data/hora atual", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }

                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Validar_Inclusao_Romaneio()
        {
            try
            {
                if (!this.Validar_Preenchimento_Combo_Lojas())
                {
                    return false;
                }

                if (Convert.ToInt32(this.cboTipo.SelectedValue) == 0)
                {
                    MessageBox.Show("Informe o tipo do documento.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.cboTipo.Focus();
                    return false;
                }

                if (this.txtNumeroDocumento.Text == string.Empty)
                {
                    MessageBox.Show("Informe um número de romaneio!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.txtNumeroDocumento.Focus();
                    return false;
                }

                int intValorTextbox = 0;
                if (!int.TryParse(this.txtNumeroDocumento.Text.ToString(), out intValorTextbox) && Convert.ToInt32(this.cboTipo.SelectedValue) != Tipo_Documento_Instalacao.Cupom.ToInteger())
                {
                    MessageBox.Show("Número infomado é invalido!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.txtNumeroDocumento.Focus();
                    return false;
                }

                foreach (DataGridViewRow objItem in this.dgvItens.Rows)
                {
                    if (Convert.ToString(objItem.Cells["Romaneio_CT_ID"].Value) == this.txtNumeroDocumento.Text)
                    {
                        MessageBox.Show("O romaneio já foi adicionado a esta instalação!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        this.txtNumeroDocumento.Text = string.Empty;
                        this.txtNumeroDocumento.Focus();
                        return false;
                    }
                }

                if (!this.Validar_Status_Romaneio())
                {
                    this.txtNumeroDocumento.Focus();
                    return false;
                }

                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Validar_Inclusao_Romaneio(ref DataSet dtsConsulta)
        {
            try
            {

                if (dtsConsulta.Tables["Instalacao_CT"].Rows.Count == 0)
                {
                    RomaneioBUS busRomaneio = new RomaneioBUS();
                    Romaneio_Pre_VendaBUS busRomaneioPreVenda = new Romaneio_Pre_VendaBUS();
                    Romaneio_CanceladoBUS busRomaneioCancelado = new Romaneio_CanceladoBUS();

                    if (busRomaneioPreVenda.Consultar_DataSet_Romaneio_Pre_Venda_Propriedades(this.txtNumeroDocumento.Text.DefaultInteger(), Root.Loja_Ativa.ID).Tables[0].Rows.Count > 0)
                    {
                        MessageBox.Show("O romaneio não foi liberado pelo Caixa!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else if (busRomaneioCancelado.Consultar_DataRow_Romaneio_Cancelado_Por_Romaneio(this.txtNumeroDocumento.Text.DefaultInteger(), Root.Loja_Ativa.ID, TipoServidor.LojaAtual).Table.Rows.Count > 0)
                    {
                        MessageBox.Show("O romaneio informado foi cancelado!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        MessageBox.Show("Não foi encontrado o romaneio informado para está Loja!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }

                    return false;

                }
                else if (dtsConsulta.Tables["Instalacao_IT"].Rows.Count == 0)
                {
                    MessageBox.Show("Não existem itens pendentes de instalação neste Romaneio!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;

                }
                else if (Convert.ToInt32(dtsConsulta.Tables["Instalacao_IT"].Rows[0]["Status_Romaneio"]) != Convert.ToInt32(Mercadocar.Enumerados.StatusRomaneioVenda.Liberado))
                {
                    MessageBox.Show("O romaneio não foi liberado pelo Caixa!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;

                }
                else
                {
                    foreach (DataRow dtrItemRomaneio in dtsConsulta.Tables["Instalacao_IT"].Rows)
                    {
                        if (this.dtsPropriedades.Tables["Instalacao_IT"].Select("Romaneio_CT_ID = '" + dtrItemRomaneio["Romaneio_CT_ID"].ToString() + "'").Length > 0)
                        {
                            MessageBox.Show("O item informado já consta instalação!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                    }
                }

                // Validar cliente diferente do cliente ja incluido na instalaçao
                if (this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_Nome"] != System.DBNull.Value)
                {
                    if (Convert.ToString(dtsConsulta.Tables["Instalacao_CT"].Rows[0]["Cliente_Nome"]) != "CONSUMIDOR FINAL")
                    {
                        if (Convert.ToString(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_Nome"]) != "CONSUMIDOR FINAL")
                        {
                            if (Convert.ToString(dtsConsulta.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"]) != Convert.ToString(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"]))
                            {
                                MessageBox.Show("Este romaneio não pertence a este Cliente!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                this.txtNumeroDocumento.Text = string.Empty;
                                this.txtNumeroDocumento.Focus();
                                return false;
                            }
                        }
                        else
                        {
                            this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"] = dtsConsulta.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"];
                            this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_Nome"] = dtsConsulta.Tables["Instalacao_CT"].Rows[0]["Cliente_Nome"];
                            this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_CPF_CNPJ"] = dtsConsulta.Tables["Instalacao_CT"].Rows[0]["Cliente_CPF_CNPJ"];
                        }
                    }
                }

                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Validar_Preenchimento_Combo_Lojas()
        {
            try
            {
                if (Convert.ToInt32(this.cboLoja.SelectedValue) == 0)
                {
                    MessageBox.Show("Selecione uma loja para efetuar efetuar esta operação.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.cboLoja.Focus();
                    return false;
                }
                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Validar_Status_Romaneio()
        {
            try
            {
                RomaneioBUS busRomaneio = new RomaneioBUS();
                if (Convert.ToInt32(this.cboTipo.SelectedValue) == Tipo_Documento_Instalacao.Romaneio.ToInteger())
                {
                    if (busRomaneio.Selecionar(Convert.ToInt32(this.txtNumeroDocumento.Text), Convert.ToInt32(this.cboLoja.SelectedValue)).Table.Rows.Count > 0)
                    {
                        return true;
                    }
                }
                else if (Convert.ToInt32(this.cboTipo.SelectedValue) == Tipo_Documento_Instalacao.Grupo.ToInteger())
                {
                    if (busRomaneio.Consultar_DataSet_Romaneio_Venda_Propriedades(Convert.ToInt32(this.txtNumeroDocumento.Text), Convert.ToInt32(this.cboLoja.SelectedValue)).Tables[0].Rows.Count > 0)
                    {
                        return true;
                    }
                    else
                    {
                        MessageBox.Show("Documento não localizado!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                }

                else if (Convert.ToInt32(this.cboTipo.SelectedValue) == Tipo_Documento_Instalacao.Cupom.ToInteger())
                {
                    return true;
                }

                Romaneio_Pre_VendaBUS busRomaneioPreVenda = new Romaneio_Pre_VendaBUS();
                if (busRomaneioPreVenda.Consultar_DataSet_Romaneio_Pre_Venda_Propriedades(Convert.ToInt32(this.txtNumeroDocumento.Text), Convert.ToInt32(this.cboLoja.SelectedValue)).Tables[0].Rows.Count > 0)
                {
                    MessageBox.Show("O Romaneio está pendente de liberação!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }

                Romaneio_CanceladoBUS busRomaneioCancelado = new Romaneio_CanceladoBUS();
                if (busRomaneioCancelado.Consultar_DataRow_Romaneio_Cancelado_Por_Romaneio(Convert.ToInt32(this.txtNumeroDocumento.Text), Convert.ToInt32(this.cboLoja.SelectedValue), TipoServidor.LojaAtual).Table.Rows.Count > 0)
                {
                    MessageBox.Show("O Romaneio está Cancelado!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                else
                {
                    MessageBox.Show("Romaneio não encontrado!", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Validar_TextBox_CPF_CNPJ()
        {
            try
            {
                if (this.txtCPF_CNPJ.Text == "000.000.000-00" || this.txtCPF_CNPJ.Text == "00000000000" || this.txtCPF_CNPJ.Text == string.Empty)
                {
                    this.lblNomeCliente.Text = "CONSUMIDOR FINAL";
                    return false;
                }
                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void Verificar_Mudancas()
        {
            try
            {
                if (this.dtsPropriedades == null || this.dtsPropriedadesOriginal == null)
                {
                    return;
                }
                this.btnAplicar.Enabled = (this.dtsPropriedades.GetXml() != this.dtsPropriedadesOriginal.GetXml()) && (this.blnPermissaoAlterar || (this.blnPermissaoIncluir && this.intIDInstalacaoCT == 0));
            }
            catch (Exception)
            {

                throw;
            }
        }

        private bool Validar_Se_Servico_Possui_Instalador_Nivel_Servico(DataGridViewRow dgrInstalador)
        {
            try
            {
                string strConsulta = string.Empty;
                switch ((Classificacao_Servico)this.dgvItens.CurrentRow.Cells["Enum_Classificacao_Servico_ID"].Value)
                {
                    case Classificacao_Servico.A:
                        strConsulta = "Enum_Classificacao_Instalador_ID = " + Classificacao_Instalador.A.ToInteger();
                        break;
                    case Classificacao_Servico.B:
                        strConsulta = "Enum_Classificacao_Instalador_ID IN (" + Classificacao_Instalador.A.ToInteger() + ", " +
                                                                                Classificacao_Instalador.B.ToInteger() + ")";
                        break;
                    case Classificacao_Servico.C:
                        strConsulta = "Enum_Classificacao_Instalador_ID IN (" + Classificacao_Instalador.A.ToInteger() + ", " +
                                                                                Classificacao_Instalador.B.ToInteger() + ", " +
                                                                                Classificacao_Instalador.C.ToInteger() + ")";
                        break;
                }
                DataRow dtrItemServico = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;
                if (this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Select(string.Concat("Romaneio_IT_ID = ", dtrItemServico["Romaneio_IT_ID"].DefaultInteger(),
                                                                                   " AND Lojas_Origem_ID = ", dtrItemServico["Lojas_Origem_ID"].DefaultInteger(),
                                                                                   " AND Sequencia = ", dtrItemServico["Sequencia"].DefaultInteger(),
                                                                                   " AND Instalacao_IT_ID = '", dtrItemServico["Instalacao_IT_ID"].DefaultString(), "'",
                                                                                   " AND Funcionario_ID <> ", dgrInstalador.Cells["Funcionario_ID"].Value.DefaultInteger(),
                                                                                   " AND Instalacao_IT_Instalador_Inicio IS NOT NULL",
                                                                                   " AND Instalacao_IT_Instalador_Termino IS NULL AND ", strConsulta)).Length == 0 &&
                                                                                   (Status_Instalacao)dtrItemServico["Enum_Status_ID"] == Status_Instalacao.Em_Andamento)
                {
                    return false;
                }

                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Validar_Servico_Possui_Instalador(bool blnValidarInstaladorRemovido = false)
        {
            try
            {
                if (this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Rows.Count == 0)
                {
                    return false;
                }
                DataRow dtrItemServico = ((DataRowView)this.dgvItens.CurrentRow.DataBoundItem).Row;

                if (blnValidarInstaladorRemovido)
                {
                    if ((Status_Instalacao)dtrItemServico["Enum_Status_ID"] == Status_Instalacao.Em_Andamento)
                    {
                        DataRow[] dtrServicoInstalador = this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Select(string.Concat("Romaneio_IT_ID = ", dtrItemServico["Romaneio_IT_ID"].DefaultInteger(),
                                                                                                                       " AND Lojas_Origem_ID = ", dtrItemServico["Lojas_Origem_ID"].DefaultInteger(),
                                                                                                                       " AND Sequencia = ", dtrItemServico["Sequencia"].DefaultInteger(),
                                                                                                                       " AND Instalacao_IT_ID = '", dtrItemServico["Instalacao_IT_ID"].DefaultString(), "'",
                                                                                                                       " AND Funcionario_ID <> ", this.dgvInstaladores.CurrentRow.Cells["Funcionario_ID"].Value.DefaultInteger(),
                                                                                                                       " AND Instalacao_IT_Instalador_Termino IS NULL"));
                        if (dtrServicoInstalador.Length == 0)
                        {
                            return false;
                        }
                    }
                    return true;
                }
                DataRow[] dtrInstaladorServico = this.dtsPropriedades.Tables["Instalacao_IT_Instalador"].Select(string.Concat("Romaneio_IT_ID = ", dtrItemServico["Romaneio_IT_ID"].DefaultInteger(),
                                                                                                                " AND Lojas_Origem_ID = ", dtrItemServico["Lojas_Origem_ID"].DefaultInteger(),
                                                                                                                " AND Sequencia = ", dtrItemServico["Sequencia"].DefaultInteger(),
                                                                                                                " AND Instalacao_IT_ID = '", dtrItemServico["Instalacao_IT_ID"].DefaultString(), "'",
                                                                                                                " AND Instalacao_IT_Instalador_Termino IS NULL"));
                if (dtrInstaladorServico.Length == 0)
                {
                    return false;
                }
                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Tratar_Permissoes()
        {
            try
            {
                this.blnPermissaoIncluir = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, Root.Loja_Ativa.ID, this.Name, Acao_Formulario.Incluir.ToString());
                this.blnPermissaoAlterar = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, Root.Loja_Ativa.ID, this.Name, Acao_Formulario.Alterar.ToString());
                this.blnPermissaoIncluirCliente = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, Root.Loja_Ativa.ID, this.Name, Acao_Formulario.Incluir_Cliente_Instalacao.ToString());
                this.btnIncluir_Cliente.Enabled = this.blnPermissaoIncluirCliente;

                this.blnPermissaoRecepcaoIniciar = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, Root.Loja_Ativa.ID, this.Name, Acao_Formulario.Iniciar.ToString());
                this.blnPermissaoRecepcaoFinalizar = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo, Root.Loja_Ativa.ID, this.Name, Acao_Formulario.Finalizar.ToString());

                if (!this.blnPermissaoAlterar && this.intIDInstalacaoCT != 0)
                {
                    UtilidadesForm objUtil = new UtilidadesForm();
                    objUtil.DesabilitaForm(this);
                    this.btnCancelar.Enabled = true;
                    return;
                }

                if (!this.blnPermissaoIncluir)
                {
                    UtilidadesForm objUtil = new UtilidadesForm();
                    objUtil.DesabilitaForm(this);
                    this.btnCancelar.Enabled = true;
                    return;
                }

                this.btnAuditoria.Enabled = Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.Usuario_Ativo,
                                                                                   Root.Loja_Ativa.ID,
                                                                                   this.Name,
                                                                                   Enumerados.Acao_Formulario.Visualizar_Historico_De_Auditoria.ToString());

            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Preencher_Data_Garantia_Item(ref DataTable dttConsulta)
        {
            try
            {
                int intInstalacaoTempoGarantia = (int)Root.ParametrosProcesso.Retorna_Valor_Parametro("INSTALACAO", "INSTALACAO_TEMPO_GARANTIA", Root.Loja_Ativa.ID);


                foreach (DataRow dtrItem in dttConsulta.Rows)
                {
                    dtrItem["Instalacao_IT_Data_Garantia"] = Convert.ToDateTime(dtrItem["Instalacao_IT_Data_Garantia"]).AddDays(intInstalacaoTempoGarantia);
                }

            }
            catch (Exception)
            {
                throw;
            }
        }

        ///-----------------------------------------------------------------------------
        /// <summary>
        ///     Método realiza a atualização dos itens da instalação atravé do ID da 
        ///     instalação e a loja. Considerada a nova estrutura de tabelas da 
        ///     instalação.
        ///     P0050.3 - NOTA: Gravação dos itens instalados na estrutura de tabelas 
        ///     novas.
        /// </summary>
        /// <history>
        /// 	[msisiliani] 	15/05/2013	Created
        /// </history>
        ///-----------------------------------------------------------------------------
        private void Atualizar_Itens_Instalados_Novas_Tabelas()
        {
            try
            {
                Romaneio_VendaBUS busRomaneioVenda = new Romaneio_VendaBUS();
                busRomaneioVenda.Atualizar_Itens_Instalados_Instalacao_Nova(this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Instalacao_CT_ID"].ToInteger(),
                                                                            this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Lojas_ID"].ToInteger());

            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Atualizar_DataSet_Reciclavel()
        {
            try
            {
                this.dtsPropriedades.Tables.Add(new Reciclagem_IT_CancelamentoBUS().Retornar_Estrutura_Tabela());
                this.dtsPropriedades.Tables.Add(new Romaneio_Credito_ReciclagemBUS().Retornar_Estrutura_Tabela());

                this.dtsPropriedades.Tables["Instalacao_IT"].Columns.Add("Emitir_Etiqueta_Reciclagem", typeof(bool));

                this.dtsPropriedades.Tables["Reciclagem_CT"].Columns.Add("Sequencia", typeof(int));
                this.dtsPropriedades.Tables["Reciclagem_IT"].Columns.Add("Sequencia", typeof(int));
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Permitir_Alterarcao_Coluna_Qtde_Reciclavel(int intCurrentColumnIndex)
        {
            try
            {
                if (this.blnUtilizaProdutoReciclavel && this.dgvItens.Columns[intCurrentColumnIndex].Name == "Reciclavel_Qtde")
                {
                    this.dgvItens.ReadOnly = false;
                    this.dgvItens.CurrentCell.ReadOnly = false;
                    this.dgvItens.BeginEdit(true);
                    this.dgvItens.EditingControl.KeyPress += this.Pressionar_Tecla_Permitindo_Apenas_Decimais;
                }
                this.dgvItens.Refresh();
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Identificar_Reciclagem_Por_Romaneio(ref List<Reciclagem_ITDO> colReciclagemIT)
        {
            try
            {
                foreach (DataRow dtrReciclagemIT in dtsPropriedades.Tables["Reciclagem_IT"].Select("Lojas_ID = " + this.dgvItens.CurrentRow.Cells["Lojas_ID"].Value.DefaultInteger() + " AND Objeto_Origem_ID = '" + this.dgvItens.CurrentRow.Cells["Romaneio_IT_ID"].Value.DefaultInteger() + "'"))
                {
                    if (colReciclagemIT.Exists(x => x.Reciclagem_IT_ID == dtrReciclagemIT["Reciclagem_IT_ID"].DefaultInteger() && x.Lojas_ID == dtrReciclagemIT["Lojas_ID"].DefaultInteger()) == false)
                    {
                        Reciclagem_ITDO dtoReciclagemIT = new Reciclagem_ITDO();
                        dtoReciclagemIT.Reciclagem_IT_ID = dtrReciclagemIT["Reciclagem_IT_ID"].DefaultInteger();
                        dtoReciclagemIT.Lojas_ID = dtrReciclagemIT["Lojas_ID"].DefaultInteger();
                        colReciclagemIT.Add(dtoReciclagemIT);
                    }
                }

            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Incluir_Acordo_Reciclavel(int intLojaOrigemID, string strObjetoOrigemID, int intQuantidadeAcordo)
        {
            try
            {
                DataRow dtrReciclagemCT = this.dtsPropriedades.Tables["Reciclagem_CT"].NewRow();

                DateTime dtmDataAtual = new DBUtil().Obter_Data_do_Servidor(true, TipoServidor.LojaAtual);

                new Reciclagem_CTBUS().Preencher_DataRow_Reciclagem_CT(0,
                                                                        Root.Loja_Ativa.ID,
                                                                        Status_Reciclagem.Pendente.DefaultInteger(),
                                                                        Root.Funcionalidades.UsuarioDO_Ativo.ID,
                                                                        Root.Funcionalidades.UsuarioDO_Ativo.ID,
                                                                        Origem_Reciclagem.Instalacao.DefaultInteger(),
                                                                        dtmDataAtual,
                                                                        dtmDataAtual,
                                                                        ref dtrReciclagemCT);

                int intSequencia = this.dtsPropriedades.Tables["Reciclagem_CT"].Rows.Count + 1;
                dtrReciclagemCT["Sequencia"] = intSequencia;
                this.dtsPropriedades.Tables["Reciclagem_CT"].Rows.Add(dtrReciclagemCT);

                DataRow dtrReciclagemIT = this.dtsPropriedades.Tables["Reciclagem_IT"].NewRow();

                new Reciclagem_ITBUS().Preencher_DataRow_Reciclagem_IT(0, Root.Loja_Ativa.ID, 0, strObjetoOrigemID, intLojaOrigemID, intQuantidadeAcordo, 0, 0, new DateTime(1900, 1, 1), true, 0, ref dtrReciclagemIT);
                dtrReciclagemIT["Sequencia"] = intSequencia;

                this.dtsPropriedades.Tables["Reciclagem_IT"].Rows.Add(dtrReciclagemIT);
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Alterar_Acordo_Reciclavel_Cancelamento(Reciclagem_ITDO dtoReciclagemIT)
        {
            try
            {
                DataRow dtrReciclagemIT = this.dtsPropriedades.Tables["Reciclagem_IT"].Select("Reciclagem_IT_ID = " + dtoReciclagemIT.Reciclagem_IT_ID + " AND Lojas_ID = " + dtoReciclagemIT.Lojas_ID)[0];

                dtrReciclagemIT["Acordo_Realizado"] = 0;

                DataRow[] dtrReciclagemCTTodos = this.dtsPropriedades.Tables["Reciclagem_IT"].Select("Reciclagem_CT_ID = " + dtrReciclagemIT["Reciclagem_CT_ID"] + " AND Lojas_ID = " + dtrReciclagemIT["Lojas_ID"]);
                DataRow[] dtrReciclagemCTCancelado = this.dtsPropriedades.Tables["Reciclagem_IT"].Select("Reciclagem_CT_ID = " + dtrReciclagemIT["Reciclagem_CT_ID"] + " AND Lojas_ID = " + dtrReciclagemIT["Lojas_ID"] + " AND Acordo_Realizado = 0");

                if (dtrReciclagemCTTodos.Length == dtrReciclagemCTCancelado.Length)
                {
                    DataRow dtrReciclagemCT = this.dtsPropriedades.Tables["Reciclagem_CT"].Select("Reciclagem_CT_ID = " + dtrReciclagemIT["Reciclagem_CT_ID"] + " AND Lojas_ID = " + dtrReciclagemIT["Lojas_ID"])[0];
                    dtrReciclagemCT["Enum_Status_ID"] = Status_Reciclagem.Cancelado.DefaultInteger();
                }
                else
                {
                    DataRow[] dtrReciclagemITRecebido = dtsPropriedades.Tables["Reciclagem_IT"].Select("Lojas_ID = " + dtrReciclagemIT["Lojas_ID"] + " AND Reciclagem_CT_ID = " + dtrReciclagemIT["Reciclagem_CT_ID"] + " AND Usuario_Recebimento_ID = 0 AND Acordo_Realizado = 1");

                    if (dtrReciclagemITRecebido.Length == 0)
                    {
                        DataRow dtrReciclagemCT = dtsPropriedades.Tables["Reciclagem_CT"].Select("Lojas_ID = " + dtrReciclagemIT["Lojas_ID"] + " AND Reciclagem_CT_ID = " + dtrReciclagemIT["Reciclagem_CT_ID"])[0];
                        dtrReciclagemCT["Enum_Status_ID"] = Status_Reciclagem.Finalizado.DefaultInteger();
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Incluir_Cancelamento_Reciclavel(Reciclagem_ITDO dtoReciclagemIT, string strJustificativa)
        {
            try
            {
                DataRow dtrReciclagemITCancelamento = this.dtsPropriedades.Tables["Reciclagem_It_Cancelamento"].NewRow();

                DateTime dtmDataAtual = new DBUtil().Obter_Data_do_Servidor(true, TipoServidor.LojaAtual);

                new Reciclagem_IT_CancelamentoBUS().Preencher_DataRow_Reciclagem_It_Cancelamento(0, dtoReciclagemIT.Lojas_ID, Root.Funcionalidades.UsuarioDO_Ativo.ID, dtoReciclagemIT.Reciclagem_IT_ID, dtmDataAtual, strJustificativa, ref dtrReciclagemITCancelamento);

                this.dtsPropriedades.Tables["Reciclagem_It_Cancelamento"].Rows.Add(dtrReciclagemITCancelamento);
            }
            catch (Exception)
            {
                throw;
            }

        }

        private bool Validar_Acordo_Reciclavel()
        {
            try
            {
                if (this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value.IsInteger() == false)
                {
                    this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Original"].Value.DefaultInteger();
                    return false;
                }


                if (this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value.DefaultInteger() != this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value.DefaultInteger() && this.dgvItens.CurrentRow.Cells["Reciclavel_Produto"].Value.DefaultBool() == true)
                {
                    foreach (DataRow dtrReciclagemIT in this.dtsPropriedades.Tables["Reciclagem_IT"].Select("Objeto_Origem_ID = " + this.dgvItens.CurrentRow.Cells["Romaneio_IT_ID"].Value + " AND Loja_Origem_ID =" + this.dgvItens.CurrentRow.Cells["Lojas_ID"].Value))
                    {
                        if (dtrReciclagemIT["Sequencia"].DefaultInteger() == 0)
                        {
                            continue;
                        }

                        DataRow[] dtrReciclagemCT = this.dtsPropriedades.Tables["Reciclagem_CT"].Select("Sequencia = " + dtrReciclagemIT["Sequencia"] + " AND Enum_Origem_ID = " + Origem_Reciclagem.Instalacao.DefaultInteger());
                        if (dtrReciclagemCT.Length > 0)
                        {
                            this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Original"].Value.DefaultInteger();
                            dtrReciclagemCT[0].Delete();
                            dtrReciclagemIT.Delete();
                        }
                    }

                    List<Reciclagem_CTBUS.Pre_Venda> colPreVendaRemover = this.colPreVenda.FindAll(x => x.Objeto_Origem_ID == this.dgvItens.CurrentRow.Cells["Romaneio_IT_ID"].Value.DefaultString() && x.Lojas_Origem == this.dgvItens.CurrentRow.Cells["Lojas_ID"].Value.DefaultInteger());
                    if (colPreVendaRemover.Count > 0)
                        this.colPreVenda.Remove(colPreVendaRemover[0]);

                }

                if ((this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value.DefaultInteger() == this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Original"].Value.DefaultInteger())
                    || (this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value.DefaultInteger() == this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value.DefaultInteger() && this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value.DefaultInteger() != 0))
                {
                    return false;
                }

                if (this.dgvItens.CurrentRow.Cells["Reciclavel_Produto"].Value.DefaultBool() == false)
                {
                    MessageBox.Show("Serviço não possui reciclável, não é permitido a operação.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value.DefaultInteger();
                    return false;
                }

                if (this.dgvItens.CurrentRow.Cells["Instalacao_IT_Origem_ID"].Value.DefaultString() != string.Empty)
                {
                    MessageBox.Show("Retorno de garantia não possui reciclável, não é permitido a operação.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value.DefaultInteger();
                    return false;
                }

                if ((Status_Instalacao)this.dgvItens.CurrentRow.Cells["Enum_Status_ID"].Value != Status_Instalacao.Pendente
                    && (Status_Instalacao)this.dgvItens.CurrentRow.Cells["Enum_Status_ID"].Value != Status_Instalacao.Em_Andamento)
                {
                    MessageBox.Show("Só é permitido realizar o acordo do reciclável com serviços com status Pendentes ou Em Andamento.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value.DefaultInteger();
                    return false;
                }

                if (this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value.DefaultInteger() > this.dgvItens.CurrentRow.Cells["Instalacao_IT_Qtde"].Value.DefaultInteger())
                {
                    MessageBox.Show("Quantidade de reciclável maior do que o serviço, não é permitido a operação.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value.DefaultInteger();
                    return false;
                }

                return true;
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Processar_Cancelamento_Acordo_Reciclavel()
        {
            try
            {
                // Identificar acordos
                List<Reciclagem_ITDO> colReciclagemIT = new List<Reciclagem_ITDO>();
                this.Identificar_Reciclagem_Por_Romaneio(ref colReciclagemIT);

                // Romaneio de credito utilizado
                int intRomaneioPreVendaCTID = 0;
                if (this.Validar_Romaneio_Credito_Utilizado(colReciclagemIT, ref intRomaneioPreVendaCTID) == false)
                {
                    MessageBox.Show("Romaneio de crédito( " + intRomaneioPreVendaCTID + "). Já foi utilizado. Não é permitido cancelar a captação do reciclável. ", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value.DefaultInteger();
                    return;
                }

                if (MessageBox.Show("Será cancelado o serviço e será gerado um romaneio com o valor do serviço, à ser pago no caixa." + Environment.NewLine + "Confirma cancelamento da captação do reciclável?", "Cancelamento da captação do reciclável.",
                           MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) != DialogResult.Yes)
                {
                    this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value.DefaultInteger();
                    return;
                }

                if (!Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.UsuarioDO_Ativo, Root.Loja_Ativa.ID, this.Name, Acao_Formulario.Cancelar_Item.ToString()))
                {
                    // Validar Permissão
                    object objUsuario = Utilitario.Autenticar_Usuario();
                    if (objUsuario == null)
                    {
                        this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value.DefaultInteger();
                        return;
                    }
                    if (!Root.Permissao.Obter_Permissao_Do_Usuario(objUsuario, Root.Loja_Ativa.ID, this.Name, Acao_Formulario.Cancelar_Item.ToString()))
                    {
                        MessageBox.Show("Usuário não tem permissão para realizar esta ação! ", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value.DefaultInteger();
                        return;
                    }
                }

                // Justificativa
                frmObservacao frmJustificativaReciclavel = new frmObservacao(this.Text, "Justificativa do cancelamento do reciclável", 200, true);
                frmJustificativaReciclavel.ShowDialog(this);

                if (frmJustificativaReciclavel.DialogResult != DialogResult.OK)
                {
                    this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Original"].Value.DefaultInteger();
                    return;
                }

                int intQtdeReciclavelOriginal = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Original"].Value.DefaultInteger();
                // Marcar o serviço como cancelado
                this.Desmarcar_Item_Grid_Itens();
                this.dgvItens.CurrentRow.Cells["Marcado"].Value = 1;
                this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Original"].Value = 0;

                new InstalacaoBUS_NEW().Suspender_Cancelar_Servico_Instalacao(this.dtsPropriedades, Status_Instalacao.Cancelada, frmJustificativaReciclavel.Observacao, Root.Funcionalidades.UsuarioDO_Ativo.ID);

                foreach (Reciclagem_ITDO dtoReciclagemIT in colReciclagemIT)
                {
                    this.Alterar_Acordo_Reciclavel_Cancelamento(dtoReciclagemIT);

                    this.Incluir_Cancelamento_Reciclavel(dtoReciclagemIT, frmJustificativaReciclavel.Observacao);
                }

                // Gerar o romaneio de pre venda 
                this.Preencher_objeto_Pre_Venda_Tecnica(intQtdeReciclavelOriginal);


            }
            catch (Exception)
            {

                throw;
            }
        }

        private bool Processar_Acordo_Reciclavel()
        {
            try
            {
                if (this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"].DefaultString().ToUpper() == Constantes.Constantes_Caixa.ID_CONSUMIDOR_FINAL)
                {
                    MessageBox.Show("Não é permitido gerar crédito para consumidor final.", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value.DefaultInteger();
                    return false;
                }

                if (MessageBox.Show("Confirma a captação do reciclável?", this.Text, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value.DefaultInteger();
                    return false;
                }

                if (!Root.Permissao.Obter_Permissao_Do_Usuario(Root.Funcionalidades.UsuarioDO_Ativo, Root.Loja_Ativa.ID, this.Name, Acao_Formulario.Gerar_Credito.ToString()))
                {
                    object objUsuario = Utilitario.Autenticar_Usuario();
                    if (objUsuario == null)
                        return false;

                    if (!Root.Permissao.Obter_Permissao_Do_Usuario(objUsuario, Root.Loja_Ativa.ID, this.Name, Acao_Formulario.Gerar_Credito.ToString()))
                    {
                        MessageBox.Show("Usuário não tem permissão para realizar esta ação! ", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value.DefaultInteger();
                        return false;
                    }
                }

                int intQtdeAcordo = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value.DefaultInteger() - this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Original"].Value.DefaultInteger();

                this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde_Anterior"].Value = this.dgvItens.CurrentRow.Cells["Reciclavel_Qtde"].Value;
                this.Incluir_Acordo_Reciclavel(this.dgvItens.CurrentRow.Cells["Lojas_Origem_ID"].Value.DefaultInteger(), this.dgvItens.CurrentRow.Cells["Romaneio_IT_ID"].Value.DefaultString(), intQtdeAcordo);

                if (this.dgvItens.CurrentRow.Cells["Produto_Reciclavel_Desconto"].Value.DefaultBool())
                {
                    this.Preencher_Objeto_Pre_Venda_Credito(intQtdeAcordo);
                }

                this.Mudar_Cor_Linha_Grid_Item_Recolher_Reciclavel();

                return true;
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Preencher_Objeto_Pre_Venda_Credito(int intQtde)
        {
            try
            {
                Reciclagem_CTBUS.Pre_Venda dtoPreVenda = new Reciclagem_CTBUS.Pre_Venda();
                dtoPreVenda.Lojas = Root.Loja_Ativa.ID;
                dtoPreVenda.Vendedor = Root.Funcionalidades.UsuarioDO_Ativo.ID;
                dtoPreVenda.Cliente = this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"].DefaultString();
                dtoPreVenda.Cliente_Cpf_Cnpj = this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_CPF_CNPJ"].DefaultString();
                dtoPreVenda.Cliente_Nome = this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_Nome"].DefaultString();
                dtoPreVenda.Usuario_Separador_ID = 0;
                dtoPreVenda.Objeto_Origem_ID = this.dgvItens.CurrentRow.Cells["Romaneio_IT_ID"].Value.DefaultString();
                dtoPreVenda.Sequencia = this.colPreVenda.FindAll(x => x.Tipo_Romaneio_ID == TipoRomaneio.Troca.DefaultInteger()).Count + 1;
                dtoPreVenda.Tipo_Romaneio_ID = TipoRomaneio.Troca.DefaultInteger();
                dtoPreVenda.Objeto_ID = this.dgvItens.CurrentRow.Cells["Servico_ID"].Value.DefaultInteger();
                dtoPreVenda.Objeto_Tipo_ID = Tipo_Objeto.Servico.DefaultInteger();
                dtoPreVenda.Quantidade = intQtde;
                dtoPreVenda.Valor_Unitario = this.dgvItens.CurrentRow.Cells["Romaneio_It_Preco_Lista"].Value.DefaultDecimal();
                dtoPreVenda.Lojas_Origem = this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Lojas_ID"].DefaultInteger();
                dtoPreVenda.Romaneio_Pre_Venda_Origem_CT = this.dgvItens.CurrentRow.Cells["Romaneio_CT_ID"].Value.DefaultInteger();
                dtoPreVenda.Motivo_Troca = MotivoTroca.Credito_de_Bateria.DefaultInteger();
                this.colPreVenda.Add(dtoPreVenda);
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Preencher_objeto_Pre_Venda_Tecnica(int intQtde)
        {
            try
            {
                if (this.dgvItens.CurrentRow.Cells["Romaneio_It_Preco_Lista"].Value.DefaultDecimal() != this.dgvItens.CurrentRow.Cells["Instalacao_IT_Preco_Pago"].Value.DefaultDecimal())
                {
                    Reciclagem_CTBUS.Pre_Venda dtoPreVenda = new Reciclagem_CTBUS.Pre_Venda();
                    dtoPreVenda.Lojas = Root.Loja_Ativa.ID;
                    dtoPreVenda.Vendedor = Root.Funcionalidades.UsuarioDO_Ativo.ID;
                    dtoPreVenda.Cliente = this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_ID"].DefaultString();
                    dtoPreVenda.Cliente_Cpf_Cnpj = this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_CPF_CNPJ"].DefaultString();
                    dtoPreVenda.Cliente_Nome = this.dtsPropriedades.Tables["Instalacao_CT"].Rows[0]["Cliente_Nome"].DefaultString();
                    dtoPreVenda.Usuario_Separador_ID = 0;
                    dtoPreVenda.Tipo_Romaneio_ID = TipoRomaneio.Tecnica.DefaultInteger();
                    dtoPreVenda.Objeto_ID = this.dgvItens.CurrentRow.Cells["Servico_ID"].Value.DefaultInteger();
                    dtoPreVenda.Objeto_Tipo_ID = Tipo_Objeto.Servico.DefaultInteger();
                    dtoPreVenda.Quantidade = intQtde;
                    dtoPreVenda.Valor_Unitario = this.dgvItens.CurrentRow.Cells["Romaneio_It_Preco_Lista"].Value.DefaultDecimal();

                    this.colPreVenda.Add(dtoPreVenda);
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Desmarcar_Item_Grid_Itens()
        {
            try
            {
                foreach (DataGridViewRow dgrItemGrid in this.dgvItens.Rows)
                {
                    dgrItemGrid.Cells["Marcado"].Value = 0;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool Validar_Romaneio_Credito_Utilizado(List<Reciclagem_ITDO> colReciclagemIT, ref int intRomaneioPreVendaCTID)
        {
            try
            {
                foreach (Reciclagem_ITDO dtoReciclagemIT in colReciclagemIT)
                {
                    List<Romaneio_Credito_ReciclagemDO> colRomaneioCreditoReiclagem = new Romaneio_Credito_ReciclagemBUS().Selecionar_Por_Reciclagem_IT(dtoReciclagemIT.Reciclagem_IT_ID, dtoReciclagemIT.Lojas_ID);
                    foreach (Romaneio_Credito_ReciclagemDO dtoRomaneioCredito in colRomaneioCreditoReiclagem)
                    {
                        DataTable dttRomaneioPreVenda = new Romaneio_Pre_VendaBUS().Selecionar(dtoRomaneioCredito.Romaneio_Pre_Venda_CT_ID, dtoRomaneioCredito.Lojas_ID);
                        if (dttRomaneioPreVenda.Rows.Count == 0)
                        {
                            intRomaneioPreVendaCTID = dtoRomaneioCredito.Romaneio_Pre_Venda_CT_ID;
                            return false;
                        }
                    }
                }

                return true;
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Selecionar_Impressora_Etiqueta_Reciclagem()
        {
            try
            {
                foreach (DataRow dtrInstalacao in dtsPropriedades.Tables["Instalacao_IT"].Select("Emitir_Etiqueta_Reciclagem = 1 AND Produto_Emitir_Etiqueta_Receber_Reciclavel = 1"))
                {
                    if (dtrInstalacao["Enum_Status_ID"].DefaultInteger() == Status_Instalacao.Finalizada.ToInteger())
                    {
                        if (this.busEtiquetaCT.Impressora.Tipo_Conexao == Impressora_Tipo_Conexao.Desconectada)
                        {
                            using (var frmImpressoraRede = new frmImpressoraRede())
                            {
                                frmImpressoraRede.ShowDialog();
                                this.busEtiquetaCT.Impressora = frmImpressoraRede.Impressora;
                                frmImpressoraRede.Close();
                                frmImpressoraRede.Dispose();
                            }
                        }
                        break;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        #endregion

    }
}

